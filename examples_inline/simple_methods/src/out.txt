Listening for transport dt_socket at address: 8000
[simplemethods:15140]    classlist:   1,217.70 ms,  0.96 GB
[simplemethods:15140]        (cap):     492.76 ms,  0.96 GB
Point to add NativeImageInlineDuringParsingPlugin
NativeImageInlineDuringParsingPlugin added
[simplemethods:15140]        setup:   1,635.56 ms,  0.96 GB
Snippet 1: getLayoutEncoding, doArraycopy
Snippet 1: isPrimitiveArray, doArraycopy
Snippet 1: boundsCheck, doArraycopy
Snippet 1: getLayoutEncoding, doArraycopy
Snippet 1: primitiveCopyBackward, doArraycopy
Snippet 1: boundsCheck, doArraycopy
Snippet 1: getLayoutEncoding, doArraycopy
Snippet 1: primitiveCopyForward, doArraycopy
Snippet 1: getLayoutEncoding, doArraycopy
Snippet 1: isObjectArray, doArraycopy
Snippet 1: boundsCheck, doArraycopy
Snippet 1: getLayoutEncoding, doArraycopy
Snippet 1: objectCopyBackward, doArraycopy
Snippet 1: isAssignableFromHub, doArraycopy
Snippet 1: getLayoutEncoding, doArraycopy
Snippet 1: isObjectArray, doArraycopy
Snippet 1: boundsCheck, doArraycopy
Snippet 1: objectStoreCheckCopyForward, doArraycopy
Snippet 1: boundsCheck, doArraycopy
Snippet 1: getLayoutEncoding, doArraycopy
Snippet 1: objectCopyForward, doArraycopy
Snippet 1: <init>, doArraycopy
Snippet 1: <init>, doArraycopy
Snippet 1: getArrayElementOffset, objectCopyForward
Snippet 1: getArrayElementOffset, objectCopyForward
Snippet 1: getArrayIndexScale, objectCopyForward
Snippet 1: <init>, boundsCheck
Snippet 1: getArrayElementOffset, objectCopyBackward
Snippet 1: getArrayElementOffset, objectCopyBackward
Snippet 1: getArrayIndexScale, objectCopyBackward
Snippet 1: getArrayElementOffset, primitiveCopyBackward
Snippet 1: getArrayElementOffset, primitiveCopyBackward
Snippet 1: getArrayIndexScale, primitiveCopyBackward
Snippet 1: getArrayElementOffset, primitiveCopyForward
Snippet 1: getArrayElementOffset, primitiveCopyForward
Snippet 1: getArrayIndexScale, primitiveCopyForward
Snippet 1: primitiveCopyForward, primitiveCopyForward
ForeignCall: isStatusJava, enterSlowPathTransitionFromVMToJava
ForeignCall: guarantee, enterSlowPathTransitionFromVMToJava
ForeignCall: slowPathRunJavaStateActions, enterSlowPathTransitionFromVMToJava

build structured graph: Caller: doShutdown (class: com.oracle.svm.core.jdk.VMErrorSubstitutions), par: String, Throwable, node count: 6
Callee: autoflush (class: com.oracle.svm.core.log.RealLog), par: boolean, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=385, code=ResolvedJavaMethodBytecode<RealLog.autoflush(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Narrow 
5|ZeroExtend 
6|StoreField#autoflush - node represents a write to a static or instance field. 
7|FrameState@5 - 7|FrameState@5 { sourceLine=386, code=ResolvedJavaMethodBytecode<RealLog.autoflush(boolean)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.autoflush(RealLog.java:385) [bci: 2], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=5, sourceFile=RealLog.java,  }
 
8|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: doShutdown (class: com.oracle.svm.core.jdk.VMErrorSubstitutions), par: String, Throwable, node count: 15
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: doShutdown (class: com.oracle.svm.core.jdk.VMErrorSubstitutions), par: String, Throwable, node count: 31
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: doShutdown (class: com.oracle.svm.core.jdk.VMErrorSubstitutions), par: String, Throwable, node count: 67
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: doShutdown (class: com.oracle.svm.core.jdk.VMErrorSubstitutions), par: String, Throwable, node count: 96
Callee: newline (class: com.oracle.svm.core.log.RealLog), par: , node count: 25
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=178, code=ResolvedJavaMethodBytecode<RealLog.newline()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
3|Constant([B, a -) - node represents a constant 
4|MethodCallTarget 
5|Invoke#Log.string 
6|FrameState@7 - 6|FrameState@7 { sourceLine=178, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:178) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
7|LoadField#autoflush - node represents a read of a static or instance field. 
8|Constant(0, i32) - node represents a constant 
9|== 
10|Begin 
11|Begin 
12|If 
13|MethodCallTarget 
14|Invoke#RealLog.flush 
15|FrameState@19 - 15|FrameState@19 { sourceLine=180, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:180) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=19, sourceFile=RealLog.java,  }
 
16|EndNode 
17|Merge 
18|EndNode 
19|FrameState@20 - 19|FrameState@20 { sourceLine=182, code=ResolvedJavaMethodBytecode<RealLog.newline()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=20, sourceFile=RealLog.java,  }
 
20|LoadField#indent - node represents a read of a static or instance field. 
21|MethodCallTarget 
22|Invoke#RealLog.spaces 
23|FrameState@28 - 23|FrameState@28 { sourceLine=182, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:182) [bci: 25], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=28, sourceFile=RealLog.java,  }
 
24|Return 

build structured graph: Caller: doShutdown (class: com.oracle.svm.core.jdk.VMErrorSubstitutions), par: String, Throwable, node count: 109
Callee: printDiagnostics (class: com.oracle.svm.core.SubstrateUtil), par: Log, Pointer, CodePointer, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=288, code=ResolvedJavaMethodBytecode<SubstrateUtil.printDiagnostics(Log, Pointer, CodePointer)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=SubstrateUtil.java,  }
 
5|Constant(0, i64) - node represents a constant 
6|MethodCallTarget 
7|Invoke#SubstrateUtil.printDiagnostics 
8|FrameState@12 - 8|FrameState@12 { sourceLine=289, code=ResolvedJavaMethodBytecode<SubstrateUtil.printDiagnostics(Log, Pointer, CodePointer)>, nodeSourcePosition=at com.oracle.svm.core.SubstrateUtil.printDiagnostics(SubstrateUtil.java:288) [bci: 9], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=12, sourceFile=SubstrateUtil.java,  }
 
9|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: doShutdown (class: com.oracle.svm.core.jdk.VMErrorSubstitutions), par: String, Throwable, node count: 117
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: doShutdown (class: com.oracle.svm.core.jdk.VMErrorSubstitutions), par: String, Throwable, node count: 128
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: doShutdown (class: com.oracle.svm.core.jdk.VMErrorSubstitutions), par: String, Throwable, node count: 163
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: doShutdown (class: com.oracle.svm.core.jdk.VMErrorSubstitutions), par: String, Throwable, node count: 229
Callee: getRawMessage (class: com.oracle.svm.core.jdk.JDKUtils), par: Throwable, node count: 29
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=37, code=ResolvedJavaMethodBytecode<JDKUtils.getRawMessage(Throwable)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=JDKUtils.java,  }
 
3|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
4|MethodCallTarget 
5|Invoke#SubstrateUtil.cast 
6|FrameState@6 - 6|FrameState@6 { sourceLine=37, code=ResolvedJavaMethodBytecode<JDKUtils.getRawMessage(Throwable)>, nodeSourcePosition=at com.oracle.svm.core.jdk.JDKUtils.getRawMessage(JDKUtils.java:37) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=6, sourceFile=JDKUtils.java,  }
 
7|InstanceOf 
8|BytecodeException#CLASS_CAST 
9|Begin 
10|Begin 
11|If 
12|FrameState@6 - 12|FrameState@6 { sourceLine=37, code=ResolvedJavaMethodBytecode<JDKUtils.getRawMessage(Throwable)>, nodeSourcePosition=at com.oracle.svm.core.jdk.JDKUtils.getRawMessage(JDKUtils.java:37) [bci: 6], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=6, sourceFile=JDKUtils.java,  }
 
15|Pi 
16|IsNull 
17|BytecodeException#NULL_POINTER 
18|Begin 
19|Begin 
20|If 
21|FrameState@9 - 21|FrameState@9 { sourceLine=37, code=ResolvedJavaMethodBytecode<JDKUtils.getRawMessage(Throwable)>, nodeSourcePosition=at com.oracle.svm.core.jdk.JDKUtils.getRawMessage(JDKUtils.java:37) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=9, sourceFile=JDKUtils.java,  }
 
23|EndNode 
24|Merge 
25|EndNode 
26|ValuePhi(8 17, a -) 
27|Pi 
28|LoadField#detailMessage - node represents a read of a static or instance field. 
29|Return 
30|FrameState@-4[AFTER_EXCEPTION_BCI] - 30|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<JDKUtils.getRawMessage(Throwable)>, stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
31|Unwind 

build structured graph: Caller: doShutdown (class: com.oracle.svm.core.jdk.VMErrorSubstitutions), par: String, Throwable, node count: 261
Callee: newline (class: com.oracle.svm.core.log.RealLog), par: , node count: 25
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=178, code=ResolvedJavaMethodBytecode<RealLog.newline()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
3|Constant([B, a -) - node represents a constant 
4|MethodCallTarget 
5|Invoke#Log.string 
6|FrameState@7 - 6|FrameState@7 { sourceLine=178, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:178) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
7|LoadField#autoflush - node represents a read of a static or instance field. 
8|Constant(0, i32) - node represents a constant 
9|== 
10|Begin 
11|Begin 
12|If 
13|MethodCallTarget 
14|Invoke#RealLog.flush 
15|FrameState@19 - 15|FrameState@19 { sourceLine=180, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:180) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=19, sourceFile=RealLog.java,  }
 
16|EndNode 
17|Merge 
18|EndNode 
19|FrameState@20 - 19|FrameState@20 { sourceLine=182, code=ResolvedJavaMethodBytecode<RealLog.newline()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=20, sourceFile=RealLog.java,  }
 
20|LoadField#indent - node represents a read of a static or instance field. 
21|MethodCallTarget 
22|Invoke#RealLog.spaces 
23|FrameState@28 - 23|FrameState@28 { sourceLine=182, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:182) [bci: 25], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=28, sourceFile=RealLog.java,  }
 
24|Return 

build structured graph: Caller: fatalError (class: com.oracle.svm.core.posix.PosixLogHandler), par: , node count: 3
Callee: isPrintDiagnosticsInProgress (class: com.oracle.svm.core.SubstrateUtil), par: , node count: 6
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=283, code=ResolvedJavaMethodBytecode<SubstrateUtil.isPrintDiagnosticsInProgress()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=SubstrateUtil.java,  }
 
2|LoadField#diagnosticsInProgress - node represents a read of a static or instance field. 
3|StateSplitProxy 
4|FrameState@3 - 4|FrameState@3 { sourceLine=283, code=ResolvedJavaMethodBytecode<SubstrateUtil.isPrintDiagnosticsInProgress()>, nodeSourcePosition=at com.oracle.svm.core.SubstrateUtil.isPrintDiagnosticsInProgress(SubstrateUtil.java:283) [bci: 0], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=3, sourceFile=SubstrateUtil.java,  }
 
5|Return 

build structured graph: Caller: doShutdown (class: com.oracle.svm.core.jdk.VMErrorSubstitutions), par: String, Throwable, node count: 278
Callee: fatalError (class: com.oracle.svm.core.posix.PosixLogHandler), par: , node count: 23
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=90, code=ResolvedJavaMethodBytecode<PosixLogHandler.fatalError()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=PosixLogHandler.java,  }
 
3|MethodCallTarget 
4|Invoke#SubstrateUtil.isPrintDiagnosticsInProgress 
5|FrameState@3 - 5|FrameState@3 { sourceLine=90, code=ResolvedJavaMethodBytecode<PosixLogHandler.fatalError()>, nodeSourcePosition=at com.oracle.svm.core.posix.PosixLogHandler.fatalError(PosixLogHandler.java:90) [bci: 0], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=3, sourceFile=PosixLogHandler.java,  }
 
6|Constant(0, i32) - node represents a constant 
7|== 
8|Begin 
9|Begin 
10|If 
11|Constant(3, i32) - node represents a constant 
12|MethodCallTarget 
13|Invoke#Unistd.sleep 
14|FrameState@10 - 14|FrameState@10 { sourceLine=92, code=ResolvedJavaMethodBytecode<PosixLogHandler.fatalError()>, nodeSourcePosition=at com.oracle.svm.core.posix.PosixLogHandler.fatalError(PosixLogHandler.java:92) [bci: 7], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=10, sourceFile=PosixLogHandler.java,  }
 
15|EndNode 
16|Merge 
17|EndNode 
18|FrameState@11 - 18|FrameState@11 { sourceLine=94, code=ResolvedJavaMethodBytecode<PosixLogHandler.fatalError()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=11, sourceFile=PosixLogHandler.java,  }
 
19|MethodCallTarget 
20|Invoke#LibC.abort 
21|FrameState@14 - 21|FrameState@14 { sourceLine=95, code=ResolvedJavaMethodBytecode<PosixLogHandler.fatalError()>, nodeSourcePosition=at com.oracle.svm.core.posix.PosixLogHandler.fatalError(PosixLogHandler.java:94) [bci: 11], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=14, sourceFile=PosixLogHandler.java,  }
 
22|Return 

build structured graph: Caller: dumpVMThreadState (class: com.oracle.svm.core.SubstrateUtil), par: Log, IsolateThread, node count: 68
Callee: dumpToLog (class: com.oracle.svm.core.threadlocal.VMThreadLocalInfos), par: Log, IsolateThread, node count: 866
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=63, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, stackSize=0, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=0, sourceFile=VMThreadLocalInfos.java,  }
 
4|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
5|Constant(com.oracle.svm.core.threadlocal.VMThreadLocalInfos, a -) - node represents a constant 
6|LogicConstant 
7|LoadField#infos - node represents a read of a static or instance field. 
8|IsNull 
9|BytecodeException#NULL_POINTER 
10|Begin 
11|Begin 
12|If 
13|FrameState@13 - 13|FrameState@13 { sourceLine=63, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:63) [bci: 13], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=13, sourceFile=VMThreadLocalInfos.java,  }
 
16|Pi 
17|ArrayLength 
18|Constant(0, i32) - node represents a constant 
20|EndNode 
21|LoopBegin 
22|ValuePhi(18 916, i32) 
23|FrameState@18 - 23|FrameState@18 { sourceLine=63, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, stackSize=0, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=18, sourceFile=VMThreadLocalInfos.java,  }
 
24|< 
26|LoopExit 
27|ValueProxy 
28|FrameState@413 - 28|FrameState@413 { sourceLine=91, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:91) [bci: 413], stackSize=0, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=413, sourceFile=VMThreadLocalInfos.java,  }
 
29|Begin 
30|If 
31|BytecodeException#NULL_POINTER 
32|Begin 
33|Begin 
34|If 
35|FrameState@27 - 35|FrameState@27 { sourceLine=63, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:63) [bci: 27], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=27, sourceFile=VMThreadLocalInfos.java,  }
 
37|EndNode 
38|Merge 
39|EndNode 
40|LoopExit 
41|ValueProxy 
42|ValueProxy 
43|FrameState@-4[AFTER_EXCEPTION_BCI] - 43|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
44|ValuePhi(9 42 57 71 86 104 120 135 153 169 184 202 218 240 259 277 296 314 331 353 372 390 408 426 445 467 486 504 522 540 557 579 598 621 639 657 675 694 715 735 753 772 789 810 826 844 860 875 892 910, a -) 
45|Pi 
46|ArrayLength 
47||<| 
48|BytecodeException#OUT_OF_BOUNDS 
49|Begin 
50|Begin 
51|If 
52|FrameState@27 - 52|FrameState@27 { sourceLine=63, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:63) [bci: 27], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=27, sourceFile=VMThreadLocalInfos.java,  }
 
54|EndNode 
55|LoopExit 
56|ValueProxy 
57|ValueProxy 
58|FrameState@-4[AFTER_EXCEPTION_BCI] - 58|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
59|LoadIndexed 
60|IsNull 
61|BytecodeException#NULL_POINTER 
62|Begin 
63|Begin 
64|If 
65|FrameState@33 - 65|FrameState@33 { sourceLine=64, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:64) [bci: 33], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=33, sourceFile=VMThreadLocalInfos.java,  }
 
67|EndNode 
68|LoopExit 
69|ValueProxy 
70|ValueProxy 
71|ValueProxy 
72|FrameState@-4[AFTER_EXCEPTION_BCI] - 72|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
73|Pi 
74|LoadField#offset - node represents a read of a static or instance field. 
75|IsNull 
76|BytecodeException#NULL_POINTER 
77|Begin 
78|Begin 
79|If 
80|FrameState@36 - 80|FrameState@36 { sourceLine=64, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:64) [bci: 36], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=36, sourceFile=VMThreadLocalInfos.java,  }
 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|Pi 
89|MethodCallTarget 
90|Invoke#Log.signed 
91|FrameState@39 - 91|FrameState@39 { sourceLine=64, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:64) [bci: 36], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=39, sourceFile=VMThreadLocalInfos.java,  }
 
92|Constant( (, a -) - node represents a constant 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@41 - 98|FrameState@41 { sourceLine=64, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:64) [bci: 41], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=41, sourceFile=VMThreadLocalInfos.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|Pi 
107|MethodCallTarget 
108|Invoke#Log.string 
109|FrameState@44 - 109|FrameState@44 { sourceLine=64, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:64) [bci: 41], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=44, sourceFile=VMThreadLocalInfos.java,  }
 
110|BytecodeException#NULL_POINTER 
111|Begin 
112|Begin 
113|If 
114|FrameState@46 - 114|FrameState@46 { sourceLine=64, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:64) [bci: 46], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=46, sourceFile=VMThreadLocalInfos.java,  }
 
116|EndNode 
117|LoopExit 
118|ValueProxy 
119|ValueProxy 
120|ValueProxy 
121|FrameState@-4[AFTER_EXCEPTION_BCI] - 121|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
122|Pi 
123|LoadField#sizeInBytes - node represents a read of a static or instance field. 
124|IsNull 
125|BytecodeException#NULL_POINTER 
126|Begin 
127|Begin 
128|If 
129|FrameState@49 - 129|FrameState@49 { sourceLine=64, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:64) [bci: 49], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=49, sourceFile=VMThreadLocalInfos.java,  }
 
131|EndNode 
132|LoopExit 
133|ValueProxy 
134|ValueProxy 
135|ValueProxy 
136|FrameState@-4[AFTER_EXCEPTION_BCI] - 136|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
137|Pi 
138|MethodCallTarget 
139|Invoke#Log.signed 
140|FrameState@52 - 140|FrameState@52 { sourceLine=64, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:64) [bci: 49], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=52, sourceFile=VMThreadLocalInfos.java,  }
 
141|Constant( bytes): , a -) - node represents a constant 
142|IsNull 
143|BytecodeException#NULL_POINTER 
144|Begin 
145|Begin 
146|If 
147|FrameState@54 - 147|FrameState@54 { sourceLine=64, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:64) [bci: 54], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=54, sourceFile=VMThreadLocalInfos.java,  }
 
149|EndNode 
150|LoopExit 
151|ValueProxy 
152|ValueProxy 
153|ValueProxy 
154|FrameState@-4[AFTER_EXCEPTION_BCI] - 154|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
155|Pi 
156|MethodCallTarget 
157|Invoke#Log.string 
158|FrameState@57 - 158|FrameState@57 { sourceLine=64, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:64) [bci: 54], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=57, sourceFile=VMThreadLocalInfos.java,  }
 
159|BytecodeException#NULL_POINTER 
160|Begin 
161|Begin 
162|If 
163|FrameState@59 - 163|FrameState@59 { sourceLine=64, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:64) [bci: 59], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=59, sourceFile=VMThreadLocalInfos.java,  }
 
165|EndNode 
166|LoopExit 
167|ValueProxy 
168|ValueProxy 
169|ValueProxy 
170|FrameState@-4[AFTER_EXCEPTION_BCI] - 170|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
171|Pi 
172|LoadField#name - node represents a read of a static or instance field. 
173|IsNull 
174|BytecodeException#NULL_POINTER 
175|Begin 
176|Begin 
177|If 
178|FrameState@62 - 178|FrameState@62 { sourceLine=64, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:64) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=62, sourceFile=VMThreadLocalInfos.java,  }
 
180|EndNode 
181|LoopExit 
182|ValueProxy 
183|ValueProxy 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|Pi 
187|MethodCallTarget 
188|Invoke#Log.string 
189|FrameState@65 - 189|FrameState@65 { sourceLine=64, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:64) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=65, sourceFile=VMThreadLocalInfos.java,  }
 
190|Constant( = , a -) - node represents a constant 
191|IsNull 
192|BytecodeException#NULL_POINTER 
193|Begin 
194|Begin 
195|If 
196|FrameState@67 - 196|FrameState@67 { sourceLine=64, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:64) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=67, sourceFile=VMThreadLocalInfos.java,  }
 
198|EndNode 
199|LoopExit 
200|ValueProxy 
201|ValueProxy 
202|ValueProxy 
203|FrameState@-4[AFTER_EXCEPTION_BCI] - 203|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
204|Pi 
205|MethodCallTarget 
206|Invoke#Log.string 
207|FrameState@70 - 207|FrameState@70 { sourceLine=64, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:64) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=70, sourceFile=VMThreadLocalInfos.java,  }
 
208|BytecodeException#NULL_POINTER 
209|Begin 
210|Begin 
211|If 
212|FrameState@73 - 212|FrameState@73 { sourceLine=65, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:65) [bci: 73], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=73, sourceFile=VMThreadLocalInfos.java,  }
 
214|EndNode 
215|LoopExit 
216|ValueProxy 
217|ValueProxy 
218|ValueProxy 
219|FrameState@-4[AFTER_EXCEPTION_BCI] - 219|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
220|Pi 
221|LoadField#threadLocalClass - node represents a read of a static or instance field. 
222|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
223|== 
224|Begin 
225|Begin 
226|If 
227|MethodCallTarget 
228|Invoke#VMThreadLocalInfos.primitiveData 
229|FrameState@85 - 229|FrameState@85 { sourceLine=66, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:66) [bci: 82], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=85, sourceFile=VMThreadLocalInfos.java,  }
 
230|BytecodeException#NULL_POINTER 
231|Begin 
232|Begin 
233|If 
234|FrameState@87 - 234|FrameState@87 { sourceLine=66, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:66) [bci: 87], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=87, sourceFile=VMThreadLocalInfos.java,  }
 
236|EndNode 
237|LoopExit 
238|ValueProxy 
239|ValueProxy 
240|ValueProxy 
241|FrameState@-4[AFTER_EXCEPTION_BCI] - 241|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
242|Pi 
243|LoadField#offset - node represents a read of a static or instance field. 
244|SignExtend 
245|OffsetAddress 
246|JavaRead 
247|Constant((int) , a -) - node represents a constant 
248|BytecodeException#NULL_POINTER 
249|Begin 
250|Begin 
251|If 
252|FrameState@103 - 252|FrameState@103 { sourceLine=67, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:67) [bci: 103], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=103, sourceFile=VMThreadLocalInfos.java,  }
 
254|EndNode 
255|LoopExit 
256|ValueProxy 
257|ValueProxy 
258|ValueProxy 
259|ValueProxy 
260|FrameState@-4[AFTER_EXCEPTION_BCI] - 260|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
261|Pi 
262|MethodCallTarget 
263|Invoke#Log.string 
264|FrameState@106 - 264|FrameState@106 { sourceLine=67, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:67) [bci: 103], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=106, sourceFile=VMThreadLocalInfos.java,  }
 
265|IsNull 
266|BytecodeException#NULL_POINTER 
267|Begin 
268|Begin 
269|If 
270|FrameState@108 - 270|FrameState@108 { sourceLine=67, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:67) [bci: 108], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=108, sourceFile=VMThreadLocalInfos.java,  }
 
272|EndNode 
273|LoopExit 
274|ValueProxy 
275|ValueProxy 
276|ValueProxy 
277|ValueProxy 
278|FrameState@-4[AFTER_EXCEPTION_BCI] - 278|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
279|Pi 
280|MethodCallTarget 
281|Invoke#Log.signed 
282|FrameState@111 - 282|FrameState@111 { sourceLine=67, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:67) [bci: 108], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=111, sourceFile=VMThreadLocalInfos.java,  }
 
283|Constant(  , a -) - node represents a constant 
284|IsNull 
285|BytecodeException#NULL_POINTER 
286|Begin 
287|Begin 
288|If 
289|FrameState@113 - 289|FrameState@113 { sourceLine=67, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:67) [bci: 113], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=113, sourceFile=VMThreadLocalInfos.java,  }
 
291|EndNode 
292|LoopExit 
293|ValueProxy 
294|ValueProxy 
295|ValueProxy 
296|ValueProxy 
297|FrameState@-4[AFTER_EXCEPTION_BCI] - 297|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
298|Pi 
299|MethodCallTarget 
300|Invoke#Log.string 
301|FrameState@116 - 301|FrameState@116 { sourceLine=67, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:67) [bci: 113], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=116, sourceFile=VMThreadLocalInfos.java,  }
 
302|IsNull 
303|BytecodeException#NULL_POINTER 
304|Begin 
305|Begin 
306|If 
307|FrameState@118 - 307|FrameState@118 { sourceLine=67, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:67) [bci: 118], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=118, sourceFile=VMThreadLocalInfos.java,  }
 
309|EndNode 
310|LoopExit 
311|ValueProxy 
312|ValueProxy 
313|ValueProxy 
314|ValueProxy 
315|FrameState@-4[AFTER_EXCEPTION_BCI] - 315|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
316|Pi 
317|MethodCallTarget 
318|Invoke#Log.zhex 
319|FrameState@121 - 319|FrameState@121 { sourceLine=67, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:67) [bci: 118], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=121, sourceFile=VMThreadLocalInfos.java,  }
 
321|BytecodeException#NULL_POINTER 
322|Begin 
323|Begin 
324|If 
325|FrameState@127 - 325|FrameState@127 { sourceLine=68, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:68) [bci: 127], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=127, sourceFile=VMThreadLocalInfos.java,  }
 
327|EndNode 
328|LoopExit 
329|ValueProxy 
330|ValueProxy 
331|ValueProxy 
332|FrameState@-4[AFTER_EXCEPTION_BCI] - 332|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
333|Pi 
334|LoadField#threadLocalClass - node represents a read of a static or instance field. 
335|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
336|== 
337|Begin 
338|Begin 
339|If 
340|MethodCallTarget 
341|Invoke#VMThreadLocalInfos.primitiveData 
342|FrameState@139 - 342|FrameState@139 { sourceLine=69, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:69) [bci: 136], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=139, sourceFile=VMThreadLocalInfos.java,  }
 
343|BytecodeException#NULL_POINTER 
344|Begin 
345|Begin 
346|If 
347|FrameState@141 - 347|FrameState@141 { sourceLine=69, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:69) [bci: 141], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=141, sourceFile=VMThreadLocalInfos.java,  }
 
349|EndNode 
350|LoopExit 
351|ValueProxy 
352|ValueProxy 
353|ValueProxy 
354|FrameState@-4[AFTER_EXCEPTION_BCI] - 354|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
355|Pi 
356|LoadField#offset - node represents a read of a static or instance field. 
357|SignExtend 
358|OffsetAddress 
359|JavaRead 
360|Constant((long) , a -) - node represents a constant 
361|BytecodeException#NULL_POINTER 
362|Begin 
363|Begin 
364|If 
365|FrameState@157 - 365|FrameState@157 { sourceLine=70, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:70) [bci: 157], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=157, sourceFile=VMThreadLocalInfos.java,  }
 
367|EndNode 
368|LoopExit 
369|ValueProxy 
370|ValueProxy 
371|ValueProxy 
372|ValueProxy 
373|FrameState@-4[AFTER_EXCEPTION_BCI] - 373|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
374|Pi 
375|MethodCallTarget 
376|Invoke#Log.string 
377|FrameState@160 - 377|FrameState@160 { sourceLine=70, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:70) [bci: 157], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=160, sourceFile=VMThreadLocalInfos.java,  }
 
378|IsNull 
379|BytecodeException#NULL_POINTER 
380|Begin 
381|Begin 
382|If 
383|FrameState@162 - 383|FrameState@162 { sourceLine=70, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:70) [bci: 162], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=162, sourceFile=VMThreadLocalInfos.java,  }
 
385|EndNode 
386|LoopExit 
387|ValueProxy 
388|ValueProxy 
389|ValueProxy 
390|ValueProxy 
391|FrameState@-4[AFTER_EXCEPTION_BCI] - 391|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
392|Pi 
393|MethodCallTarget 
394|Invoke#Log.signed 
395|FrameState@165 - 395|FrameState@165 { sourceLine=70, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:70) [bci: 162], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=165, sourceFile=VMThreadLocalInfos.java,  }
 
396|IsNull 
397|BytecodeException#NULL_POINTER 
398|Begin 
399|Begin 
400|If 
401|FrameState@167 - 401|FrameState@167 { sourceLine=70, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:70) [bci: 167], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=167, sourceFile=VMThreadLocalInfos.java,  }
 
403|EndNode 
404|LoopExit 
405|ValueProxy 
406|ValueProxy 
407|ValueProxy 
408|ValueProxy 
409|FrameState@-4[AFTER_EXCEPTION_BCI] - 409|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
410|Pi 
411|MethodCallTarget 
412|Invoke#Log.string 
413|FrameState@170 - 413|FrameState@170 { sourceLine=70, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:70) [bci: 167], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=170, sourceFile=VMThreadLocalInfos.java,  }
 
414|IsNull 
415|BytecodeException#NULL_POINTER 
416|Begin 
417|Begin 
418|If 
419|FrameState@172 - 419|FrameState@172 { sourceLine=70, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:70) [bci: 172], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=172, sourceFile=VMThreadLocalInfos.java,  }
 
421|EndNode 
422|LoopExit 
423|ValueProxy 
424|ValueProxy 
425|ValueProxy 
426|ValueProxy 
427|FrameState@-4[AFTER_EXCEPTION_BCI] - 427|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
428|Pi 
429|MethodCallTarget 
430|Invoke#Log.zhex 
431|FrameState@175 - 431|FrameState@175 { sourceLine=70, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:70) [bci: 172], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=175, sourceFile=VMThreadLocalInfos.java,  }
 
432|EndNode 
433|Merge 
434|EndNode 
435|BytecodeException#NULL_POINTER 
436|Begin 
437|Begin 
438|If 
439|FrameState@181 - 439|FrameState@181 { sourceLine=71, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:71) [bci: 181], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=181, sourceFile=VMThreadLocalInfos.java,  }
 
441|EndNode 
442|LoopExit 
443|ValueProxy 
444|ValueProxy 
445|ValueProxy 
446|FrameState@-4[AFTER_EXCEPTION_BCI] - 446|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
447|Pi 
448|LoadField#threadLocalClass - node represents a read of a static or instance field. 
449|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
450|== 
451|Begin 
452|Begin 
453|If 
454|MethodCallTarget 
455|Invoke#VMThreadLocalInfos.primitiveData 
456|FrameState@193 - 456|FrameState@193 { sourceLine=72, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:72) [bci: 190], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=193, sourceFile=VMThreadLocalInfos.java,  }
 
457|BytecodeException#NULL_POINTER 
458|Begin 
459|Begin 
460|If 
461|FrameState@195 - 461|FrameState@195 { sourceLine=72, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:72) [bci: 195], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=195, sourceFile=VMThreadLocalInfos.java,  }
 
463|EndNode 
464|LoopExit 
465|ValueProxy 
466|ValueProxy 
467|ValueProxy 
468|FrameState@-4[AFTER_EXCEPTION_BCI] - 468|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
469|Pi 
470|LoadField#offset - node represents a read of a static or instance field. 
471|SignExtend 
472|OffsetAddress 
473|JavaRead 
474|Constant((Word) , a -) - node represents a constant 
475|BytecodeException#NULL_POINTER 
476|Begin 
477|Begin 
478|If 
479|FrameState@211 - 479|FrameState@211 { sourceLine=73, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:73) [bci: 211], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=211, sourceFile=VMThreadLocalInfos.java,  }
 
481|EndNode 
482|LoopExit 
483|ValueProxy 
484|ValueProxy 
485|ValueProxy 
486|ValueProxy 
487|FrameState@-4[AFTER_EXCEPTION_BCI] - 487|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
488|Pi 
489|MethodCallTarget 
490|Invoke#Log.string 
491|FrameState@214 - 491|FrameState@214 { sourceLine=73, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:73) [bci: 211], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=214, sourceFile=VMThreadLocalInfos.java,  }
 
492|IsNull 
493|BytecodeException#NULL_POINTER 
494|Begin 
495|Begin 
496|If 
497|FrameState@216 - 497|FrameState@216 { sourceLine=73, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:73) [bci: 216], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=216, sourceFile=VMThreadLocalInfos.java,  }
 
499|EndNode 
500|LoopExit 
501|ValueProxy 
502|ValueProxy 
503|ValueProxy 
504|ValueProxy 
505|FrameState@-4[AFTER_EXCEPTION_BCI] - 505|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
506|Pi 
507|MethodCallTarget 
508|Invoke#Log.signed 
509|FrameState@219 - 509|FrameState@219 { sourceLine=73, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:73) [bci: 216], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=219, sourceFile=VMThreadLocalInfos.java,  }
 
510|IsNull 
511|BytecodeException#NULL_POINTER 
512|Begin 
513|Begin 
514|If 
515|FrameState@221 - 515|FrameState@221 { sourceLine=73, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:73) [bci: 221], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=221, sourceFile=VMThreadLocalInfos.java,  }
 
517|EndNode 
518|LoopExit 
519|ValueProxy 
520|ValueProxy 
521|ValueProxy 
522|ValueProxy 
523|FrameState@-4[AFTER_EXCEPTION_BCI] - 523|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
524|Pi 
525|MethodCallTarget 
526|Invoke#Log.string 
527|FrameState@224 - 527|FrameState@224 { sourceLine=73, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:73) [bci: 221], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=224, sourceFile=VMThreadLocalInfos.java,  }
 
528|IsNull 
529|BytecodeException#NULL_POINTER 
530|Begin 
531|Begin 
532|If 
533|FrameState@231 - 533|FrameState@231 { sourceLine=73, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:73) [bci: 231], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=231, sourceFile=VMThreadLocalInfos.java,  }
 
535|EndNode 
536|LoopExit 
537|ValueProxy 
538|ValueProxy 
539|ValueProxy 
540|ValueProxy 
541|FrameState@-4[AFTER_EXCEPTION_BCI] - 541|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
542|Pi 
543|MethodCallTarget 
544|Invoke#Log.zhex 
545|FrameState@234 - 545|FrameState@234 { sourceLine=73, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:73) [bci: 231], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=234, sourceFile=VMThreadLocalInfos.java,  }
 
546|EndNode 
547|BytecodeException#NULL_POINTER 
548|Begin 
549|Begin 
550|If 
551|FrameState@240 - 551|FrameState@240 { sourceLine=74, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:74) [bci: 240], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=240, sourceFile=VMThreadLocalInfos.java,  }
 
553|EndNode 
554|LoopExit 
555|ValueProxy 
556|ValueProxy 
557|ValueProxy 
558|FrameState@-4[AFTER_EXCEPTION_BCI] - 558|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
559|Pi 
560|LoadField#threadLocalClass - node represents a read of a static or instance field. 
561|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
562|== 
563|Begin 
564|Begin 
565|If 
566|MethodCallTarget 
567|Invoke#VMThreadLocalInfos.objectData 
568|FrameState@252 - 568|FrameState@252 { sourceLine=75, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:75) [bci: 249], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=252, sourceFile=VMThreadLocalInfos.java,  }
 
569|BytecodeException#NULL_POINTER 
570|Begin 
571|Begin 
572|If 
573|FrameState@254 - 573|FrameState@254 { sourceLine=75, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:75) [bci: 254], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=254, sourceFile=VMThreadLocalInfos.java,  }
 
575|EndNode 
576|LoopExit 
577|ValueProxy 
578|ValueProxy 
579|ValueProxy 
580|FrameState@-4[AFTER_EXCEPTION_BCI] - 580|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
581|Pi 
582|LoadField#offset - node represents a read of a static or instance field. 
583|SignExtend 
584|OffsetAddress 
585|JavaRead 
586|Constant((Object) , a -) - node represents a constant 
587|BytecodeException#NULL_POINTER 
588|Begin 
589|Begin 
590|If 
591|FrameState@268 - 591|FrameState@268 { sourceLine=76, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:76) [bci: 268], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=268, sourceFile=VMThreadLocalInfos.java,  }
 
593|EndNode 
594|LoopExit 
595|ValueProxy 
596|ValueProxy 
597|ValueProxy 
598|ValueProxy 
599|FrameState@-4[AFTER_EXCEPTION_BCI] - 599|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
600|Pi 
601|MethodCallTarget 
602|Invoke#Log.string 
603|FrameState@271 - 603|FrameState@271 { sourceLine=76, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:76) [bci: 268], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=271, sourceFile=VMThreadLocalInfos.java,  }
 
604|Constant(null, a -) - node represents a constant 
605|IsNull 
606|Begin 
607|Begin 
608|If 
609|Constant(null, a -) - node represents a constant 
610|BytecodeException#NULL_POINTER 
611|Begin 
612|Begin 
613|If 
614|FrameState@280 - 614|FrameState@280 { sourceLine=78, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:78) [bci: 280], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=280, sourceFile=VMThreadLocalInfos.java,  }
 
616|EndNode 
617|LoopExit 
618|ValueProxy 
619|ValueProxy 
620|ValueProxy 
621|ValueProxy 
622|FrameState@-4[AFTER_EXCEPTION_BCI] - 622|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
623|Pi 
624|MethodCallTarget 
625|Invoke#Log.string 
626|FrameState@283 - 626|FrameState@283 { sourceLine=78, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:78) [bci: 280], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=283, sourceFile=VMThreadLocalInfos.java,  }
 
628|BytecodeException#NULL_POINTER 
629|Begin 
630|Begin 
631|If 
632|FrameState@290 - 632|FrameState@290 { sourceLine=80, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:80) [bci: 290], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=290, sourceFile=VMThreadLocalInfos.java,  }
 
634|EndNode 
635|LoopExit 
636|ValueProxy 
637|ValueProxy 
638|ValueProxy 
639|ValueProxy 
640|FrameState@-4[AFTER_EXCEPTION_BCI] - 640|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
641|Pi 
642|GetClass 
643|MethodCallTarget 
644|Invoke#Class.getName 
645|FrameState@296 - 645|FrameState@296 { sourceLine=80, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:80) [bci: 293], stackSize=2, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=296, sourceFile=VMThreadLocalInfos.java,  }
 
646|BytecodeException#NULL_POINTER 
647|Begin 
648|Begin 
649|If 
650|FrameState@296 - 650|FrameState@296 { sourceLine=80, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:80) [bci: 296], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=296, sourceFile=VMThreadLocalInfos.java,  }
 
652|EndNode 
653|LoopExit 
654|ValueProxy 
655|ValueProxy 
656|ValueProxy 
657|ValueProxy 
658|FrameState@-4[AFTER_EXCEPTION_BCI] - 658|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
659|Pi 
660|MethodCallTarget 
661|Invoke#Log.string 
662|FrameState@299 - 662|FrameState@299 { sourceLine=80, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:80) [bci: 296], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=299, sourceFile=VMThreadLocalInfos.java,  }
 
663|IsNull 
664|BytecodeException#NULL_POINTER 
665|Begin 
666|Begin 
667|If 
668|FrameState@301 - 668|FrameState@301 { sourceLine=80, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:80) [bci: 301], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=301, sourceFile=VMThreadLocalInfos.java,  }
 
670|EndNode 
671|LoopExit 
672|ValueProxy 
673|ValueProxy 
674|ValueProxy 
675|ValueProxy 
676|FrameState@-4[AFTER_EXCEPTION_BCI] - 676|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
677|Pi 
678|MethodCallTarget 
679|Invoke#Log.string 
680|FrameState@304 - 680|FrameState@304 { sourceLine=80, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:80) [bci: 301], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=304, sourceFile=VMThreadLocalInfos.java,  }
 
681|WordCast 
682|IsNull 
683|BytecodeException#NULL_POINTER 
684|Begin 
685|Begin 
686|If 
687|FrameState@312 - 687|FrameState@312 { sourceLine=80, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:80) [bci: 312], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=312, sourceFile=VMThreadLocalInfos.java,  }
 
689|EndNode 
690|LoopExit 
691|ValueProxy 
692|ValueProxy 
693|ValueProxy 
694|ValueProxy 
695|FrameState@-4[AFTER_EXCEPTION_BCI] - 695|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
696|Pi 
697|MethodCallTarget 
698|Invoke#Log.zhex 
699|FrameState@315 - 699|FrameState@315 { sourceLine=80, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:80) [bci: 312], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=315, sourceFile=VMThreadLocalInfos.java,  }
 
700|EndNode 
701|Merge 
702|EndNode 
703|FrameState@316 - 703|FrameState@316 { sourceLine=82, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, stackSize=0, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=316, sourceFile=VMThreadLocalInfos.java,  }
 
704|EndNode 
705|BytecodeException#NULL_POINTER 
706|Begin 
707|Begin 
708|If 
709|FrameState@321 - 709|FrameState@321 { sourceLine=82, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:82) [bci: 321], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=321, sourceFile=VMThreadLocalInfos.java,  }
 
711|EndNode 
712|LoopExit 
713|ValueProxy 
714|ValueProxy 
715|ValueProxy 
716|FrameState@-4[AFTER_EXCEPTION_BCI] - 716|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
717|Pi 
718|LoadField#threadLocalClass - node represents a read of a static or instance field. 
719|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
720|== 
721|Begin 
722|Begin 
723|If 
724|Constant((bytes) , a -) - node represents a constant 
725|BytecodeException#NULL_POINTER 
726|Begin 
727|Begin 
728|If 
729|FrameState@332 - 729|FrameState@332 { sourceLine=83, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:83) [bci: 332], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=332, sourceFile=VMThreadLocalInfos.java,  }
 
731|EndNode 
732|LoopExit 
733|ValueProxy 
734|ValueProxy 
735|ValueProxy 
736|FrameState@-4[AFTER_EXCEPTION_BCI] - 736|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
737|Pi 
738|MethodCallTarget 
739|Invoke#Log.string 
740|FrameState@335 - 740|FrameState@335 { sourceLine=83, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:83) [bci: 332], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=335, sourceFile=VMThreadLocalInfos.java,  }
 
741|Constant(1, i32) - node represents a constant 
742|IsNull 
743|BytecodeException#NULL_POINTER 
744|Begin 
745|Begin 
746|If 
747|FrameState@336 - 747|FrameState@336 { sourceLine=83, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:83) [bci: 336], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=336, sourceFile=VMThreadLocalInfos.java,  }
 
749|EndNode 
750|LoopExit 
751|ValueProxy 
752|ValueProxy 
753|ValueProxy 
754|FrameState@-4[AFTER_EXCEPTION_BCI] - 754|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
755|Pi 
756|MethodCallTarget 
757|Invoke#Log.indent 
758|FrameState@339 - 758|FrameState@339 { sourceLine=83, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:83) [bci: 336], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=339, sourceFile=VMThreadLocalInfos.java,  }
 
759|MethodCallTarget 
760|Invoke#VMThreadLocalInfos.primitiveData 
761|FrameState@345 - 761|FrameState@345 { sourceLine=84, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:84) [bci: 342], stackSize=2, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=345, sourceFile=VMThreadLocalInfos.java,  }
 
762|BytecodeException#NULL_POINTER 
763|Begin 
764|Begin 
765|If 
766|FrameState@347 - 766|FrameState@347 { sourceLine=84, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:84) [bci: 347], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=347, sourceFile=VMThreadLocalInfos.java,  }
 
768|EndNode 
769|LoopExit 
770|ValueProxy 
771|ValueProxy 
772|ValueProxy 
773|FrameState@-4[AFTER_EXCEPTION_BCI] - 773|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
774|Pi 
775|LoadField#offset - node represents a read of a static or instance field. 
776|SignExtend 
777|+ 
778|Constant(8, i32) - node represents a constant 
779|BytecodeException#NULL_POINTER 
780|Begin 
781|Begin 
782|If 
783|FrameState@365 - 783|FrameState@365 { sourceLine=84, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:84) [bci: 365], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=365, sourceFile=VMThreadLocalInfos.java,  }
 
785|EndNode 
786|LoopExit 
787|ValueProxy 
788|ValueProxy 
789|ValueProxy 
790|FrameState@-4[AFTER_EXCEPTION_BCI] - 790|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
791|Pi 
792|LoadField#sizeInBytes - node represents a read of a static or instance field. 
793|Constant(31, i32) - node represents a constant 
794|>> 
795|Constant(29, i32) - node represents a constant 
796|>>> 
797|+ 
798|Constant(3, i32) - node represents a constant 
799|>> 
800|BytecodeException#NULL_POINTER 
801|Begin 
802|Begin 
803|If 
804|FrameState@371 - 804|FrameState@371 { sourceLine=84, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:84) [bci: 371], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=371, sourceFile=VMThreadLocalInfos.java,  }
 
806|EndNode 
807|LoopExit 
808|ValueProxy 
809|ValueProxy 
810|ValueProxy 
811|FrameState@-4[AFTER_EXCEPTION_BCI] - 811|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
812|Pi 
813|MethodCallTarget 
814|Invoke#Log.hexdump 
815|FrameState@374 - 815|FrameState@374 { sourceLine=84, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:84) [bci: 371], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=374, sourceFile=VMThreadLocalInfos.java,  }
 
816|BytecodeException#NULL_POINTER 
817|Begin 
818|Begin 
819|If 
820|FrameState@377 - 820|FrameState@377 { sourceLine=85, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:85) [bci: 377], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=377, sourceFile=VMThreadLocalInfos.java,  }
 
822|EndNode 
823|LoopExit 
824|ValueProxy 
825|ValueProxy 
826|ValueProxy 
827|FrameState@-4[AFTER_EXCEPTION_BCI] - 827|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
828|Pi 
829|MethodCallTarget 
830|Invoke#Log.indent 
831|FrameState@380 - 831|FrameState@380 { sourceLine=85, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:85) [bci: 377], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=380, sourceFile=VMThreadLocalInfos.java,  }
 
832|EndNode 
833|Constant(unknown class , a -) - node represents a constant 
834|BytecodeException#NULL_POINTER 
835|Begin 
836|Begin 
837|If 
838|FrameState@387 - 838|FrameState@387 { sourceLine=87, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:87) [bci: 387], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=387, sourceFile=VMThreadLocalInfos.java,  }
 
840|EndNode 
841|LoopExit 
842|ValueProxy 
843|ValueProxy 
844|ValueProxy 
845|FrameState@-4[AFTER_EXCEPTION_BCI] - 845|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
846|Pi 
847|MethodCallTarget 
848|Invoke#Log.string 
849|FrameState@390 - 849|FrameState@390 { sourceLine=87, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:87) [bci: 387], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=390, sourceFile=VMThreadLocalInfos.java,  }
 
850|BytecodeException#NULL_POINTER 
851|Begin 
852|Begin 
853|If 
854|FrameState@392 - 854|FrameState@392 { sourceLine=87, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:87) [bci: 392], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=392, sourceFile=VMThreadLocalInfos.java,  }
 
856|EndNode 
857|LoopExit 
858|ValueProxy 
859|ValueProxy 
860|ValueProxy 
861|FrameState@-4[AFTER_EXCEPTION_BCI] - 861|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
862|Pi 
863|LoadField#threadLocalClass - node represents a read of a static or instance field. 
864|IsNull 
865|BytecodeException#NULL_POINTER 
866|Begin 
867|Begin 
868|If 
869|FrameState@395 - 869|FrameState@395 { sourceLine=87, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:87) [bci: 395], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=395, sourceFile=VMThreadLocalInfos.java,  }
 
871|EndNode 
872|LoopExit 
873|ValueProxy 
874|ValueProxy 
875|ValueProxy 
876|FrameState@-4[AFTER_EXCEPTION_BCI] - 876|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
877|Pi 
878|MethodCallTarget 
879|Invoke#Class.getName 
880|FrameState@398 - 880|FrameState@398 { sourceLine=87, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:87) [bci: 395], stackSize=2, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=398, sourceFile=VMThreadLocalInfos.java,  }
 
881|IsNull 
882|BytecodeException#NULL_POINTER 
883|Begin 
884|Begin 
885|If 
886|FrameState@398 - 886|FrameState@398 { sourceLine=87, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:87) [bci: 398], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=398, sourceFile=VMThreadLocalInfos.java,  }
 
888|EndNode 
889|LoopExit 
890|ValueProxy 
891|ValueProxy 
892|ValueProxy 
893|FrameState@-4[AFTER_EXCEPTION_BCI] - 893|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
894|Pi 
895|MethodCallTarget 
896|Invoke#Log.string 
897|FrameState@401 - 897|FrameState@401 { sourceLine=87, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:87) [bci: 398], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=401, sourceFile=VMThreadLocalInfos.java,  }
 
898|EndNode 
899|FrameState@402 - 899|FrameState@402 { sourceLine=89, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, stackSize=0, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=402, sourceFile=VMThreadLocalInfos.java,  }
 
900|BytecodeException#NULL_POINTER 
901|Begin 
902|Begin 
903|If 
904|FrameState@403 - 904|FrameState@403 { sourceLine=89, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:89) [bci: 403], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=true, bci=403, sourceFile=VMThreadLocalInfos.java,  }
 
906|EndNode 
907|LoopExit 
908|ValueProxy 
909|ValueProxy 
910|ValueProxy 
911|FrameState@-4[AFTER_EXCEPTION_BCI] - 911|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(Log, IsolateThread) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
912|Pi 
913|MethodCallTarget 
914|Invoke#Log.newline 
915|FrameState@406 - 915|FrameState@406 { sourceLine=89, code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, nodeSourcePosition=at com.oracle.svm.core.threadlocal.VMThreadLocalInfos.dumpToLog(VMThreadLocalInfos.java:89) [bci: 403], stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=406, sourceFile=VMThreadLocalInfos.java,  }
 
916|+ 
917|LoopEnd 
918|Return 
919|FrameState@-4[AFTER_EXCEPTION_BCI] - 919|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMThreadLocalInfos.dumpToLog(Log, IsolateThread)>, stackSize=1, duringCall=false, locksSize=0, localsSize=8, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
920|Unwind 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 5
Callee: initialSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=225, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.initialSizeEncoding()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
2|Constant(0, i32) - node represents a constant 
3|Return 

build structured graph: Caller: lookupEntryIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, node count: 3
Callee: indexGranularity (class: com.oracle.svm.core.code.CodeInfoDecoder), par: , node count: 8
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=203, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.indexGranularity()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Integer, a -) - node represents a constant 
4|LogicConstant 
5|Constant(256, i32) - node represents a constant 
6|Constant(256, i64) - node represents a constant 
7|Return 

build structured graph: Caller: lookupEntryIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, node count: 7
Callee: indexGranularity (class: com.oracle.svm.core.code.CodeInfoDecoder), par: , node count: 8
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=203, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.indexGranularity()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Integer, a -) - node represents a constant 
4|LogicConstant 
5|Constant(256, i32) - node represents a constant 
6|Constant(256, i64) - node represents a constant 
7|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 9
Callee: lookupEntryIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=207, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupEntryIP(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoDecoder.indexGranularity 
5|FrameState@4 - 5|FrameState@4 { sourceLine=207, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupEntryIP(long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupEntryIP(CodeInfoDecoder.java:207) [bci: 1], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=4, sourceFile=CodeInfoDecoder.java,  }
 
6||/| 
7|MethodCallTarget 
8|Invoke#CodeInfoDecoder.indexGranularity 
9|FrameState@10 - 9|FrameState@10 { sourceLine=207, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupEntryIP(long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupEntryIP(CodeInfoDecoder.java:207) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=CodeInfoDecoder.java,  }
 
10|* 
11|Return 

build structured graph: Caller: loadEntryOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 9
Callee: indexGranularity (class: com.oracle.svm.core.code.CodeInfoDecoder), par: , node count: 8
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=203, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.indexGranularity()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Integer, a -) - node represents a constant 
4|LogicConstant 
5|Constant(256, i32) - node represents a constant 
6|Constant(256, i64) - node represents a constant 
7|Return 

build structured graph: Caller: loadEntryOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 13
Callee: getCodeInfoIndex (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=287, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoIndex(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=287, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoIndex(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoIndex(CodeInfoAccess.java:287) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(8, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadEntryOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 19
Callee: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=91, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS4 
6|FrameState@5 - 6|FrameState@5 { sourceLine=91, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU4(NonmovableByteArrayReader.java:91) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|SignExtend 
8|Constant(4294967295, i64) - node represents a constant 
9|ZeroExtend 
10|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 12
Callee: loadEntryOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 23
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=211, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryOffset(CodeInfo, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(com.oracle.svm.core.code.CodeInfoDecoderCounters, a -) - node represents a constant 
5|Constant(com.oracle.svm.core.util.Counter, a -) - node represents a constant 
6|MethodCallTarget 
7|Invoke#Counter.inc 
8|FrameState@9 - 8|FrameState@9 { sourceLine=212, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryOffset(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryOffset(CodeInfoDecoder.java:211) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=9, sourceFile=CodeInfoDecoder.java,  }
 
9|MethodCallTarget 
10|Invoke#CodeInfoDecoder.indexGranularity 
11|FrameState@13 - 11|FrameState@13 { sourceLine=212, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryOffset(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryOffset(CodeInfoDecoder.java:212) [bci: 10], stackSize=4, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=13, sourceFile=CodeInfoDecoder.java,  }
 
12||/| 
13|MethodCallTarget 
14|Invoke#CodeInfoAccess.getCodeInfoIndex 
15|FrameState@21 - 15|FrameState@21 { sourceLine=213, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryOffset(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryOffset(CodeInfoDecoder.java:213) [bci: 18], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=21, sourceFile=CodeInfoDecoder.java,  }
 
16|Constant(4, i64) - node represents a constant 
17|Constant(2, i32) - node represents a constant 
18|<< 
19|MethodCallTarget 
20|Invoke#NonmovableByteArrayReader.getU4 
21|FrameState@29 - 21|FrameState@29 { sourceLine=213, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryOffset(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryOffset(CodeInfoDecoder.java:213) [bci: 26], stackSize=2, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=29, sourceFile=CodeInfoDecoder.java,  }
 
22|Return 

build structured graph: Caller: loadEntryFlags (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 9
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadEntryFlags (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 12
Callee: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=83, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=83, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU1(NonmovableByteArrayReader.java:83) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|Constant(255, i32) - node represents a constant 
8|& 
9|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 22
Callee: loadEntryFlags (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 16
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=218, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryFlags(CodeInfo, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(com.oracle.svm.core.code.CodeInfoDecoderCounters, a -) - node represents a constant 
5|Constant(com.oracle.svm.core.util.Counter, a -) - node represents a constant 
6|MethodCallTarget 
7|Invoke#Counter.inc 
8|FrameState@9 - 8|FrameState@9 { sourceLine=219, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryFlags(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryFlags(CodeInfoDecoder.java:218) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=9, sourceFile=CodeInfoDecoder.java,  }
 
9|MethodCallTarget 
10|Invoke#CodeInfoAccess.getCodeInfoEncodings 
11|FrameState@13 - 11|FrameState@13 { sourceLine=219, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryFlags(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryFlags(CodeInfoDecoder.java:219) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=CodeInfoDecoder.java,  }
 
12|MethodCallTarget 
13|Invoke#NonmovableByteArrayReader.getU1 
14|FrameState@17 - 14|FrameState@17 { sourceLine=219, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryFlags(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryFlags(CodeInfoDecoder.java:219) [bci: 14], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=17, sourceFile=CodeInfoDecoder.java,  }
 
15|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 6
Callee: extractFS (class: com.oracle.svm.core.code.CodeInfoDecoder), par: int, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=444, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.extractFS(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|Constant(3, i32) - node represents a constant 
4|& 
5|Constant(0, i32) - node represents a constant 
6|>>> 
7|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 31
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 34
Callee: offsetFS (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=464, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetFS(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant(2, i32) - node represents a constant 
7|Constant(2, i64) - node represents a constant 
8|+ 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 37
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 42
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 45
Callee: offsetFS (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=464, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetFS(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant(2, i32) - node represents a constant 
7|Constant(2, i64) - node represents a constant 
8|+ 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 48
Callee: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=62, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=65, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS2(NonmovableByteArrayReader.java:65) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 53
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 56
Callee: offsetFS (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=464, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetFS(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant(2, i32) - node represents a constant 
7|Constant(2, i64) - node represents a constant 
8|+ 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 59
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 25
Callee: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 65
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=230, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
6|MethodCallTarget 
7|Invoke#CodeInfoDecoder.extractFS 
8|FrameState@4 - 8|FrameState@4 { sourceLine=230, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:230) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=4, sourceFile=CodeInfoDecoder.java,  }
 
9|IntegerSwitch 
10|Begin 
11|Begin 
12|Begin 
13|Begin 
14|Begin 
15|MethodCallTarget 
16|Invoke#VMError.shouldNotReachHere 
17|FrameState@84 - 17|FrameState@84 { sourceLine=240, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:240) [bci: 81], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=84, sourceFile=CodeInfoDecoder.java,  }
 
18|IsNull 
19|BytecodeException#NULL_POINTER 
20|Begin 
21|Begin 
22|If 
23|FrameState@84 - 23|FrameState@84 { sourceLine=240, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:240) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=true, bci=84, sourceFile=CodeInfoDecoder.java,  }
 
26|Pi 
28|EndNode 
29|Merge 
30|EndNode 
31|ValuePhi(19 26, a -) 
32|MethodCallTarget 
33|Invoke#CodeInfoAccess.getCodeInfoEncodings 
34|FrameState@71 - 34|FrameState@71 { sourceLine=238, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:238) [bci: 68], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=71, sourceFile=CodeInfoDecoder.java,  }
 
35|MethodCallTarget 
36|Invoke#CodeInfoDecoder.offsetFS 
37|FrameState@76 - 37|FrameState@76 { sourceLine=238, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:238) [bci: 73], stackSize=3, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=76, sourceFile=CodeInfoDecoder.java,  }
 
38|MethodCallTarget 
39|Invoke#NonmovableByteArrayReader.getS4 
40|FrameState@79 - 40|FrameState@79 { sourceLine=238, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:238) [bci: 76], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=79, sourceFile=CodeInfoDecoder.java,  }
 
41|SignExtend 
42|Return 
43|MethodCallTarget 
44|Invoke#CodeInfoAccess.getCodeInfoEncodings 
45|FrameState@57 - 45|FrameState@57 { sourceLine=236, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:236) [bci: 54], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=57, sourceFile=CodeInfoDecoder.java,  }
 
46|MethodCallTarget 
47|Invoke#CodeInfoDecoder.offsetFS 
48|FrameState@62 - 48|FrameState@62 { sourceLine=236, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:236) [bci: 59], stackSize=3, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=62, sourceFile=CodeInfoDecoder.java,  }
 
49|MethodCallTarget 
50|Invoke#NonmovableByteArrayReader.getS2 
51|FrameState@65 - 51|FrameState@65 { sourceLine=236, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:236) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=65, sourceFile=CodeInfoDecoder.java,  }
 
52|SignExtend 
53|Return 
54|MethodCallTarget 
55|Invoke#CodeInfoAccess.getCodeInfoEncodings 
56|FrameState@43 - 56|FrameState@43 { sourceLine=234, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:234) [bci: 40], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=43, sourceFile=CodeInfoDecoder.java,  }
 
57|MethodCallTarget 
58|Invoke#CodeInfoDecoder.offsetFS 
59|FrameState@48 - 59|FrameState@48 { sourceLine=234, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:234) [bci: 45], stackSize=3, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=48, sourceFile=CodeInfoDecoder.java,  }
 
60|MethodCallTarget 
61|Invoke#NonmovableByteArrayReader.getS1 
62|FrameState@51 - 62|FrameState@51 { sourceLine=234, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:234) [bci: 48], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=51, sourceFile=CodeInfoDecoder.java,  }
 
63|SignExtend 
64|Return 
65|Return 
66|FrameState@-4[AFTER_EXCEPTION_BCI] - 66|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
67|Unwind 

build structured graph: Caller: advanceIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, long, node count: 5
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: advanceIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, long, node count: 8
Callee: offsetIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=460, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetIP(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(1, i64) - node represents a constant 
5|+ 
6|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: advanceIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, long, node count: 11
Callee: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=83, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=83, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU1(NonmovableByteArrayReader.java:83) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|Constant(255, i32) - node represents a constant 
8|& 
9|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 40
Callee: advanceIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, long, node count: 25
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=362, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceIP(CodeInfo, long, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
5|MethodCallTarget 
6|Invoke#CodeInfoAccess.getCodeInfoEncodings 
7|FrameState@4 - 7|FrameState@4 { sourceLine=362, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceIP(CodeInfo, long, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.advanceIP(CodeInfoDecoder.java:362) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=4, sourceFile=CodeInfoDecoder.java,  }
 
8|MethodCallTarget 
9|Invoke#CodeInfoDecoder.offsetIP 
10|FrameState@8 - 10|FrameState@8 { sourceLine=362, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceIP(CodeInfo, long, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.advanceIP(CodeInfoDecoder.java:362) [bci: 5], stackSize=3, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=8, sourceFile=CodeInfoDecoder.java,  }
 
11|MethodCallTarget 
12|Invoke#NonmovableByteArrayReader.getU1 
13|FrameState@11 - 13|FrameState@11 { sourceLine=362, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceIP(CodeInfo, long, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.advanceIP(CodeInfoDecoder.java:362) [bci: 8], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=11, sourceFile=CodeInfoDecoder.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|== 
16|Begin 
17|Begin 
18|If 
19|Constant(9223372036854775807, i64) - node represents a constant 
20|Return 
21|Constant(1, i32) - node represents a constant 
23|SignExtend 
24|+ 
25|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: advanceOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 11
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 43
Callee: advanceOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=485, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceOffset(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(com.oracle.svm.core.code.CodeInfoDecoderCounters, a -) - node represents a constant 
5|Constant(com.oracle.svm.core.util.Counter, a -) - node represents a constant 
6|MethodCallTarget 
7|Invoke#Counter.inc 
8|FrameState@9 - 8|FrameState@9 { sourceLine=486, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceOffset(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.advanceOffset(CodeInfoDecoder.java:485) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=9, sourceFile=CodeInfoDecoder.java,  }
 
9|Constant([B, a -) - node represents a constant 
10|SignExtend 
11|MethodCallTarget 
12|Invoke#ByteArrayReader.getU1 
13|FrameState@18 - 13|FrameState@18 { sourceLine=486, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceOffset(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.advanceOffset(CodeInfoDecoder.java:486) [bci: 15], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=18, sourceFile=CodeInfoDecoder.java,  }
 
14|SignExtend 
15|+ 
16|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 5
Callee: extractEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: int, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=448, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.extractEX(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|Constant(12, i32) - node represents a constant 
4|& 
5|Constant(2, i32) - node represents a constant 
6|>>> 
7|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 30
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 33
Callee: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=469, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@30 - 10|FrameState@30 { sourceLine=470, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetEX(CodeInfoDecoder.java:470) [bci: 27], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=30, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 36
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 41
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 44
Callee: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=469, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@30 - 10|FrameState@30 { sourceLine=470, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetEX(CodeInfoDecoder.java:470) [bci: 27], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=30, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 47
Callee: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=62, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=65, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS2(NonmovableByteArrayReader.java:65) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 52
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 55
Callee: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=469, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@30 - 10|FrameState@30 { sourceLine=470, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetEX(CodeInfoDecoder.java:470) [bci: 27], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=30, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 58
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 62
Callee: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 65
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=245, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
5|MethodCallTarget 
6|Invoke#CodeInfoDecoder.extractEX 
7|FrameState@4 - 7|FrameState@4 { sourceLine=245, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:245) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=4, sourceFile=CodeInfoDecoder.java,  }
 
8|IntegerSwitch 
9|Begin 
10|Begin 
11|Begin 
12|Begin 
13|Begin 
14|MethodCallTarget 
15|Invoke#VMError.shouldNotReachHere 
16|FrameState@83 - 16|FrameState@83 { sourceLine=255, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:255) [bci: 80], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=83, sourceFile=CodeInfoDecoder.java,  }
 
17|IsNull 
18|BytecodeException#NULL_POINTER 
19|Begin 
20|Begin 
21|If 
22|FrameState@83 - 22|FrameState@83 { sourceLine=255, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:255) [bci: 83], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=83, sourceFile=CodeInfoDecoder.java,  }
 
25|Pi 
27|EndNode 
28|Merge 
29|EndNode 
30|ValuePhi(18 25, a -) 
31|MethodCallTarget 
32|Invoke#CodeInfoAccess.getCodeInfoEncodings 
33|FrameState@70 - 33|FrameState@70 { sourceLine=253, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:253) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=70, sourceFile=CodeInfoDecoder.java,  }
 
34|MethodCallTarget 
35|Invoke#CodeInfoDecoder.offsetEX 
36|FrameState@75 - 36|FrameState@75 { sourceLine=253, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:253) [bci: 72], stackSize=3, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=75, sourceFile=CodeInfoDecoder.java,  }
 
37|MethodCallTarget 
38|Invoke#NonmovableByteArrayReader.getS4 
39|FrameState@78 - 39|FrameState@78 { sourceLine=253, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:253) [bci: 75], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=78, sourceFile=CodeInfoDecoder.java,  }
 
40|SignExtend 
41|Return 
42|MethodCallTarget 
43|Invoke#CodeInfoAccess.getCodeInfoEncodings 
44|FrameState@56 - 44|FrameState@56 { sourceLine=251, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:251) [bci: 53], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=56, sourceFile=CodeInfoDecoder.java,  }
 
45|MethodCallTarget 
46|Invoke#CodeInfoDecoder.offsetEX 
47|FrameState@61 - 47|FrameState@61 { sourceLine=251, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:251) [bci: 58], stackSize=3, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=61, sourceFile=CodeInfoDecoder.java,  }
 
48|MethodCallTarget 
49|Invoke#NonmovableByteArrayReader.getS2 
50|FrameState@64 - 50|FrameState@64 { sourceLine=251, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:251) [bci: 61], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=64, sourceFile=CodeInfoDecoder.java,  }
 
51|SignExtend 
52|Return 
53|MethodCallTarget 
54|Invoke#CodeInfoAccess.getCodeInfoEncodings 
55|FrameState@42 - 55|FrameState@42 { sourceLine=249, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:249) [bci: 39], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=42, sourceFile=CodeInfoDecoder.java,  }
 
56|MethodCallTarget 
57|Invoke#CodeInfoDecoder.offsetEX 
58|FrameState@47 - 58|FrameState@47 { sourceLine=249, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:249) [bci: 44], stackSize=3, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=47, sourceFile=CodeInfoDecoder.java,  }
 
59|MethodCallTarget 
60|Invoke#NonmovableByteArrayReader.getS1 
61|FrameState@50 - 61|FrameState@50 { sourceLine=249, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:249) [bci: 47], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=50, sourceFile=CodeInfoDecoder.java,  }
 
62|SignExtend 
63|Return 
64|Constant(0, i64) - node represents a constant 
65|Return 
66|FrameState@-4[AFTER_EXCEPTION_BCI] - 66|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
67|Unwind 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 5
Callee: extractRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: int, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=452, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.extractRM(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|Constant(48, i32) - node represents a constant 
4|& 
5|Constant(4, i32) - node represents a constant 
6|>>> 
7|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 30
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 33
Callee: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=474, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetRM(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@38 - 10|FrameState@38 { sourceLine=475, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetRM(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetRM(CodeInfoDecoder.java:475) [bci: 35], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=38, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 36
Callee: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=91, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS4 
6|FrameState@5 - 6|FrameState@5 { sourceLine=91, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU4(NonmovableByteArrayReader.java:91) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|SignExtend 
8|Constant(4294967295, i64) - node represents a constant 
9|ZeroExtend 
10|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 40
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 43
Callee: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=474, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetRM(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@38 - 10|FrameState@38 { sourceLine=475, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetRM(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetRM(CodeInfoDecoder.java:475) [bci: 35], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=38, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=62, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=65, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS2(NonmovableByteArrayReader.java:65) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 46
Callee: getU2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=87, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS2 
6|FrameState@5 - 6|FrameState@5 { sourceLine=87, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU2(NonmovableByteArrayReader.java:87) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|Constant(65535, i32) - node represents a constant 
8|& 
9|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 69
Callee: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 55
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=260, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
5|MethodCallTarget 
6|Invoke#CodeInfoDecoder.extractRM 
7|FrameState@4 - 7|FrameState@4 { sourceLine=260, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:260) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=4, sourceFile=CodeInfoDecoder.java,  }
 
8|IntegerSwitch 
9|Begin 
10|Begin 
11|Begin 
12|Begin 
13|Begin 
14|MethodCallTarget 
15|Invoke#VMError.shouldNotReachHere 
16|FrameState@72 - 16|FrameState@72 { sourceLine=270, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:270) [bci: 69], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=72, sourceFile=CodeInfoDecoder.java,  }
 
17|IsNull 
18|BytecodeException#NULL_POINTER 
19|Begin 
20|Begin 
21|If 
22|FrameState@72 - 22|FrameState@72 { sourceLine=270, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:270) [bci: 72], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=72, sourceFile=CodeInfoDecoder.java,  }
 
25|Pi 
27|EndNode 
28|Merge 
29|EndNode 
30|ValuePhi(18 25, a -) 
31|MethodCallTarget 
32|Invoke#CodeInfoAccess.getCodeInfoEncodings 
33|FrameState@60 - 33|FrameState@60 { sourceLine=268, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:268) [bci: 57], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=60, sourceFile=CodeInfoDecoder.java,  }
 
34|MethodCallTarget 
35|Invoke#CodeInfoDecoder.offsetRM 
36|FrameState@65 - 36|FrameState@65 { sourceLine=268, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:268) [bci: 62], stackSize=3, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=65, sourceFile=CodeInfoDecoder.java,  }
 
37|MethodCallTarget 
38|Invoke#NonmovableByteArrayReader.getU4 
39|FrameState@68 - 39|FrameState@68 { sourceLine=268, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:268) [bci: 65], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=68, sourceFile=CodeInfoDecoder.java,  }
 
40|Return 
41|MethodCallTarget 
42|Invoke#CodeInfoAccess.getCodeInfoEncodings 
43|FrameState@46 - 43|FrameState@46 { sourceLine=266, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:266) [bci: 43], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=46, sourceFile=CodeInfoDecoder.java,  }
 
44|MethodCallTarget 
45|Invoke#CodeInfoDecoder.offsetRM 
46|FrameState@51 - 46|FrameState@51 { sourceLine=266, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:266) [bci: 48], stackSize=3, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=51, sourceFile=CodeInfoDecoder.java,  }
 
47|MethodCallTarget 
48|Invoke#NonmovableByteArrayReader.getU2 
49|FrameState@54 - 49|FrameState@54 { sourceLine=266, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:266) [bci: 51], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=54, sourceFile=CodeInfoDecoder.java,  }
 
50|SignExtend 
51|Return 
52|Constant(0, i64) - node represents a constant 
53|Return 
54|Constant(-1, i64) - node represents a constant 
55|Return 
56|FrameState@-4[AFTER_EXCEPTION_BCI] - 56|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
57|Unwind 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 5
Callee: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 82
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=117, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
5|MethodCallTarget 
6|Invoke#CodeInfoDecoder.initialSizeEncoding 
7|FrameState@3 - 7|FrameState@3 { sourceLine=117, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:117) [bci: 0], stackSize=1, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=3, sourceFile=CodeInfoDecoder.java,  }
 
8|SignExtend 
9|MethodCallTarget 
10|Invoke#CodeInfoDecoder.lookupEntryIP 
11|FrameState@10 - 11|FrameState@10 { sourceLine=118, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:118) [bci: 7], stackSize=2, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=10, sourceFile=CodeInfoDecoder.java,  }
 
12|MethodCallTarget 
13|Invoke#CodeInfoDecoder.loadEntryOffset 
14|FrameState@17 - 14|FrameState@17 { sourceLine=119, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:119) [bci: 14], stackSize=2, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=17, sourceFile=CodeInfoDecoder.java,  }
 
16|EndNode 
17|LoopBegin 
18|ValuePhi(8 26, i64) 
19|ValuePhi(10 41, i64) 
20|ValuePhi(13 44, i64) 
21|FrameState@19 - 21|FrameState@19 { sourceLine=121, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=19, sourceFile=CodeInfoDecoder.java,  }
 
22|MethodCallTarget 
23|Invoke#CodeInfoDecoder.loadEntryFlags 
24|FrameState@25 - 24|FrameState@25 { sourceLine=121, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:121) [bci: 22], stackSize=1, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=25, sourceFile=CodeInfoDecoder.java,  }
 
25|MethodCallTarget 
26|Invoke#CodeInfoDecoder.updateSizeEncoding 
27|FrameState@37 - 27|FrameState@37 { sourceLine=122, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:122) [bci: 34], stackSize=2, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=37, sourceFile=CodeInfoDecoder.java,  }
 
28|IntegerNormalizeCompare 
29|Constant(0, i32) - node represents a constant 
30|== 
31|Begin 
33|LoopExit 
34|ValueProxy 
35|ValueProxy 
36|ValueProxy 
37|ValueProxy 
38|FrameState@46 - 38|FrameState@46 { sourceLine=124, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:124) [bci: 46], stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=46, sourceFile=CodeInfoDecoder.java,  }
 
39|If 
40|MethodCallTarget 
41|Invoke#CodeInfoDecoder.advanceIP 
42|FrameState@91 - 42|FrameState@91 { sourceLine=130, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:130) [bci: 88], stackSize=2, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=91, sourceFile=CodeInfoDecoder.java,  }
 
43|MethodCallTarget 
44|Invoke#CodeInfoDecoder.advanceOffset 
45|FrameState@100 - 45|FrameState@100 { sourceLine=131, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:131) [bci: 97], stackSize=2, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=100, sourceFile=CodeInfoDecoder.java,  }
 
46|IntegerNormalizeCompare 
47|< 
48|LoopEnd 
50|LoopExit 
51|ValueProxy 
52|ValueProxy 
53|ValueProxy 
54|ValueProxy 
55|FrameState@109 - 55|FrameState@109 { sourceLine=134, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:134) [bci: 109], stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=109, sourceFile=CodeInfoDecoder.java,  }
 
56|Begin 
57|If 
58|Constant(0, i64) - node represents a constant 
59|OffsetAddress 
60|CInterfaceWrite 
61|FrameState@54 - 61|FrameState@54 { sourceLine=125, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:124) [bci: 49], stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=54, sourceFile=CodeInfoDecoder.java,  }
 
62|MethodCallTarget 
63|Invoke#CodeInfoDecoder.loadExceptionOffset 
64|FrameState@63 - 64|FrameState@63 { sourceLine=125, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:125) [bci: 60], stackSize=3, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=63, sourceFile=CodeInfoDecoder.java,  }
 
65|Constant(8, i64) - node represents a constant 
66|OffsetAddress 
67|CInterfaceWrite 
68|FrameState@68 - 68|FrameState@68 { sourceLine=126, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:125) [bci: 63], stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=68, sourceFile=CodeInfoDecoder.java,  }
 
69|MethodCallTarget 
70|Invoke#CodeInfoDecoder.loadReferenceMapIndex 
71|FrameState@77 - 71|FrameState@77 { sourceLine=126, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:126) [bci: 74], stackSize=3, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=77, sourceFile=CodeInfoDecoder.java,  }
 
72|Constant(16, i64) - node represents a constant 
73|OffsetAddress 
74|CInterfaceWrite 
75|FrameState@82 - 75|FrameState@82 { sourceLine=127, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:126) [bci: 77], stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=82, sourceFile=CodeInfoDecoder.java,  }
 
76|Return 
77|CInterfaceWrite 
78|FrameState@117 - 78|FrameState@117 { sourceLine=135, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:134) [bci: 112], stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=117, sourceFile=CodeInfoDecoder.java,  }
 
79|CInterfaceWrite 
80|FrameState@124 - 80|FrameState@124 { sourceLine=136, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:135) [bci: 119], stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=124, sourceFile=CodeInfoDecoder.java,  }
 
81|Constant(-1, i64) - node represents a constant 
82|CInterfaceWrite 
83|FrameState@133 - 83|FrameState@133 { sourceLine=137, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:136) [bci: 128], stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=133, sourceFile=CodeInfoDecoder.java,  }
 
84|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 5
Callee: initialSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=225, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.initialSizeEncoding()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
2|Constant(0, i32) - node represents a constant 
3|Return 

build structured graph: Caller: lookupEntryIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, node count: 3
Callee: indexGranularity (class: com.oracle.svm.core.code.CodeInfoDecoder), par: , node count: 8
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=203, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.indexGranularity()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Integer, a -) - node represents a constant 
4|LogicConstant 
5|Constant(256, i32) - node represents a constant 
6|Constant(256, i64) - node represents a constant 
7|Return 

build structured graph: Caller: lookupEntryIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, node count: 7
Callee: indexGranularity (class: com.oracle.svm.core.code.CodeInfoDecoder), par: , node count: 8
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=203, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.indexGranularity()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Integer, a -) - node represents a constant 
4|LogicConstant 
5|Constant(256, i32) - node represents a constant 
6|Constant(256, i64) - node represents a constant 
7|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 9
Callee: lookupEntryIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=207, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupEntryIP(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoDecoder.indexGranularity 
5|FrameState@4 - 5|FrameState@4 { sourceLine=207, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupEntryIP(long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupEntryIP(CodeInfoDecoder.java:207) [bci: 1], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=4, sourceFile=CodeInfoDecoder.java,  }
 
6||/| 
7|MethodCallTarget 
8|Invoke#CodeInfoDecoder.indexGranularity 
9|FrameState@10 - 9|FrameState@10 { sourceLine=207, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupEntryIP(long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupEntryIP(CodeInfoDecoder.java:207) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=CodeInfoDecoder.java,  }
 
10|* 
11|Return 

build structured graph: Caller: loadEntryOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 9
Callee: indexGranularity (class: com.oracle.svm.core.code.CodeInfoDecoder), par: , node count: 8
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=203, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.indexGranularity()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Integer, a -) - node represents a constant 
4|LogicConstant 
5|Constant(256, i32) - node represents a constant 
6|Constant(256, i64) - node represents a constant 
7|Return 

build structured graph: Caller: loadEntryOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 13
Callee: getCodeInfoIndex (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=287, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoIndex(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=287, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoIndex(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoIndex(CodeInfoAccess.java:287) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(8, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadEntryOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 19
Callee: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=91, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS4 
6|FrameState@5 - 6|FrameState@5 { sourceLine=91, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU4(NonmovableByteArrayReader.java:91) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|SignExtend 
8|Constant(4294967295, i64) - node represents a constant 
9|ZeroExtend 
10|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 12
Callee: loadEntryOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 23
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=211, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryOffset(CodeInfo, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(com.oracle.svm.core.code.CodeInfoDecoderCounters, a -) - node represents a constant 
5|Constant(com.oracle.svm.core.util.Counter, a -) - node represents a constant 
6|MethodCallTarget 
7|Invoke#Counter.inc 
8|FrameState@9 - 8|FrameState@9 { sourceLine=212, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryOffset(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryOffset(CodeInfoDecoder.java:211) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=9, sourceFile=CodeInfoDecoder.java,  }
 
9|MethodCallTarget 
10|Invoke#CodeInfoDecoder.indexGranularity 
11|FrameState@13 - 11|FrameState@13 { sourceLine=212, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryOffset(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryOffset(CodeInfoDecoder.java:212) [bci: 10], stackSize=4, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=13, sourceFile=CodeInfoDecoder.java,  }
 
12||/| 
13|MethodCallTarget 
14|Invoke#CodeInfoAccess.getCodeInfoIndex 
15|FrameState@21 - 15|FrameState@21 { sourceLine=213, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryOffset(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryOffset(CodeInfoDecoder.java:213) [bci: 18], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=21, sourceFile=CodeInfoDecoder.java,  }
 
16|Constant(4, i64) - node represents a constant 
17|Constant(2, i32) - node represents a constant 
18|<< 
19|MethodCallTarget 
20|Invoke#NonmovableByteArrayReader.getU4 
21|FrameState@29 - 21|FrameState@29 { sourceLine=213, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryOffset(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryOffset(CodeInfoDecoder.java:213) [bci: 26], stackSize=2, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=29, sourceFile=CodeInfoDecoder.java,  }
 
22|Return 

build structured graph: Caller: loadEntryFlags (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 9
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadEntryFlags (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 12
Callee: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=83, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=83, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU1(NonmovableByteArrayReader.java:83) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|Constant(255, i32) - node represents a constant 
8|& 
9|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 22
Callee: loadEntryFlags (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 16
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=218, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryFlags(CodeInfo, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(com.oracle.svm.core.code.CodeInfoDecoderCounters, a -) - node represents a constant 
5|Constant(com.oracle.svm.core.util.Counter, a -) - node represents a constant 
6|MethodCallTarget 
7|Invoke#Counter.inc 
8|FrameState@9 - 8|FrameState@9 { sourceLine=219, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryFlags(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryFlags(CodeInfoDecoder.java:218) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=9, sourceFile=CodeInfoDecoder.java,  }
 
9|MethodCallTarget 
10|Invoke#CodeInfoAccess.getCodeInfoEncodings 
11|FrameState@13 - 11|FrameState@13 { sourceLine=219, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryFlags(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryFlags(CodeInfoDecoder.java:219) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=CodeInfoDecoder.java,  }
 
12|MethodCallTarget 
13|Invoke#NonmovableByteArrayReader.getU1 
14|FrameState@17 - 14|FrameState@17 { sourceLine=219, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryFlags(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryFlags(CodeInfoDecoder.java:219) [bci: 14], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=17, sourceFile=CodeInfoDecoder.java,  }
 
15|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 6
Callee: extractFS (class: com.oracle.svm.core.code.CodeInfoDecoder), par: int, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=444, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.extractFS(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|Constant(3, i32) - node represents a constant 
4|& 
5|Constant(0, i32) - node represents a constant 
6|>>> 
7|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 31
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 34
Callee: offsetFS (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=464, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetFS(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant(2, i32) - node represents a constant 
7|Constant(2, i64) - node represents a constant 
8|+ 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 37
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 42
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 45
Callee: offsetFS (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=464, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetFS(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant(2, i32) - node represents a constant 
7|Constant(2, i64) - node represents a constant 
8|+ 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 48
Callee: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=62, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=65, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS2(NonmovableByteArrayReader.java:65) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 53
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 56
Callee: offsetFS (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=464, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetFS(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant(2, i32) - node represents a constant 
7|Constant(2, i64) - node represents a constant 
8|+ 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 59
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 25
Callee: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 65
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=230, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
6|MethodCallTarget 
7|Invoke#CodeInfoDecoder.extractFS 
8|FrameState@4 - 8|FrameState@4 { sourceLine=230, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:230) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=4, sourceFile=CodeInfoDecoder.java,  }
 
9|IntegerSwitch 
10|Begin 
11|Begin 
12|Begin 
13|Begin 
14|Begin 
15|MethodCallTarget 
16|Invoke#VMError.shouldNotReachHere 
17|FrameState@84 - 17|FrameState@84 { sourceLine=240, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:240) [bci: 81], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=84, sourceFile=CodeInfoDecoder.java,  }
 
18|IsNull 
19|BytecodeException#NULL_POINTER 
20|Begin 
21|Begin 
22|If 
23|FrameState@84 - 23|FrameState@84 { sourceLine=240, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:240) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=true, bci=84, sourceFile=CodeInfoDecoder.java,  }
 
26|Pi 
28|EndNode 
29|Merge 
30|EndNode 
31|ValuePhi(19 26, a -) 
32|MethodCallTarget 
33|Invoke#CodeInfoAccess.getCodeInfoEncodings 
34|FrameState@71 - 34|FrameState@71 { sourceLine=238, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:238) [bci: 68], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=71, sourceFile=CodeInfoDecoder.java,  }
 
35|MethodCallTarget 
36|Invoke#CodeInfoDecoder.offsetFS 
37|FrameState@76 - 37|FrameState@76 { sourceLine=238, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:238) [bci: 73], stackSize=3, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=76, sourceFile=CodeInfoDecoder.java,  }
 
38|MethodCallTarget 
39|Invoke#NonmovableByteArrayReader.getS4 
40|FrameState@79 - 40|FrameState@79 { sourceLine=238, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:238) [bci: 76], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=79, sourceFile=CodeInfoDecoder.java,  }
 
41|SignExtend 
42|Return 
43|MethodCallTarget 
44|Invoke#CodeInfoAccess.getCodeInfoEncodings 
45|FrameState@57 - 45|FrameState@57 { sourceLine=236, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:236) [bci: 54], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=57, sourceFile=CodeInfoDecoder.java,  }
 
46|MethodCallTarget 
47|Invoke#CodeInfoDecoder.offsetFS 
48|FrameState@62 - 48|FrameState@62 { sourceLine=236, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:236) [bci: 59], stackSize=3, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=62, sourceFile=CodeInfoDecoder.java,  }
 
49|MethodCallTarget 
50|Invoke#NonmovableByteArrayReader.getS2 
51|FrameState@65 - 51|FrameState@65 { sourceLine=236, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:236) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=65, sourceFile=CodeInfoDecoder.java,  }
 
52|SignExtend 
53|Return 
54|MethodCallTarget 
55|Invoke#CodeInfoAccess.getCodeInfoEncodings 
56|FrameState@43 - 56|FrameState@43 { sourceLine=234, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:234) [bci: 40], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=43, sourceFile=CodeInfoDecoder.java,  }
 
57|MethodCallTarget 
58|Invoke#CodeInfoDecoder.offsetFS 
59|FrameState@48 - 59|FrameState@48 { sourceLine=234, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:234) [bci: 45], stackSize=3, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=48, sourceFile=CodeInfoDecoder.java,  }
 
60|MethodCallTarget 
61|Invoke#NonmovableByteArrayReader.getS1 
62|FrameState@51 - 62|FrameState@51 { sourceLine=234, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:234) [bci: 48], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=51, sourceFile=CodeInfoDecoder.java,  }
 
63|SignExtend 
64|Return 
65|Return 
66|FrameState@-4[AFTER_EXCEPTION_BCI] - 66|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
67|Unwind 

build structured graph: Caller: advanceIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, long, node count: 5
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: advanceIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, long, node count: 8
Callee: offsetIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=460, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetIP(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(1, i64) - node represents a constant 
5|+ 
6|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: advanceIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, long, node count: 11
Callee: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=83, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=83, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU1(NonmovableByteArrayReader.java:83) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|Constant(255, i32) - node represents a constant 
8|& 
9|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 40
Callee: advanceIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, long, node count: 25
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=362, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceIP(CodeInfo, long, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
5|MethodCallTarget 
6|Invoke#CodeInfoAccess.getCodeInfoEncodings 
7|FrameState@4 - 7|FrameState@4 { sourceLine=362, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceIP(CodeInfo, long, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.advanceIP(CodeInfoDecoder.java:362) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=4, sourceFile=CodeInfoDecoder.java,  }
 
8|MethodCallTarget 
9|Invoke#CodeInfoDecoder.offsetIP 
10|FrameState@8 - 10|FrameState@8 { sourceLine=362, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceIP(CodeInfo, long, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.advanceIP(CodeInfoDecoder.java:362) [bci: 5], stackSize=3, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=8, sourceFile=CodeInfoDecoder.java,  }
 
11|MethodCallTarget 
12|Invoke#NonmovableByteArrayReader.getU1 
13|FrameState@11 - 13|FrameState@11 { sourceLine=362, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceIP(CodeInfo, long, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.advanceIP(CodeInfoDecoder.java:362) [bci: 8], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=11, sourceFile=CodeInfoDecoder.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|== 
16|Begin 
17|Begin 
18|If 
19|Constant(9223372036854775807, i64) - node represents a constant 
20|Return 
21|Constant(1, i32) - node represents a constant 
23|SignExtend 
24|+ 
25|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: advanceOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 11
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 43
Callee: advanceOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=485, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceOffset(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(com.oracle.svm.core.code.CodeInfoDecoderCounters, a -) - node represents a constant 
5|Constant(com.oracle.svm.core.util.Counter, a -) - node represents a constant 
6|MethodCallTarget 
7|Invoke#Counter.inc 
8|FrameState@9 - 8|FrameState@9 { sourceLine=486, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceOffset(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.advanceOffset(CodeInfoDecoder.java:485) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=9, sourceFile=CodeInfoDecoder.java,  }
 
9|Constant([B, a -) - node represents a constant 
10|SignExtend 
11|MethodCallTarget 
12|Invoke#ByteArrayReader.getU1 
13|FrameState@18 - 13|FrameState@18 { sourceLine=486, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceOffset(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.advanceOffset(CodeInfoDecoder.java:486) [bci: 15], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=18, sourceFile=CodeInfoDecoder.java,  }
 
14|SignExtend 
15|+ 
16|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 5
Callee: extractEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: int, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=448, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.extractEX(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|Constant(12, i32) - node represents a constant 
4|& 
5|Constant(2, i32) - node represents a constant 
6|>>> 
7|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 30
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 33
Callee: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=469, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@30 - 10|FrameState@30 { sourceLine=470, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetEX(CodeInfoDecoder.java:470) [bci: 27], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=30, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 36
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 41
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 44
Callee: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=469, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@30 - 10|FrameState@30 { sourceLine=470, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetEX(CodeInfoDecoder.java:470) [bci: 27], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=30, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 47
Callee: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=62, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=65, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS2(NonmovableByteArrayReader.java:65) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 52
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 55
Callee: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=469, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@30 - 10|FrameState@30 { sourceLine=470, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetEX(CodeInfoDecoder.java:470) [bci: 27], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=30, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 58
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 62
Callee: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 65
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=245, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
5|MethodCallTarget 
6|Invoke#CodeInfoDecoder.extractEX 
7|FrameState@4 - 7|FrameState@4 { sourceLine=245, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:245) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=4, sourceFile=CodeInfoDecoder.java,  }
 
8|IntegerSwitch 
9|Begin 
10|Begin 
11|Begin 
12|Begin 
13|Begin 
14|MethodCallTarget 
15|Invoke#VMError.shouldNotReachHere 
16|FrameState@83 - 16|FrameState@83 { sourceLine=255, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:255) [bci: 80], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=83, sourceFile=CodeInfoDecoder.java,  }
 
17|IsNull 
18|BytecodeException#NULL_POINTER 
19|Begin 
20|Begin 
21|If 
22|FrameState@83 - 22|FrameState@83 { sourceLine=255, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:255) [bci: 83], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=83, sourceFile=CodeInfoDecoder.java,  }
 
25|Pi 
27|EndNode 
28|Merge 
29|EndNode 
30|ValuePhi(18 25, a -) 
31|MethodCallTarget 
32|Invoke#CodeInfoAccess.getCodeInfoEncodings 
33|FrameState@70 - 33|FrameState@70 { sourceLine=253, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:253) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=70, sourceFile=CodeInfoDecoder.java,  }
 
34|MethodCallTarget 
35|Invoke#CodeInfoDecoder.offsetEX 
36|FrameState@75 - 36|FrameState@75 { sourceLine=253, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:253) [bci: 72], stackSize=3, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=75, sourceFile=CodeInfoDecoder.java,  }
 
37|MethodCallTarget 
38|Invoke#NonmovableByteArrayReader.getS4 
39|FrameState@78 - 39|FrameState@78 { sourceLine=253, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:253) [bci: 75], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=78, sourceFile=CodeInfoDecoder.java,  }
 
40|SignExtend 
41|Return 
42|MethodCallTarget 
43|Invoke#CodeInfoAccess.getCodeInfoEncodings 
44|FrameState@56 - 44|FrameState@56 { sourceLine=251, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:251) [bci: 53], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=56, sourceFile=CodeInfoDecoder.java,  }
 
45|MethodCallTarget 
46|Invoke#CodeInfoDecoder.offsetEX 
47|FrameState@61 - 47|FrameState@61 { sourceLine=251, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:251) [bci: 58], stackSize=3, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=61, sourceFile=CodeInfoDecoder.java,  }
 
48|MethodCallTarget 
49|Invoke#NonmovableByteArrayReader.getS2 
50|FrameState@64 - 50|FrameState@64 { sourceLine=251, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:251) [bci: 61], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=64, sourceFile=CodeInfoDecoder.java,  }
 
51|SignExtend 
52|Return 
53|MethodCallTarget 
54|Invoke#CodeInfoAccess.getCodeInfoEncodings 
55|FrameState@42 - 55|FrameState@42 { sourceLine=249, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:249) [bci: 39], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=42, sourceFile=CodeInfoDecoder.java,  }
 
56|MethodCallTarget 
57|Invoke#CodeInfoDecoder.offsetEX 
58|FrameState@47 - 58|FrameState@47 { sourceLine=249, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:249) [bci: 44], stackSize=3, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=47, sourceFile=CodeInfoDecoder.java,  }
 
59|MethodCallTarget 
60|Invoke#NonmovableByteArrayReader.getS1 
61|FrameState@50 - 61|FrameState@50 { sourceLine=249, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:249) [bci: 47], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=50, sourceFile=CodeInfoDecoder.java,  }
 
62|SignExtend 
63|Return 
64|Constant(0, i64) - node represents a constant 
65|Return 
66|FrameState@-4[AFTER_EXCEPTION_BCI] - 66|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
67|Unwind 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 5
Callee: extractRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: int, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=452, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.extractRM(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|Constant(48, i32) - node represents a constant 
4|& 
5|Constant(4, i32) - node represents a constant 
6|>>> 
7|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 30
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 33
Callee: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=474, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetRM(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@38 - 10|FrameState@38 { sourceLine=475, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetRM(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetRM(CodeInfoDecoder.java:475) [bci: 35], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=38, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 36
Callee: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=91, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS4 
6|FrameState@5 - 6|FrameState@5 { sourceLine=91, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU4(NonmovableByteArrayReader.java:91) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|SignExtend 
8|Constant(4294967295, i64) - node represents a constant 
9|ZeroExtend 
10|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 40
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 43
Callee: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=474, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetRM(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@38 - 10|FrameState@38 { sourceLine=475, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetRM(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetRM(CodeInfoDecoder.java:475) [bci: 35], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=38, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=62, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=65, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS2(NonmovableByteArrayReader.java:65) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 46
Callee: getU2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=87, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS2 
6|FrameState@5 - 6|FrameState@5 { sourceLine=87, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU2(NonmovableByteArrayReader.java:87) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|Constant(65535, i32) - node represents a constant 
8|& 
9|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 69
Callee: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 55
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=260, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
5|MethodCallTarget 
6|Invoke#CodeInfoDecoder.extractRM 
7|FrameState@4 - 7|FrameState@4 { sourceLine=260, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:260) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=4, sourceFile=CodeInfoDecoder.java,  }
 
8|IntegerSwitch 
9|Begin 
10|Begin 
11|Begin 
12|Begin 
13|Begin 
14|MethodCallTarget 
15|Invoke#VMError.shouldNotReachHere 
16|FrameState@72 - 16|FrameState@72 { sourceLine=270, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:270) [bci: 69], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=72, sourceFile=CodeInfoDecoder.java,  }
 
17|IsNull 
18|BytecodeException#NULL_POINTER 
19|Begin 
20|Begin 
21|If 
22|FrameState@72 - 22|FrameState@72 { sourceLine=270, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:270) [bci: 72], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=72, sourceFile=CodeInfoDecoder.java,  }
 
25|Pi 
27|EndNode 
28|Merge 
29|EndNode 
30|ValuePhi(18 25, a -) 
31|MethodCallTarget 
32|Invoke#CodeInfoAccess.getCodeInfoEncodings 
33|FrameState@60 - 33|FrameState@60 { sourceLine=268, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:268) [bci: 57], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=60, sourceFile=CodeInfoDecoder.java,  }
 
34|MethodCallTarget 
35|Invoke#CodeInfoDecoder.offsetRM 
36|FrameState@65 - 36|FrameState@65 { sourceLine=268, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:268) [bci: 62], stackSize=3, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=65, sourceFile=CodeInfoDecoder.java,  }
 
37|MethodCallTarget 
38|Invoke#NonmovableByteArrayReader.getU4 
39|FrameState@68 - 39|FrameState@68 { sourceLine=268, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:268) [bci: 65], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=68, sourceFile=CodeInfoDecoder.java,  }
 
40|Return 
41|MethodCallTarget 
42|Invoke#CodeInfoAccess.getCodeInfoEncodings 
43|FrameState@46 - 43|FrameState@46 { sourceLine=266, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:266) [bci: 43], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=46, sourceFile=CodeInfoDecoder.java,  }
 
44|MethodCallTarget 
45|Invoke#CodeInfoDecoder.offsetRM 
46|FrameState@51 - 46|FrameState@51 { sourceLine=266, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:266) [bci: 48], stackSize=3, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=51, sourceFile=CodeInfoDecoder.java,  }
 
47|MethodCallTarget 
48|Invoke#NonmovableByteArrayReader.getU2 
49|FrameState@54 - 49|FrameState@54 { sourceLine=266, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:266) [bci: 51], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=54, sourceFile=CodeInfoDecoder.java,  }
 
50|SignExtend 
51|Return 
52|Constant(0, i64) - node represents a constant 
53|Return 
54|Constant(-1, i64) - node represents a constant 
55|Return 
56|FrameState@-4[AFTER_EXCEPTION_BCI] - 56|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
57|Unwind 

build structured graph: Caller: loadEntryOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 9
Callee: indexGranularity (class: com.oracle.svm.core.code.CodeInfoDecoder), par: , node count: 8
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=203, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.indexGranularity()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Integer, a -) - node represents a constant 
4|LogicConstant 
5|Constant(256, i32) - node represents a constant 
6|Constant(256, i64) - node represents a constant 
7|Return 

build structured graph: Caller: loadEntryOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 13
Callee: getCodeInfoIndex (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=287, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoIndex(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=287, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoIndex(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoIndex(CodeInfoAccess.java:287) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(8, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadEntryOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 19
Callee: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=91, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS4 
6|FrameState@5 - 6|FrameState@5 { sourceLine=91, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU4(NonmovableByteArrayReader.java:91) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|SignExtend 
8|Constant(4294967295, i64) - node represents a constant 
9|ZeroExtend 
10|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 5
Callee: extractEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: int, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=448, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.extractEX(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|Constant(12, i32) - node represents a constant 
4|& 
5|Constant(2, i32) - node represents a constant 
6|>>> 
7|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 30
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 33
Callee: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=469, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@30 - 10|FrameState@30 { sourceLine=470, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetEX(CodeInfoDecoder.java:470) [bci: 27], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=30, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 36
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 41
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 44
Callee: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=469, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@30 - 10|FrameState@30 { sourceLine=470, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetEX(CodeInfoDecoder.java:470) [bci: 27], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=30, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 47
Callee: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=62, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=65, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS2(NonmovableByteArrayReader.java:65) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 52
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 55
Callee: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=469, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@30 - 10|FrameState@30 { sourceLine=470, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetEX(CodeInfoDecoder.java:470) [bci: 27], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=30, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 58
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 5
Callee: extractRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: int, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=452, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.extractRM(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|Constant(48, i32) - node represents a constant 
4|& 
5|Constant(4, i32) - node represents a constant 
6|>>> 
7|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 30
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 33
Callee: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=474, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetRM(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@38 - 10|FrameState@38 { sourceLine=475, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetRM(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetRM(CodeInfoDecoder.java:475) [bci: 35], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=38, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 36
Callee: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=91, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS4 
6|FrameState@5 - 6|FrameState@5 { sourceLine=91, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU4(NonmovableByteArrayReader.java:91) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|SignExtend 
8|Constant(4294967295, i64) - node represents a constant 
9|ZeroExtend 
10|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 40
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 43
Callee: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=474, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetRM(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@38 - 10|FrameState@38 { sourceLine=475, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetRM(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetRM(CodeInfoDecoder.java:475) [bci: 35], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=38, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=62, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=65, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS2(NonmovableByteArrayReader.java:65) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 46
Callee: getU2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=87, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS2 
6|FrameState@5 - 6|FrameState@5 { sourceLine=87, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU2(NonmovableByteArrayReader.java:87) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|Constant(65535, i32) - node represents a constant 
8|& 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=62, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=65, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS2(NonmovableByteArrayReader.java:65) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: advanceIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, long, node count: 5
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: advanceIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, long, node count: 8
Callee: offsetIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=460, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetIP(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(1, i64) - node represents a constant 
5|+ 
6|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: advanceIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, long, node count: 11
Callee: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=83, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=83, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU1(NonmovableByteArrayReader.java:83) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|Constant(255, i32) - node represents a constant 
8|& 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: lookupEntryIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, node count: 3
Callee: indexGranularity (class: com.oracle.svm.core.code.CodeInfoDecoder), par: , node count: 8
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=203, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.indexGranularity()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Integer, a -) - node represents a constant 
4|LogicConstant 
5|Constant(256, i32) - node represents a constant 
6|Constant(256, i64) - node represents a constant 
7|Return 

build structured graph: Caller: lookupEntryIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, node count: 7
Callee: indexGranularity (class: com.oracle.svm.core.code.CodeInfoDecoder), par: , node count: 8
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=203, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.indexGranularity()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Integer, a -) - node represents a constant 
4|LogicConstant 
5|Constant(256, i32) - node represents a constant 
6|Constant(256, i64) - node represents a constant 
7|Return 

build structured graph: Caller: loadEntryFlags (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 9
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadEntryFlags (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 12
Callee: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=83, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=83, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU1(NonmovableByteArrayReader.java:83) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|Constant(255, i32) - node represents a constant 
8|& 
9|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 6
Callee: extractFS (class: com.oracle.svm.core.code.CodeInfoDecoder), par: int, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=444, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.extractFS(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|Constant(3, i32) - node represents a constant 
4|& 
5|Constant(0, i32) - node represents a constant 
6|>>> 
7|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 31
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 34
Callee: offsetFS (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=464, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetFS(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant(2, i32) - node represents a constant 
7|Constant(2, i64) - node represents a constant 
8|+ 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 37
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 42
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 45
Callee: offsetFS (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=464, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetFS(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant(2, i32) - node represents a constant 
7|Constant(2, i64) - node represents a constant 
8|+ 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 48
Callee: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=62, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=65, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS2(NonmovableByteArrayReader.java:65) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 53
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 56
Callee: offsetFS (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=464, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetFS(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant(2, i32) - node represents a constant 
7|Constant(2, i64) - node represents a constant 
8|+ 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 59
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: advanceOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 11
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: dumpVMThreads (class: com.oracle.svm.core.SubstrateUtil), par: Log, node count: 144
Callee: fromVMThread (class: com.oracle.svm.core.thread.JavaThreads), par: IsolateThread, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=190, code=ResolvedJavaMethodBytecode<JavaThreads.fromVMThread(IsolateThread)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=JavaThreads.java,  }
 
3|Constant(com.oracle.svm.core.threadlocal.FastThreadLocalObject, a -) - node represents a constant 
4|LoadVMThreadLocal 
5|LogicConstant 
6|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 116
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 119
Callee: max (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1428, code=ResolvedJavaMethodBytecode<Math.max(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1428, code=ResolvedJavaMethodBytecode<Math.max(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 127
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 261
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: number (class: com.oracle.svm.core.log.RealLog), par: long, int, boolean, int, int, node count: 68
Callee: digit (class: com.oracle.svm.core.log.RealLog), par: long, node count: 23
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=397, code=ResolvedJavaMethodBytecode<RealLog.digit(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
3|Constant(10, i64) - node represents a constant 
4|IntegerNormalizeCompare 
5|Constant(0, i32) - node represents a constant 
6|< 
7|Begin 
8|Begin 
9|If 
10|Constant(48, i32) - node represents a constant 
12|Constant(87, i32) - node represents a constant 
13|EndNode 
14|Merge 
15|EndNode 
16|ValuePhi(10 12, i32) 
17|FrameState@16 - 17|FrameState@16 { sourceLine=397, code=ResolvedJavaMethodBytecode<RealLog.digit(long)>, stackSize=3, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=16, sourceFile=RealLog.java,  }
 
18|ZeroExtend 
19|+ 
20|Narrow 
21|Narrow 
22|SignExtend 
23|Return 

build structured graph: Caller: number (class: com.oracle.svm.core.log.RealLog), par: long, int, boolean, int, int, node count: 82
Callee: digit (class: com.oracle.svm.core.log.RealLog), par: long, node count: 23
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=397, code=ResolvedJavaMethodBytecode<RealLog.digit(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
3|Constant(10, i64) - node represents a constant 
4|IntegerNormalizeCompare 
5|Constant(0, i32) - node represents a constant 
6|< 
7|Begin 
8|Begin 
9|If 
10|Constant(48, i32) - node represents a constant 
12|Constant(87, i32) - node represents a constant 
13|EndNode 
14|Merge 
15|EndNode 
16|ValuePhi(10 12, i32) 
17|FrameState@16 - 17|FrameState@16 { sourceLine=397, code=ResolvedJavaMethodBytecode<RealLog.digit(long)>, stackSize=3, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=16, sourceFile=RealLog.java,  }
 
18|ZeroExtend 
19|+ 
20|Narrow 
21|Narrow 
22|SignExtend 
23|Return 

build structured graph: Caller: unsigned (class: com.oracle.svm.core.log.RealLog), par: long, int, int, node count: 8
Callee: number (class: com.oracle.svm.core.log.RealLog), par: long, int, boolean, int, int, node count: 143
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|Parameter(4) - node represents a placeholder for an incoming argument to a function call. 
6|Parameter(5) - node represents a placeholder for an incoming argument to a function call. 
7|FrameState@0 - 7|FrameState@0 { sourceLine=202, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
8|Constant(2, i32) - node represents a constant 
9|< 
10|Begin 
11|Begin 
12|If 
13|Constant(36, i32) - node represents a constant 
14|Constant(37, i32) - node represents a constant 
15|< 
16|EndNode 
17|Merge 
18|EndNode 
19|Begin 
20|Begin 
21|If 
22|Constant(65, i32) - node represents a constant 
23|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
24|StackValue 
25|Constant(0, i32) - node represents a constant 
26|== 
27|Begin 
28|Begin 
29|If 
30|Constant(0, i64) - node represents a constant 
31|IntegerNormalizeCompare 
32|< 
33|Constant(1, i32) - node represents a constant 
34|Conditional 
36|EndNode 
37|Merge 
38|EndNode 
39|ValuePhi(34 25, i32) 
40|FrameState@49 - 40|FrameState@49 { sourceLine=212, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=49, sourceFile=RealLog.java,  }
 
41|== 
42|Begin 
43|Begin 
44|If 
45|Negate 
47|EndNode 
48|Merge 
49|EndNode 
50|ValuePhi(45 2, i64) 
51|FrameState@66 - 51|FrameState@66 { sourceLine=224, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=66, sourceFile=RealLog.java,  }
 
52|EndNode 
53|LoopBegin 
54|ValuePhi(22 68, i32) 
55|ValuePhi(50 81, i64) 
56|FrameState@66 - 56|FrameState@66 { sourceLine=224, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=66, sourceFile=RealLog.java,  }
 
57|SignExtend 
58||<| 
59|Conditional 
60|Begin 
62|LoopExit 
63|ValueProxy 
64|ValueProxy 
65|FrameState@110 - 65|FrameState@110 { sourceLine=229, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:229) [bci: 110], stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=110, sourceFile=RealLog.java,  }
 
66|If 
67|Constant(-1, i32) - node represents a constant 
68|+ 
69||%| 
70|MethodCallTarget 
71|Invoke#RealLog.digit 
72|FrameState@93 - 72|FrameState@93 { sourceLine=226, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:226) [bci: 90], stackSize=3, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=93, sourceFile=RealLog.java,  }
 
73|SignExtend 
74|Constant(1, i64) - node represents a constant 
75|* 
76|+ 
77|OffsetAddress 
78|Narrow 
79|CInterfaceWrite 
80|FrameState@98 - 80|FrameState@98 { sourceLine=227, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:226) [bci: 93], stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=98, sourceFile=RealLog.java,  }
 
81||/| 
82|LoopEnd 
83|+ 
84|MethodCallTarget 
85|Invoke#RealLog.digit 
86|FrameState@122 - 86|FrameState@122 { sourceLine=230, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:230) [bci: 119], stackSize=3, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
87|SignExtend 
88|* 
89|+ 
90|OffsetAddress 
91|Narrow 
92|CInterfaceWrite 
93|FrameState@127 - 93|FrameState@127 { sourceLine=232, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:230) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=127, sourceFile=RealLog.java,  }
 
94|Begin 
95|Begin 
96|If 
97|+ 
98|Constant(45, i32) - node represents a constant 
99|SignExtend 
100|* 
101|+ 
102|OffsetAddress 
103|Narrow 
104|CInterfaceWrite 
105|FrameState@146 - 105|FrameState@146 { sourceLine=237, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:234) [bci: 141], stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=146, sourceFile=RealLog.java,  }
 
106|EndNode 
107|Merge 
108|EndNode 
109|ValuePhi(83 97, i32) 
110|FrameState@146 - 110|FrameState@146 { sourceLine=237, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=146, sourceFile=RealLog.java,  }
 
111|- 
112|== 
113|Begin 
114|Begin 
115|If 
116|- 
117|MethodCallTarget 
118|Invoke#RealLog.spaces 
119|FrameState@172 - 119|FrameState@172 { sourceLine=241, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:241) [bci: 169], stackSize=1, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=172, sourceFile=RealLog.java,  }
 
120|EndNode 
121|Merge 
122|EndNode 
123|FrameState@173 - 123|FrameState@173 { sourceLine=244, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=173, sourceFile=RealLog.java,  }
 
124|SignExtend 
125|* 
126|+ 
127|+ 
128|ZeroExtend 
129|MethodCallTarget 
130|Invoke#RealLog.rawBytes 
131|FrameState@191 - 131|FrameState@191 { sourceLine=244, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:244) [bci: 188], stackSize=1, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=191, sourceFile=RealLog.java,  }
 
132|== 
133|Begin 
134|Begin 
135|If 
136|MethodCallTarget 
137|Invoke#RealLog.spaces 
138|FrameState@211 - 138|FrameState@211 { sourceLine=248, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:248) [bci: 208], stackSize=1, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=211, sourceFile=RealLog.java,  }
 
139|EndNode 
140|Merge 
141|EndNode 
142|FrameState@212 - 142|FrameState@212 { sourceLine=251, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=212, sourceFile=RealLog.java,  }
 
143|Return 
144|FrameState@11 - 144|FrameState@11 { sourceLine=204, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=11, sourceFile=RealLog.java,  }
 
145|Return 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 321
Callee: unsigned (class: com.oracle.svm.core.log.RealLog), par: long, int, int, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=292, code=ResolvedJavaMethodBytecode<RealLog.unsigned(long, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(10, i32) - node represents a constant 
7|Constant(0, i32) - node represents a constant 
8|MethodCallTarget 
9|Invoke#RealLog.number 
10|FrameState@11 - 10|FrameState@11 { sourceLine=292, code=ResolvedJavaMethodBytecode<RealLog.unsigned(long, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.unsigned(RealLog.java:292) [bci: 8], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=11, sourceFile=RealLog.java,  }
 
11|Return 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 396
Callee: isEmpty (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=670, code=ResolvedJavaMethodBytecode<String.isEmpty()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=670, code=ResolvedJavaMethodBytecode<String.isEmpty()>, nodeSourcePosition=at java.lang.String.isEmpty(String.java:670) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|Constant(0, i32) - node represents a constant 
15|== 
16|Constant(1, i32) - node represents a constant 
17|Conditional 
19|Return 
20|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 404
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 446
Callee: newline (class: com.oracle.svm.core.log.RealLog), par: , node count: 25
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=178, code=ResolvedJavaMethodBytecode<RealLog.newline()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
3|Constant([B, a -) - node represents a constant 
4|MethodCallTarget 
5|Invoke#Log.string 
6|FrameState@7 - 6|FrameState@7 { sourceLine=178, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:178) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
7|LoadField#autoflush - node represents a read of a static or instance field. 
8|Constant(0, i32) - node represents a constant 
9|== 
10|Begin 
11|Begin 
12|If 
13|MethodCallTarget 
14|Invoke#RealLog.flush 
15|FrameState@19 - 15|FrameState@19 { sourceLine=180, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:180) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=19, sourceFile=RealLog.java,  }
 
16|EndNode 
17|Merge 
18|EndNode 
19|FrameState@20 - 19|FrameState@20 { sourceLine=182, code=ResolvedJavaMethodBytecode<RealLog.newline()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=20, sourceFile=RealLog.java,  }
 
20|LoadField#indent - node represents a read of a static or instance field. 
21|MethodCallTarget 
22|Invoke#RealLog.spaces 
23|FrameState@28 - 23|FrameState@28 { sourceLine=182, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:182) [bci: 25], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=28, sourceFile=RealLog.java,  }
 
24|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 451
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: number (class: com.oracle.svm.core.log.RealLog), par: long, int, boolean, int, int, node count: 68
Callee: digit (class: com.oracle.svm.core.log.RealLog), par: long, node count: 23
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=397, code=ResolvedJavaMethodBytecode<RealLog.digit(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
3|Constant(10, i64) - node represents a constant 
4|IntegerNormalizeCompare 
5|Constant(0, i32) - node represents a constant 
6|< 
7|Begin 
8|Begin 
9|If 
10|Constant(48, i32) - node represents a constant 
12|Constant(87, i32) - node represents a constant 
13|EndNode 
14|Merge 
15|EndNode 
16|ValuePhi(10 12, i32) 
17|FrameState@16 - 17|FrameState@16 { sourceLine=397, code=ResolvedJavaMethodBytecode<RealLog.digit(long)>, stackSize=3, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=16, sourceFile=RealLog.java,  }
 
18|ZeroExtend 
19|+ 
20|Narrow 
21|Narrow 
22|SignExtend 
23|Return 

build structured graph: Caller: number (class: com.oracle.svm.core.log.RealLog), par: long, int, boolean, int, int, node count: 82
Callee: digit (class: com.oracle.svm.core.log.RealLog), par: long, node count: 23
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=397, code=ResolvedJavaMethodBytecode<RealLog.digit(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
3|Constant(10, i64) - node represents a constant 
4|IntegerNormalizeCompare 
5|Constant(0, i32) - node represents a constant 
6|< 
7|Begin 
8|Begin 
9|If 
10|Constant(48, i32) - node represents a constant 
12|Constant(87, i32) - node represents a constant 
13|EndNode 
14|Merge 
15|EndNode 
16|ValuePhi(10 12, i32) 
17|FrameState@16 - 17|FrameState@16 { sourceLine=397, code=ResolvedJavaMethodBytecode<RealLog.digit(long)>, stackSize=3, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=16, sourceFile=RealLog.java,  }
 
18|ZeroExtend 
19|+ 
20|Narrow 
21|Narrow 
22|SignExtend 
23|Return 

build structured graph: Caller: unsigned (class: com.oracle.svm.core.log.RealLog), par: long, int, int, node count: 8
Callee: number (class: com.oracle.svm.core.log.RealLog), par: long, int, boolean, int, int, node count: 143
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|Parameter(4) - node represents a placeholder for an incoming argument to a function call. 
6|Parameter(5) - node represents a placeholder for an incoming argument to a function call. 
7|FrameState@0 - 7|FrameState@0 { sourceLine=202, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
8|Constant(2, i32) - node represents a constant 
9|< 
10|Begin 
11|Begin 
12|If 
13|Constant(36, i32) - node represents a constant 
14|Constant(37, i32) - node represents a constant 
15|< 
16|EndNode 
17|Merge 
18|EndNode 
19|Begin 
20|Begin 
21|If 
22|Constant(65, i32) - node represents a constant 
23|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
24|StackValue 
25|Constant(0, i32) - node represents a constant 
26|== 
27|Begin 
28|Begin 
29|If 
30|Constant(0, i64) - node represents a constant 
31|IntegerNormalizeCompare 
32|< 
33|Constant(1, i32) - node represents a constant 
34|Conditional 
36|EndNode 
37|Merge 
38|EndNode 
39|ValuePhi(34 25, i32) 
40|FrameState@49 - 40|FrameState@49 { sourceLine=212, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=49, sourceFile=RealLog.java,  }
 
41|== 
42|Begin 
43|Begin 
44|If 
45|Negate 
47|EndNode 
48|Merge 
49|EndNode 
50|ValuePhi(45 2, i64) 
51|FrameState@66 - 51|FrameState@66 { sourceLine=224, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=66, sourceFile=RealLog.java,  }
 
52|EndNode 
53|LoopBegin 
54|ValuePhi(22 68, i32) 
55|ValuePhi(50 81, i64) 
56|FrameState@66 - 56|FrameState@66 { sourceLine=224, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=66, sourceFile=RealLog.java,  }
 
57|SignExtend 
58||<| 
59|Conditional 
60|Begin 
62|LoopExit 
63|ValueProxy 
64|ValueProxy 
65|FrameState@110 - 65|FrameState@110 { sourceLine=229, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:229) [bci: 110], stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=110, sourceFile=RealLog.java,  }
 
66|If 
67|Constant(-1, i32) - node represents a constant 
68|+ 
69||%| 
70|MethodCallTarget 
71|Invoke#RealLog.digit 
72|FrameState@93 - 72|FrameState@93 { sourceLine=226, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:226) [bci: 90], stackSize=3, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=93, sourceFile=RealLog.java,  }
 
73|SignExtend 
74|Constant(1, i64) - node represents a constant 
75|* 
76|+ 
77|OffsetAddress 
78|Narrow 
79|CInterfaceWrite 
80|FrameState@98 - 80|FrameState@98 { sourceLine=227, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:226) [bci: 93], stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=98, sourceFile=RealLog.java,  }
 
81||/| 
82|LoopEnd 
83|+ 
84|MethodCallTarget 
85|Invoke#RealLog.digit 
86|FrameState@122 - 86|FrameState@122 { sourceLine=230, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:230) [bci: 119], stackSize=3, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
87|SignExtend 
88|* 
89|+ 
90|OffsetAddress 
91|Narrow 
92|CInterfaceWrite 
93|FrameState@127 - 93|FrameState@127 { sourceLine=232, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:230) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=127, sourceFile=RealLog.java,  }
 
94|Begin 
95|Begin 
96|If 
97|+ 
98|Constant(45, i32) - node represents a constant 
99|SignExtend 
100|* 
101|+ 
102|OffsetAddress 
103|Narrow 
104|CInterfaceWrite 
105|FrameState@146 - 105|FrameState@146 { sourceLine=237, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:234) [bci: 141], stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=146, sourceFile=RealLog.java,  }
 
106|EndNode 
107|Merge 
108|EndNode 
109|ValuePhi(83 97, i32) 
110|FrameState@146 - 110|FrameState@146 { sourceLine=237, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=146, sourceFile=RealLog.java,  }
 
111|- 
112|== 
113|Begin 
114|Begin 
115|If 
116|- 
117|MethodCallTarget 
118|Invoke#RealLog.spaces 
119|FrameState@172 - 119|FrameState@172 { sourceLine=241, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:241) [bci: 169], stackSize=1, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=172, sourceFile=RealLog.java,  }
 
120|EndNode 
121|Merge 
122|EndNode 
123|FrameState@173 - 123|FrameState@173 { sourceLine=244, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=173, sourceFile=RealLog.java,  }
 
124|SignExtend 
125|* 
126|+ 
127|+ 
128|ZeroExtend 
129|MethodCallTarget 
130|Invoke#RealLog.rawBytes 
131|FrameState@191 - 131|FrameState@191 { sourceLine=244, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:244) [bci: 188], stackSize=1, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=191, sourceFile=RealLog.java,  }
 
132|== 
133|Begin 
134|Begin 
135|If 
136|MethodCallTarget 
137|Invoke#RealLog.spaces 
138|FrameState@211 - 138|FrameState@211 { sourceLine=248, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:248) [bci: 208], stackSize=1, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=211, sourceFile=RealLog.java,  }
 
139|EndNode 
140|Merge 
141|EndNode 
142|FrameState@212 - 142|FrameState@212 { sourceLine=251, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=212, sourceFile=RealLog.java,  }
 
143|Return 
144|FrameState@11 - 144|FrameState@11 { sourceLine=204, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=11, sourceFile=RealLog.java,  }
 
145|Return 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 479
Callee: unsigned (class: com.oracle.svm.core.log.RealLog), par: long, int, int, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=292, code=ResolvedJavaMethodBytecode<RealLog.unsigned(long, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(10, i32) - node represents a constant 
7|Constant(0, i32) - node represents a constant 
8|MethodCallTarget 
9|Invoke#RealLog.number 
10|FrameState@11 - 10|FrameState@11 { sourceLine=292, code=ResolvedJavaMethodBytecode<RealLog.unsigned(long, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.unsigned(RealLog.java:292) [bci: 8], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=11, sourceFile=RealLog.java,  }
 
11|Return 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter), par: , node count: 48
Callee: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 467
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=116, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=Counter.java,  }
 
3|Constant(0, i64) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#counters - node represents a read of a static or instance field. 
6|IsNull 
7|BytecodeException#NULL_POINTER 
8|Begin 
9|Begin 
10|If 
11|FrameState@12 - 11|FrameState@12 { sourceLine=118, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:118) [bci: 12], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=12, sourceFile=Counter.java,  }
 
14|Pi 
15|ArrayLength 
17|EndNode 
18|LoopBegin 
19|ValuePhi(3 84, i64) 
20|ValuePhi(4 121, i32) 
21|ValuePhi(4 124, i32) 
22|FrameState@18 - 22|FrameState@18 { sourceLine=118, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=18, sourceFile=Counter.java,  }
 
23|< 
25|LoopExit 
26|ValueProxy 
27|ValueProxy 
28|ValueProxy 
29|FrameState@59 - 29|FrameState@59 { sourceLine=123, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:123) [bci: 59], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=59, sourceFile=Counter.java,  }
 
30|Begin 
31|If 
32|BytecodeException#NULL_POINTER 
33|Begin 
34|Begin 
35|If 
36|FrameState@29 - 36|FrameState@29 { sourceLine=118, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:118) [bci: 29], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=29, sourceFile=Counter.java,  }
 
38|EndNode 
39|Merge 
40|EndNode 
41|LoopExit 
42|ValueProxy 
43|ValueProxy 
44|ValueProxy 
45|ValueProxy 
46|FrameState@-4[AFTER_EXCEPTION_BCI] - 46|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
47|ValuePhi(7 45 62 78 97 114 133 146 158 171 201 215 229 254 278 296 316 340 360 378 395 421 438 458 470 485, a -) 
48|Pi 
49|ArrayLength 
50||<| 
51|BytecodeException#OUT_OF_BOUNDS 
52|Begin 
53|Begin 
54|If 
55|FrameState@29 - 55|FrameState@29 { sourceLine=118, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:118) [bci: 29], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=29, sourceFile=Counter.java,  }
 
57|EndNode 
58|LoopExit 
59|ValueProxy 
60|ValueProxy 
61|ValueProxy 
62|ValueProxy 
63|FrameState@-4[AFTER_EXCEPTION_BCI] - 63|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
64|LoadIndexed 
65|IsNull 
66|BytecodeException#NULL_POINTER 
67|Begin 
68|Begin 
69|If 
70|FrameState@35 - 70|FrameState@35 { sourceLine=119, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:119) [bci: 35], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=35, sourceFile=Counter.java,  }
 
72|EndNode 
73|LoopExit 
74|ValueProxy 
75|ValueProxy 
76|ValueProxy 
77|ValueProxy 
78|ValueProxy 
79|FrameState@-4[AFTER_EXCEPTION_BCI] - 79|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
80|Pi 
81|MethodCallTarget 
82|Invoke#Counter.getValue 
83|FrameState@38 - 83|FrameState@38 { sourceLine=119, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:119) [bci: 35], stackSize=4, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=38, sourceFile=Counter.java,  }
 
84|+ 
85|BytecodeException#NULL_POINTER 
86|Begin 
87|Begin 
88|If 
89|FrameState@42 - 89|FrameState@42 { sourceLine=120, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:120) [bci: 42], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=42, sourceFile=Counter.java,  }
 
91|EndNode 
92|LoopExit 
93|ValueProxy 
94|ValueProxy 
95|ValueProxy 
96|ValueProxy 
97|ValueProxy 
98|FrameState@-4[AFTER_EXCEPTION_BCI] - 98|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
99|Pi 
100|LoadField#name - node represents a read of a static or instance field. 
101|IsNull 
102|BytecodeException#NULL_POINTER 
103|Begin 
104|Begin 
105|If 
106|FrameState@45 - 106|FrameState@45 { sourceLine=120, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:120) [bci: 45], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=45, sourceFile=Counter.java,  }
 
108|EndNode 
109|LoopExit 
110|ValueProxy 
111|ValueProxy 
112|ValueProxy 
113|ValueProxy 
114|ValueProxy 
115|FrameState@-4[AFTER_EXCEPTION_BCI] - 115|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
116|Pi 
117|MethodCallTarget 
118|Invoke#String.length 
119|FrameState@48 - 119|FrameState@48 { sourceLine=120, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:120) [bci: 45], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=48, sourceFile=Counter.java,  }
 
120|MethodCallTarget 
121|Invoke#Math.max 
122|FrameState@52 - 122|FrameState@52 { sourceLine=120, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:120) [bci: 49], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=52, sourceFile=Counter.java,  }
 
123|Constant(1, i32) - node represents a constant 
124|+ 
125|LoopEnd 
126|Constant(com.oracle.svm.core.log.RealLog, a -) - node represents a constant 
127|Constant(=== , a -) - node represents a constant 
128|MethodCallTarget 
129|Invoke#RealLog.string 
130|FrameState@67 - 130|FrameState@67 { sourceLine=123, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:123) [bci: 64], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=67, sourceFile=Counter.java,  }
 
131|LoadField#name - node represents a read of a static or instance field. 
132|IsNull 
133|BytecodeException#NULL_POINTER 
134|Begin 
135|Begin 
136|If 
137|FrameState@71 - 137|FrameState@71 { sourceLine=123, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:123) [bci: 71], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=71, sourceFile=Counter.java,  }
 
139|EndNode 
140|Pi 
141|MethodCallTarget 
142|Invoke#Log.string 
143|FrameState@74 - 143|FrameState@74 { sourceLine=123, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:123) [bci: 71], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=74, sourceFile=Counter.java,  }
 
144|Constant( ===, a -) - node represents a constant 
145|IsNull 
146|BytecodeException#NULL_POINTER 
147|Begin 
148|Begin 
149|If 
150|FrameState@76 - 150|FrameState@76 { sourceLine=123, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:123) [bci: 76], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=76, sourceFile=Counter.java,  }
 
152|EndNode 
153|Pi 
154|MethodCallTarget 
155|Invoke#Log.string 
156|FrameState@79 - 156|FrameState@79 { sourceLine=123, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:123) [bci: 76], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=79, sourceFile=Counter.java,  }
 
157|IsNull 
158|BytecodeException#NULL_POINTER 
159|Begin 
160|Begin 
161|If 
162|FrameState@79 - 162|FrameState@79 { sourceLine=123, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:123) [bci: 79], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=79, sourceFile=Counter.java,  }
 
164|EndNode 
165|Pi 
166|MethodCallTarget 
167|Invoke#Log.newline 
168|FrameState@82 - 168|FrameState@82 { sourceLine=123, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:123) [bci: 79], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=82, sourceFile=Counter.java,  }
 
169|LoadField#counters - node represents a read of a static or instance field. 
170|IsNull 
171|BytecodeException#NULL_POINTER 
172|Begin 
173|Begin 
174|If 
175|FrameState@91 - 175|FrameState@91 { sourceLine=124, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:124) [bci: 91], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=91, sourceFile=Counter.java,  }
 
177|EndNode 
178|Pi 
179|ArrayLength 
181|EndNode 
182|LoopBegin 
183|ValuePhi(4 451, i32) 
184|FrameState@97 - 184|FrameState@97 { sourceLine=124, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=97, sourceFile=Counter.java,  }
 
185|< 
187|LoopExit 
188|ValueProxy 
189|FrameState@227 - 189|FrameState@227 { sourceLine=134, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:134) [bci: 227], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=227, sourceFile=Counter.java,  }
 
190|Begin 
191|If 
192|BytecodeException#NULL_POINTER 
193|Begin 
194|Begin 
195|If 
196|FrameState@108 - 196|FrameState@108 { sourceLine=124, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:124) [bci: 108], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=108, sourceFile=Counter.java,  }
 
198|EndNode 
199|LoopExit 
200|ValueProxy 
201|ValueProxy 
202|FrameState@-4[AFTER_EXCEPTION_BCI] - 202|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
203|Pi 
204|ArrayLength 
205||<| 
206|BytecodeException#OUT_OF_BOUNDS 
207|Begin 
208|Begin 
209|If 
210|FrameState@108 - 210|FrameState@108 { sourceLine=124, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:124) [bci: 108], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=108, sourceFile=Counter.java,  }
 
212|EndNode 
213|LoopExit 
214|ValueProxy 
215|ValueProxy 
216|FrameState@-4[AFTER_EXCEPTION_BCI] - 216|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
217|LoadIndexed 
218|IsNull 
219|BytecodeException#NULL_POINTER 
220|Begin 
221|Begin 
222|If 
223|FrameState@113 - 223|FrameState@113 { sourceLine=125, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:125) [bci: 113], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=113, sourceFile=Counter.java,  }
 
225|EndNode 
226|LoopExit 
227|ValueProxy 
228|ValueProxy 
229|ValueProxy 
230|FrameState@-4[AFTER_EXCEPTION_BCI] - 230|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
231|Pi 
232|MethodCallTarget 
233|Invoke#Counter.getValue 
234|FrameState@116 - 234|FrameState@116 { sourceLine=125, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:125) [bci: 113], stackSize=2, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=Counter.java,  }
 
235|IntegerNormalizeCompare 
236|== 
237|Begin 
238|Begin 
239|If 
241|Constant(100, i64) - node represents a constant 
242|* 
243|BytecodeException#DIVISION_BY_ZERO 
244|Begin 
245|Begin 
246|If 
247|FrameState@135 - 247|FrameState@135 { sourceLine=126, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:126) [bci: 135], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=135, sourceFile=Counter.java,  }
 
249|EndNode 
250|LoopExit 
251|ValueProxy 
252|ValueProxy 
253|ValueProxy 
254|ValueProxy 
255|FrameState@-4[AFTER_EXCEPTION_BCI] - 255|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
256|/ 
257|EndNode 
258|Merge 
259|EndNode 
260|ValuePhi(3 256, i64) 
261|FrameState@136 - 261|FrameState@136 { sourceLine=126, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, stackSize=2, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=136, sourceFile=Counter.java,  }
 
262|Constant(  , a -) - node represents a constant 
263|MethodCallTarget 
264|Invoke#RealLog.string 
265|FrameState@146 - 265|FrameState@146 { sourceLine=127, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:127) [bci: 143], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=146, sourceFile=Counter.java,  }
 
266|BytecodeException#NULL_POINTER 
267|Begin 
268|Begin 
269|If 
270|FrameState@148 - 270|FrameState@148 { sourceLine=127, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:127) [bci: 148], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=148, sourceFile=Counter.java,  }
 
272|EndNode 
273|LoopExit 
274|ValueProxy 
275|ValueProxy 
276|ValueProxy 
277|ValueProxy 
278|ValueProxy 
279|FrameState@-4[AFTER_EXCEPTION_BCI] - 279|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
280|Pi 
281|LoadField#name - node represents a read of a static or instance field. 
282|Constant(2, i32) - node represents a constant 
283|IsNull 
284|BytecodeException#NULL_POINTER 
285|Begin 
286|Begin 
287|If 
288|FrameState@153 - 288|FrameState@153 { sourceLine=127, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:127) [bci: 153], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=153, sourceFile=Counter.java,  }
 
290|EndNode 
291|LoopExit 
292|ValueProxy 
293|ValueProxy 
294|ValueProxy 
295|ValueProxy 
296|ValueProxy 
297|FrameState@-4[AFTER_EXCEPTION_BCI] - 297|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
298|Pi 
299|MethodCallTarget 
300|Invoke#Log.string 
301|FrameState@156 - 301|FrameState@156 { sourceLine=127, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:127) [bci: 153], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=156, sourceFile=Counter.java,  }
 
302|Constant(:, a -) - node represents a constant 
303|IsNull 
304|BytecodeException#NULL_POINTER 
305|Begin 
306|Begin 
307|If 
308|FrameState@158 - 308|FrameState@158 { sourceLine=127, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:127) [bci: 158], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=158, sourceFile=Counter.java,  }
 
310|EndNode 
311|LoopExit 
312|ValueProxy 
313|ValueProxy 
314|ValueProxy 
315|ValueProxy 
316|ValueProxy 
317|FrameState@-4[AFTER_EXCEPTION_BCI] - 317|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
318|Pi 
319|MethodCallTarget 
320|Invoke#Log.string 
321|FrameState@161 - 321|FrameState@161 { sourceLine=127, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:127) [bci: 158], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=161, sourceFile=Counter.java,  }
 
322|Constant(10, i32) - node represents a constant 
323|MethodCallTarget 
324|Invoke#RealLog.unsigned 
325|FrameState@173 - 325|FrameState@173 { sourceLine=128, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:128) [bci: 170], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=173, sourceFile=Counter.java,  }
 
326|Constant(5, i32) - node represents a constant 
327|IsNull 
328|BytecodeException#NULL_POINTER 
329|Begin 
330|Begin 
331|If 
332|FrameState@177 - 332|FrameState@177 { sourceLine=128, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:128) [bci: 177], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=177, sourceFile=Counter.java,  }
 
334|EndNode 
335|LoopExit 
336|ValueProxy 
337|ValueProxy 
338|ValueProxy 
339|ValueProxy 
340|ValueProxy 
341|FrameState@-4[AFTER_EXCEPTION_BCI] - 341|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
342|Pi 
343|MethodCallTarget 
344|Invoke#Log.unsigned 
345|FrameState@180 - 345|FrameState@180 { sourceLine=128, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:128) [bci: 177], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=180, sourceFile=Counter.java,  }
 
346|Constant(%, a -) - node represents a constant 
347|IsNull 
348|BytecodeException#NULL_POINTER 
349|Begin 
350|Begin 
351|If 
352|FrameState@182 - 352|FrameState@182 { sourceLine=128, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:128) [bci: 182], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=182, sourceFile=Counter.java,  }
 
354|EndNode 
355|LoopExit 
356|ValueProxy 
357|ValueProxy 
358|ValueProxy 
359|ValueProxy 
360|ValueProxy 
361|FrameState@-4[AFTER_EXCEPTION_BCI] - 361|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
362|Pi 
363|MethodCallTarget 
364|Invoke#Log.string 
365|FrameState@185 - 365|FrameState@185 { sourceLine=128, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:128) [bci: 182], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=185, sourceFile=Counter.java,  }
 
366|BytecodeException#NULL_POINTER 
367|Begin 
368|Begin 
369|If 
370|FrameState@188 - 370|FrameState@188 { sourceLine=129, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:129) [bci: 188], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=188, sourceFile=Counter.java,  }
 
372|EndNode 
373|LoopExit 
374|ValueProxy 
375|ValueProxy 
376|ValueProxy 
377|ValueProxy 
378|ValueProxy 
379|FrameState@-4[AFTER_EXCEPTION_BCI] - 379|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
380|Pi 
381|LoadField#description - node represents a read of a static or instance field. 
382|IsNull 
383|BytecodeException#NULL_POINTER 
384|Begin 
385|Begin 
386|If 
387|FrameState@191 - 387|FrameState@191 { sourceLine=129, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:129) [bci: 191], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=191, sourceFile=Counter.java,  }
 
389|EndNode 
390|LoopExit 
391|ValueProxy 
392|ValueProxy 
393|ValueProxy 
394|ValueProxy 
395|ValueProxy 
396|FrameState@-4[AFTER_EXCEPTION_BCI] - 396|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
397|Pi 
398|MethodCallTarget 
399|Invoke#String.isEmpty 
400|FrameState@194 - 400|FrameState@194 { sourceLine=129, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:129) [bci: 191], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=194, sourceFile=Counter.java,  }
 
401|== 
402|Begin 
403|Begin 
404|If 
405|Constant(  // , a -) - node represents a constant 
406|MethodCallTarget 
407|Invoke#RealLog.string 
408|FrameState@205 - 408|FrameState@205 { sourceLine=130, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:130) [bci: 202], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=205, sourceFile=Counter.java,  }
 
409|BytecodeException#NULL_POINTER 
410|Begin 
411|Begin 
412|If 
413|FrameState@207 - 413|FrameState@207 { sourceLine=130, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:130) [bci: 207], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=207, sourceFile=Counter.java,  }
 
415|EndNode 
416|LoopExit 
417|ValueProxy 
418|ValueProxy 
419|ValueProxy 
420|ValueProxy 
421|ValueProxy 
422|FrameState@-4[AFTER_EXCEPTION_BCI] - 422|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
423|Pi 
424|LoadField#description - node represents a read of a static or instance field. 
425|IsNull 
426|BytecodeException#NULL_POINTER 
427|Begin 
428|Begin 
429|If 
430|FrameState@210 - 430|FrameState@210 { sourceLine=130, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:130) [bci: 210], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=210, sourceFile=Counter.java,  }
 
432|EndNode 
433|LoopExit 
434|ValueProxy 
435|ValueProxy 
436|ValueProxy 
437|ValueProxy 
438|ValueProxy 
439|FrameState@-4[AFTER_EXCEPTION_BCI] - 439|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
440|Pi 
441|MethodCallTarget 
442|Invoke#Log.string 
443|FrameState@213 - 443|FrameState@213 { sourceLine=130, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:130) [bci: 210], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=213, sourceFile=Counter.java,  }
 
444|EndNode 
445|Merge 
446|EndNode 
447|FrameState@214 - 447|FrameState@214 { sourceLine=132, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=214, sourceFile=Counter.java,  }
 
448|MethodCallTarget 
449|Invoke#RealLog.newline 
450|FrameState@220 - 450|FrameState@220 { sourceLine=132, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:132) [bci: 217], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=220, sourceFile=Counter.java,  }
 
451|+ 
452|LoopEnd 
453|MethodCallTarget 
454|Invoke#RealLog.string 
455|FrameState@235 - 455|FrameState@235 { sourceLine=134, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:134) [bci: 232], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=235, sourceFile=Counter.java,  }
 
456|Constant(TOTAL, a -) - node represents a constant 
457|IsNull 
458|BytecodeException#NULL_POINTER 
459|Begin 
460|Begin 
461|If 
462|FrameState@239 - 462|FrameState@239 { sourceLine=134, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:134) [bci: 239], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=239, sourceFile=Counter.java,  }
 
464|EndNode 
465|Pi 
466|MethodCallTarget 
467|Invoke#Log.string 
468|FrameState@242 - 468|FrameState@242 { sourceLine=134, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:134) [bci: 239], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=242, sourceFile=Counter.java,  }
 
469|IsNull 
470|BytecodeException#NULL_POINTER 
471|Begin 
472|Begin 
473|If 
474|FrameState@244 - 474|FrameState@244 { sourceLine=134, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:134) [bci: 244], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=244, sourceFile=Counter.java,  }
 
476|EndNode 
477|Pi 
478|MethodCallTarget 
479|Invoke#Log.string 
480|FrameState@247 - 480|FrameState@247 { sourceLine=134, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:134) [bci: 244], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=247, sourceFile=Counter.java,  }
 
481|MethodCallTarget 
482|Invoke#RealLog.unsigned 
483|FrameState@258 - 483|FrameState@258 { sourceLine=135, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:135) [bci: 255], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=258, sourceFile=Counter.java,  }
 
484|IsNull 
485|BytecodeException#NULL_POINTER 
486|Begin 
487|Begin 
488|If 
489|FrameState@258 - 489|FrameState@258 { sourceLine=135, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:135) [bci: 258], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=258, sourceFile=Counter.java,  }
 
491|EndNode 
492|Pi 
493|MethodCallTarget 
494|Invoke#Log.newline 
495|FrameState@261 - 495|FrameState@261 { sourceLine=135, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:135) [bci: 258], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=261, sourceFile=Counter.java,  }
 
496|Return 
497|FrameState@-4[AFTER_EXCEPTION_BCI] - 497|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
498|Unwind 

build structured graph: Caller: dumpCounters (class: com.oracle.svm.core.SubstrateUtil), par: Log, node count: 42
Callee: logValues (class: com.oracle.svm.core.util.Counter), par: , node count: 53
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=216, code=ResolvedJavaMethodBytecode<Counter.logValues()>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=Counter.java,  }
 
2|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
3|Constant(com.oracle.svm.core.util.CounterSupport, a -) - node represents a constant 
4|LogicConstant 
5|Constant([Lcom.oracle.svm.core.util.Counter$Group;, a -) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
8|EndNode 
9|LoopBegin 
10|ValuePhi(6 53, i32) 
11|FrameState@17 - 11|FrameState@17 { sourceLine=216, code=ResolvedJavaMethodBytecode<Counter.logValues()>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=17, sourceFile=Counter.java,  }
 
12|< 
14|LoopExit 
15|ValueProxy 
16|FrameState@36 - 16|FrameState@36 { sourceLine=219, code=ResolvedJavaMethodBytecode<Counter.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter.logValues(Counter.java:219) [bci: 36], stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=36, sourceFile=Counter.java,  }
 
17|Begin 
18|If 
19|LogicConstant 
20|BytecodeException#OUT_OF_BOUNDS 
21|Begin 
22|Begin 
23|If 
24|FrameState@24 - 24|FrameState@24 { sourceLine=216, code=ResolvedJavaMethodBytecode<Counter.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter.logValues(Counter.java:216) [bci: 24], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=24, sourceFile=Counter.java,  }
 
27|LoopExit 
28|ValueProxy 
29|ValueProxy 
30|FrameState@-4[AFTER_EXCEPTION_BCI] - 30|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
31|LoadIndexed 
32|IsNull 
33|BytecodeException#NULL_POINTER 
34|Begin 
35|Begin 
36|If 
37|FrameState@27 - 37|FrameState@27 { sourceLine=217, code=ResolvedJavaMethodBytecode<Counter.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter.logValues(Counter.java:217) [bci: 27], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=27, sourceFile=Counter.java,  }
 
39|EndNode 
40|Merge 
41|EndNode 
42|LoopExit 
43|ValueProxy 
44|ValueProxy 
45|ValueProxy 
46|FrameState@-4[AFTER_EXCEPTION_BCI] - 46|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
47|ValuePhi(29 45, a -) 
48|Pi 
49|MethodCallTarget 
50|Invoke#Counter$Group.logValues 
51|FrameState@30 - 51|FrameState@30 { sourceLine=216, code=ResolvedJavaMethodBytecode<Counter.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter.logValues(Counter.java:217) [bci: 27], stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=30, sourceFile=Counter.java,  }
 
52|Constant(1, i32) - node represents a constant 
53|+ 
54|LoopEnd 
55|Return 
56|FrameState@-4[AFTER_EXCEPTION_BCI] - 56|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter.logValues()>, stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
57|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 116
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 119
Callee: max (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1428, code=ResolvedJavaMethodBytecode<Math.max(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1428, code=ResolvedJavaMethodBytecode<Math.max(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 127
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 261
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: number (class: com.oracle.svm.core.log.RealLog), par: long, int, boolean, int, int, node count: 68
Callee: digit (class: com.oracle.svm.core.log.RealLog), par: long, node count: 23
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=397, code=ResolvedJavaMethodBytecode<RealLog.digit(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
3|Constant(10, i64) - node represents a constant 
4|IntegerNormalizeCompare 
5|Constant(0, i32) - node represents a constant 
6|< 
7|Begin 
8|Begin 
9|If 
10|Constant(48, i32) - node represents a constant 
12|Constant(87, i32) - node represents a constant 
13|EndNode 
14|Merge 
15|EndNode 
16|ValuePhi(10 12, i32) 
17|FrameState@16 - 17|FrameState@16 { sourceLine=397, code=ResolvedJavaMethodBytecode<RealLog.digit(long)>, stackSize=3, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=16, sourceFile=RealLog.java,  }
 
18|ZeroExtend 
19|+ 
20|Narrow 
21|Narrow 
22|SignExtend 
23|Return 

build structured graph: Caller: number (class: com.oracle.svm.core.log.RealLog), par: long, int, boolean, int, int, node count: 82
Callee: digit (class: com.oracle.svm.core.log.RealLog), par: long, node count: 23
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=397, code=ResolvedJavaMethodBytecode<RealLog.digit(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
3|Constant(10, i64) - node represents a constant 
4|IntegerNormalizeCompare 
5|Constant(0, i32) - node represents a constant 
6|< 
7|Begin 
8|Begin 
9|If 
10|Constant(48, i32) - node represents a constant 
12|Constant(87, i32) - node represents a constant 
13|EndNode 
14|Merge 
15|EndNode 
16|ValuePhi(10 12, i32) 
17|FrameState@16 - 17|FrameState@16 { sourceLine=397, code=ResolvedJavaMethodBytecode<RealLog.digit(long)>, stackSize=3, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=16, sourceFile=RealLog.java,  }
 
18|ZeroExtend 
19|+ 
20|Narrow 
21|Narrow 
22|SignExtend 
23|Return 

build structured graph: Caller: unsigned (class: com.oracle.svm.core.log.RealLog), par: long, int, int, node count: 8
Callee: number (class: com.oracle.svm.core.log.RealLog), par: long, int, boolean, int, int, node count: 143
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|Parameter(4) - node represents a placeholder for an incoming argument to a function call. 
6|Parameter(5) - node represents a placeholder for an incoming argument to a function call. 
7|FrameState@0 - 7|FrameState@0 { sourceLine=202, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
8|Constant(2, i32) - node represents a constant 
9|< 
10|Begin 
11|Begin 
12|If 
13|Constant(36, i32) - node represents a constant 
14|Constant(37, i32) - node represents a constant 
15|< 
16|EndNode 
17|Merge 
18|EndNode 
19|Begin 
20|Begin 
21|If 
22|Constant(65, i32) - node represents a constant 
23|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
24|StackValue 
25|Constant(0, i32) - node represents a constant 
26|== 
27|Begin 
28|Begin 
29|If 
30|Constant(0, i64) - node represents a constant 
31|IntegerNormalizeCompare 
32|< 
33|Constant(1, i32) - node represents a constant 
34|Conditional 
36|EndNode 
37|Merge 
38|EndNode 
39|ValuePhi(34 25, i32) 
40|FrameState@49 - 40|FrameState@49 { sourceLine=212, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=49, sourceFile=RealLog.java,  }
 
41|== 
42|Begin 
43|Begin 
44|If 
45|Negate 
47|EndNode 
48|Merge 
49|EndNode 
50|ValuePhi(45 2, i64) 
51|FrameState@66 - 51|FrameState@66 { sourceLine=224, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=66, sourceFile=RealLog.java,  }
 
52|EndNode 
53|LoopBegin 
54|ValuePhi(22 68, i32) 
55|ValuePhi(50 81, i64) 
56|FrameState@66 - 56|FrameState@66 { sourceLine=224, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=66, sourceFile=RealLog.java,  }
 
57|SignExtend 
58||<| 
59|Conditional 
60|Begin 
62|LoopExit 
63|ValueProxy 
64|ValueProxy 
65|FrameState@110 - 65|FrameState@110 { sourceLine=229, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:229) [bci: 110], stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=110, sourceFile=RealLog.java,  }
 
66|If 
67|Constant(-1, i32) - node represents a constant 
68|+ 
69||%| 
70|MethodCallTarget 
71|Invoke#RealLog.digit 
72|FrameState@93 - 72|FrameState@93 { sourceLine=226, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:226) [bci: 90], stackSize=3, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=93, sourceFile=RealLog.java,  }
 
73|SignExtend 
74|Constant(1, i64) - node represents a constant 
75|* 
76|+ 
77|OffsetAddress 
78|Narrow 
79|CInterfaceWrite 
80|FrameState@98 - 80|FrameState@98 { sourceLine=227, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:226) [bci: 93], stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=98, sourceFile=RealLog.java,  }
 
81||/| 
82|LoopEnd 
83|+ 
84|MethodCallTarget 
85|Invoke#RealLog.digit 
86|FrameState@122 - 86|FrameState@122 { sourceLine=230, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:230) [bci: 119], stackSize=3, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
87|SignExtend 
88|* 
89|+ 
90|OffsetAddress 
91|Narrow 
92|CInterfaceWrite 
93|FrameState@127 - 93|FrameState@127 { sourceLine=232, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:230) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=127, sourceFile=RealLog.java,  }
 
94|Begin 
95|Begin 
96|If 
97|+ 
98|Constant(45, i32) - node represents a constant 
99|SignExtend 
100|* 
101|+ 
102|OffsetAddress 
103|Narrow 
104|CInterfaceWrite 
105|FrameState@146 - 105|FrameState@146 { sourceLine=237, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:234) [bci: 141], stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=146, sourceFile=RealLog.java,  }
 
106|EndNode 
107|Merge 
108|EndNode 
109|ValuePhi(83 97, i32) 
110|FrameState@146 - 110|FrameState@146 { sourceLine=237, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=146, sourceFile=RealLog.java,  }
 
111|- 
112|== 
113|Begin 
114|Begin 
115|If 
116|- 
117|MethodCallTarget 
118|Invoke#RealLog.spaces 
119|FrameState@172 - 119|FrameState@172 { sourceLine=241, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:241) [bci: 169], stackSize=1, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=172, sourceFile=RealLog.java,  }
 
120|EndNode 
121|Merge 
122|EndNode 
123|FrameState@173 - 123|FrameState@173 { sourceLine=244, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=173, sourceFile=RealLog.java,  }
 
124|SignExtend 
125|* 
126|+ 
127|+ 
128|ZeroExtend 
129|MethodCallTarget 
130|Invoke#RealLog.rawBytes 
131|FrameState@191 - 131|FrameState@191 { sourceLine=244, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:244) [bci: 188], stackSize=1, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=191, sourceFile=RealLog.java,  }
 
132|== 
133|Begin 
134|Begin 
135|If 
136|MethodCallTarget 
137|Invoke#RealLog.spaces 
138|FrameState@211 - 138|FrameState@211 { sourceLine=248, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:248) [bci: 208], stackSize=1, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=211, sourceFile=RealLog.java,  }
 
139|EndNode 
140|Merge 
141|EndNode 
142|FrameState@212 - 142|FrameState@212 { sourceLine=251, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=212, sourceFile=RealLog.java,  }
 
143|Return 
144|FrameState@11 - 144|FrameState@11 { sourceLine=204, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=11, sourceFile=RealLog.java,  }
 
145|Return 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 321
Callee: unsigned (class: com.oracle.svm.core.log.RealLog), par: long, int, int, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=292, code=ResolvedJavaMethodBytecode<RealLog.unsigned(long, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(10, i32) - node represents a constant 
7|Constant(0, i32) - node represents a constant 
8|MethodCallTarget 
9|Invoke#RealLog.number 
10|FrameState@11 - 10|FrameState@11 { sourceLine=292, code=ResolvedJavaMethodBytecode<RealLog.unsigned(long, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.unsigned(RealLog.java:292) [bci: 8], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=11, sourceFile=RealLog.java,  }
 
11|Return 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 396
Callee: isEmpty (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=670, code=ResolvedJavaMethodBytecode<String.isEmpty()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=670, code=ResolvedJavaMethodBytecode<String.isEmpty()>, nodeSourcePosition=at java.lang.String.isEmpty(String.java:670) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|Constant(0, i32) - node represents a constant 
15|== 
16|Constant(1, i32) - node represents a constant 
17|Conditional 
19|Return 
20|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 404
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 446
Callee: newline (class: com.oracle.svm.core.log.RealLog), par: , node count: 25
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=178, code=ResolvedJavaMethodBytecode<RealLog.newline()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
3|Constant([B, a -) - node represents a constant 
4|MethodCallTarget 
5|Invoke#Log.string 
6|FrameState@7 - 6|FrameState@7 { sourceLine=178, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:178) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
7|LoadField#autoflush - node represents a read of a static or instance field. 
8|Constant(0, i32) - node represents a constant 
9|== 
10|Begin 
11|Begin 
12|If 
13|MethodCallTarget 
14|Invoke#RealLog.flush 
15|FrameState@19 - 15|FrameState@19 { sourceLine=180, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:180) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=19, sourceFile=RealLog.java,  }
 
16|EndNode 
17|Merge 
18|EndNode 
19|FrameState@20 - 19|FrameState@20 { sourceLine=182, code=ResolvedJavaMethodBytecode<RealLog.newline()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=20, sourceFile=RealLog.java,  }
 
20|LoadField#indent - node represents a read of a static or instance field. 
21|MethodCallTarget 
22|Invoke#RealLog.spaces 
23|FrameState@28 - 23|FrameState@28 { sourceLine=182, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:182) [bci: 25], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=28, sourceFile=RealLog.java,  }
 
24|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 451
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: number (class: com.oracle.svm.core.log.RealLog), par: long, int, boolean, int, int, node count: 68
Callee: digit (class: com.oracle.svm.core.log.RealLog), par: long, node count: 23
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=397, code=ResolvedJavaMethodBytecode<RealLog.digit(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
3|Constant(10, i64) - node represents a constant 
4|IntegerNormalizeCompare 
5|Constant(0, i32) - node represents a constant 
6|< 
7|Begin 
8|Begin 
9|If 
10|Constant(48, i32) - node represents a constant 
12|Constant(87, i32) - node represents a constant 
13|EndNode 
14|Merge 
15|EndNode 
16|ValuePhi(10 12, i32) 
17|FrameState@16 - 17|FrameState@16 { sourceLine=397, code=ResolvedJavaMethodBytecode<RealLog.digit(long)>, stackSize=3, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=16, sourceFile=RealLog.java,  }
 
18|ZeroExtend 
19|+ 
20|Narrow 
21|Narrow 
22|SignExtend 
23|Return 

build structured graph: Caller: number (class: com.oracle.svm.core.log.RealLog), par: long, int, boolean, int, int, node count: 82
Callee: digit (class: com.oracle.svm.core.log.RealLog), par: long, node count: 23
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=397, code=ResolvedJavaMethodBytecode<RealLog.digit(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
3|Constant(10, i64) - node represents a constant 
4|IntegerNormalizeCompare 
5|Constant(0, i32) - node represents a constant 
6|< 
7|Begin 
8|Begin 
9|If 
10|Constant(48, i32) - node represents a constant 
12|Constant(87, i32) - node represents a constant 
13|EndNode 
14|Merge 
15|EndNode 
16|ValuePhi(10 12, i32) 
17|FrameState@16 - 17|FrameState@16 { sourceLine=397, code=ResolvedJavaMethodBytecode<RealLog.digit(long)>, stackSize=3, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=16, sourceFile=RealLog.java,  }
 
18|ZeroExtend 
19|+ 
20|Narrow 
21|Narrow 
22|SignExtend 
23|Return 

build structured graph: Caller: unsigned (class: com.oracle.svm.core.log.RealLog), par: long, int, int, node count: 8
Callee: number (class: com.oracle.svm.core.log.RealLog), par: long, int, boolean, int, int, node count: 143
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|Parameter(4) - node represents a placeholder for an incoming argument to a function call. 
6|Parameter(5) - node represents a placeholder for an incoming argument to a function call. 
7|FrameState@0 - 7|FrameState@0 { sourceLine=202, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
8|Constant(2, i32) - node represents a constant 
9|< 
10|Begin 
11|Begin 
12|If 
13|Constant(36, i32) - node represents a constant 
14|Constant(37, i32) - node represents a constant 
15|< 
16|EndNode 
17|Merge 
18|EndNode 
19|Begin 
20|Begin 
21|If 
22|Constant(65, i32) - node represents a constant 
23|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
24|StackValue 
25|Constant(0, i32) - node represents a constant 
26|== 
27|Begin 
28|Begin 
29|If 
30|Constant(0, i64) - node represents a constant 
31|IntegerNormalizeCompare 
32|< 
33|Constant(1, i32) - node represents a constant 
34|Conditional 
36|EndNode 
37|Merge 
38|EndNode 
39|ValuePhi(34 25, i32) 
40|FrameState@49 - 40|FrameState@49 { sourceLine=212, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=49, sourceFile=RealLog.java,  }
 
41|== 
42|Begin 
43|Begin 
44|If 
45|Negate 
47|EndNode 
48|Merge 
49|EndNode 
50|ValuePhi(45 2, i64) 
51|FrameState@66 - 51|FrameState@66 { sourceLine=224, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=66, sourceFile=RealLog.java,  }
 
52|EndNode 
53|LoopBegin 
54|ValuePhi(22 68, i32) 
55|ValuePhi(50 81, i64) 
56|FrameState@66 - 56|FrameState@66 { sourceLine=224, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=66, sourceFile=RealLog.java,  }
 
57|SignExtend 
58||<| 
59|Conditional 
60|Begin 
62|LoopExit 
63|ValueProxy 
64|ValueProxy 
65|FrameState@110 - 65|FrameState@110 { sourceLine=229, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:229) [bci: 110], stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=110, sourceFile=RealLog.java,  }
 
66|If 
67|Constant(-1, i32) - node represents a constant 
68|+ 
69||%| 
70|MethodCallTarget 
71|Invoke#RealLog.digit 
72|FrameState@93 - 72|FrameState@93 { sourceLine=226, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:226) [bci: 90], stackSize=3, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=93, sourceFile=RealLog.java,  }
 
73|SignExtend 
74|Constant(1, i64) - node represents a constant 
75|* 
76|+ 
77|OffsetAddress 
78|Narrow 
79|CInterfaceWrite 
80|FrameState@98 - 80|FrameState@98 { sourceLine=227, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:226) [bci: 93], stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=98, sourceFile=RealLog.java,  }
 
81||/| 
82|LoopEnd 
83|+ 
84|MethodCallTarget 
85|Invoke#RealLog.digit 
86|FrameState@122 - 86|FrameState@122 { sourceLine=230, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:230) [bci: 119], stackSize=3, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
87|SignExtend 
88|* 
89|+ 
90|OffsetAddress 
91|Narrow 
92|CInterfaceWrite 
93|FrameState@127 - 93|FrameState@127 { sourceLine=232, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:230) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=127, sourceFile=RealLog.java,  }
 
94|Begin 
95|Begin 
96|If 
97|+ 
98|Constant(45, i32) - node represents a constant 
99|SignExtend 
100|* 
101|+ 
102|OffsetAddress 
103|Narrow 
104|CInterfaceWrite 
105|FrameState@146 - 105|FrameState@146 { sourceLine=237, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:234) [bci: 141], stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=146, sourceFile=RealLog.java,  }
 
106|EndNode 
107|Merge 
108|EndNode 
109|ValuePhi(83 97, i32) 
110|FrameState@146 - 110|FrameState@146 { sourceLine=237, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=146, sourceFile=RealLog.java,  }
 
111|- 
112|== 
113|Begin 
114|Begin 
115|If 
116|- 
117|MethodCallTarget 
118|Invoke#RealLog.spaces 
119|FrameState@172 - 119|FrameState@172 { sourceLine=241, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:241) [bci: 169], stackSize=1, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=172, sourceFile=RealLog.java,  }
 
120|EndNode 
121|Merge 
122|EndNode 
123|FrameState@173 - 123|FrameState@173 { sourceLine=244, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=173, sourceFile=RealLog.java,  }
 
124|SignExtend 
125|* 
126|+ 
127|+ 
128|ZeroExtend 
129|MethodCallTarget 
130|Invoke#RealLog.rawBytes 
131|FrameState@191 - 131|FrameState@191 { sourceLine=244, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:244) [bci: 188], stackSize=1, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=191, sourceFile=RealLog.java,  }
 
132|== 
133|Begin 
134|Begin 
135|If 
136|MethodCallTarget 
137|Invoke#RealLog.spaces 
138|FrameState@211 - 138|FrameState@211 { sourceLine=248, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.number(RealLog.java:248) [bci: 208], stackSize=1, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=211, sourceFile=RealLog.java,  }
 
139|EndNode 
140|Merge 
141|EndNode 
142|FrameState@212 - 142|FrameState@212 { sourceLine=251, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=212, sourceFile=RealLog.java,  }
 
143|Return 
144|FrameState@11 - 144|FrameState@11 { sourceLine=204, code=ResolvedJavaMethodBytecode<RealLog.number(long, int, boolean, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=15, rethrowException=false, bci=11, sourceFile=RealLog.java,  }
 
145|Return 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 479
Callee: unsigned (class: com.oracle.svm.core.log.RealLog), par: long, int, int, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=292, code=ResolvedJavaMethodBytecode<RealLog.unsigned(long, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(10, i32) - node represents a constant 
7|Constant(0, i32) - node represents a constant 
8|MethodCallTarget 
9|Invoke#RealLog.number 
10|FrameState@11 - 10|FrameState@11 { sourceLine=292, code=ResolvedJavaMethodBytecode<RealLog.unsigned(long, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.unsigned(RealLog.java:292) [bci: 8], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=11, sourceFile=RealLog.java,  }
 
11|Return 

build structured graph: Caller: logValues (class: com.oracle.svm.core.util.Counter), par: , node count: 48
Callee: logValues (class: com.oracle.svm.core.util.Counter$Group), par: , node count: 467
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=116, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=Counter.java,  }
 
3|Constant(0, i64) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#counters - node represents a read of a static or instance field. 
6|IsNull 
7|BytecodeException#NULL_POINTER 
8|Begin 
9|Begin 
10|If 
11|FrameState@12 - 11|FrameState@12 { sourceLine=118, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:118) [bci: 12], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=12, sourceFile=Counter.java,  }
 
14|Pi 
15|ArrayLength 
17|EndNode 
18|LoopBegin 
19|ValuePhi(3 84, i64) 
20|ValuePhi(4 121, i32) 
21|ValuePhi(4 124, i32) 
22|FrameState@18 - 22|FrameState@18 { sourceLine=118, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=18, sourceFile=Counter.java,  }
 
23|< 
25|LoopExit 
26|ValueProxy 
27|ValueProxy 
28|ValueProxy 
29|FrameState@59 - 29|FrameState@59 { sourceLine=123, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:123) [bci: 59], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=59, sourceFile=Counter.java,  }
 
30|Begin 
31|If 
32|BytecodeException#NULL_POINTER 
33|Begin 
34|Begin 
35|If 
36|FrameState@29 - 36|FrameState@29 { sourceLine=118, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:118) [bci: 29], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=29, sourceFile=Counter.java,  }
 
38|EndNode 
39|Merge 
40|EndNode 
41|LoopExit 
42|ValueProxy 
43|ValueProxy 
44|ValueProxy 
45|ValueProxy 
46|FrameState@-4[AFTER_EXCEPTION_BCI] - 46|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
47|ValuePhi(7 45 62 78 97 114 133 146 158 171 201 215 229 254 278 296 316 340 360 378 395 421 438 458 470 485, a -) 
48|Pi 
49|ArrayLength 
50||<| 
51|BytecodeException#OUT_OF_BOUNDS 
52|Begin 
53|Begin 
54|If 
55|FrameState@29 - 55|FrameState@29 { sourceLine=118, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:118) [bci: 29], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=29, sourceFile=Counter.java,  }
 
57|EndNode 
58|LoopExit 
59|ValueProxy 
60|ValueProxy 
61|ValueProxy 
62|ValueProxy 
63|FrameState@-4[AFTER_EXCEPTION_BCI] - 63|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
64|LoadIndexed 
65|IsNull 
66|BytecodeException#NULL_POINTER 
67|Begin 
68|Begin 
69|If 
70|FrameState@35 - 70|FrameState@35 { sourceLine=119, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:119) [bci: 35], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=35, sourceFile=Counter.java,  }
 
72|EndNode 
73|LoopExit 
74|ValueProxy 
75|ValueProxy 
76|ValueProxy 
77|ValueProxy 
78|ValueProxy 
79|FrameState@-4[AFTER_EXCEPTION_BCI] - 79|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
80|Pi 
81|MethodCallTarget 
82|Invoke#Counter.getValue 
83|FrameState@38 - 83|FrameState@38 { sourceLine=119, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:119) [bci: 35], stackSize=4, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=38, sourceFile=Counter.java,  }
 
84|+ 
85|BytecodeException#NULL_POINTER 
86|Begin 
87|Begin 
88|If 
89|FrameState@42 - 89|FrameState@42 { sourceLine=120, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:120) [bci: 42], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=42, sourceFile=Counter.java,  }
 
91|EndNode 
92|LoopExit 
93|ValueProxy 
94|ValueProxy 
95|ValueProxy 
96|ValueProxy 
97|ValueProxy 
98|FrameState@-4[AFTER_EXCEPTION_BCI] - 98|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
99|Pi 
100|LoadField#name - node represents a read of a static or instance field. 
101|IsNull 
102|BytecodeException#NULL_POINTER 
103|Begin 
104|Begin 
105|If 
106|FrameState@45 - 106|FrameState@45 { sourceLine=120, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:120) [bci: 45], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=45, sourceFile=Counter.java,  }
 
108|EndNode 
109|LoopExit 
110|ValueProxy 
111|ValueProxy 
112|ValueProxy 
113|ValueProxy 
114|ValueProxy 
115|FrameState@-4[AFTER_EXCEPTION_BCI] - 115|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
116|Pi 
117|MethodCallTarget 
118|Invoke#String.length 
119|FrameState@48 - 119|FrameState@48 { sourceLine=120, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:120) [bci: 45], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=48, sourceFile=Counter.java,  }
 
120|MethodCallTarget 
121|Invoke#Math.max 
122|FrameState@52 - 122|FrameState@52 { sourceLine=120, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:120) [bci: 49], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=52, sourceFile=Counter.java,  }
 
123|Constant(1, i32) - node represents a constant 
124|+ 
125|LoopEnd 
126|Constant(com.oracle.svm.core.log.RealLog, a -) - node represents a constant 
127|Constant(=== , a -) - node represents a constant 
128|MethodCallTarget 
129|Invoke#RealLog.string 
130|FrameState@67 - 130|FrameState@67 { sourceLine=123, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:123) [bci: 64], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=67, sourceFile=Counter.java,  }
 
131|LoadField#name - node represents a read of a static or instance field. 
132|IsNull 
133|BytecodeException#NULL_POINTER 
134|Begin 
135|Begin 
136|If 
137|FrameState@71 - 137|FrameState@71 { sourceLine=123, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:123) [bci: 71], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=71, sourceFile=Counter.java,  }
 
139|EndNode 
140|Pi 
141|MethodCallTarget 
142|Invoke#Log.string 
143|FrameState@74 - 143|FrameState@74 { sourceLine=123, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:123) [bci: 71], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=74, sourceFile=Counter.java,  }
 
144|Constant( ===, a -) - node represents a constant 
145|IsNull 
146|BytecodeException#NULL_POINTER 
147|Begin 
148|Begin 
149|If 
150|FrameState@76 - 150|FrameState@76 { sourceLine=123, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:123) [bci: 76], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=76, sourceFile=Counter.java,  }
 
152|EndNode 
153|Pi 
154|MethodCallTarget 
155|Invoke#Log.string 
156|FrameState@79 - 156|FrameState@79 { sourceLine=123, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:123) [bci: 76], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=79, sourceFile=Counter.java,  }
 
157|IsNull 
158|BytecodeException#NULL_POINTER 
159|Begin 
160|Begin 
161|If 
162|FrameState@79 - 162|FrameState@79 { sourceLine=123, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:123) [bci: 79], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=79, sourceFile=Counter.java,  }
 
164|EndNode 
165|Pi 
166|MethodCallTarget 
167|Invoke#Log.newline 
168|FrameState@82 - 168|FrameState@82 { sourceLine=123, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:123) [bci: 79], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=82, sourceFile=Counter.java,  }
 
169|LoadField#counters - node represents a read of a static or instance field. 
170|IsNull 
171|BytecodeException#NULL_POINTER 
172|Begin 
173|Begin 
174|If 
175|FrameState@91 - 175|FrameState@91 { sourceLine=124, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:124) [bci: 91], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=91, sourceFile=Counter.java,  }
 
177|EndNode 
178|Pi 
179|ArrayLength 
181|EndNode 
182|LoopBegin 
183|ValuePhi(4 451, i32) 
184|FrameState@97 - 184|FrameState@97 { sourceLine=124, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=97, sourceFile=Counter.java,  }
 
185|< 
187|LoopExit 
188|ValueProxy 
189|FrameState@227 - 189|FrameState@227 { sourceLine=134, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:134) [bci: 227], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=227, sourceFile=Counter.java,  }
 
190|Begin 
191|If 
192|BytecodeException#NULL_POINTER 
193|Begin 
194|Begin 
195|If 
196|FrameState@108 - 196|FrameState@108 { sourceLine=124, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:124) [bci: 108], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=108, sourceFile=Counter.java,  }
 
198|EndNode 
199|LoopExit 
200|ValueProxy 
201|ValueProxy 
202|FrameState@-4[AFTER_EXCEPTION_BCI] - 202|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
203|Pi 
204|ArrayLength 
205||<| 
206|BytecodeException#OUT_OF_BOUNDS 
207|Begin 
208|Begin 
209|If 
210|FrameState@108 - 210|FrameState@108 { sourceLine=124, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:124) [bci: 108], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=108, sourceFile=Counter.java,  }
 
212|EndNode 
213|LoopExit 
214|ValueProxy 
215|ValueProxy 
216|FrameState@-4[AFTER_EXCEPTION_BCI] - 216|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
217|LoadIndexed 
218|IsNull 
219|BytecodeException#NULL_POINTER 
220|Begin 
221|Begin 
222|If 
223|FrameState@113 - 223|FrameState@113 { sourceLine=125, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:125) [bci: 113], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=113, sourceFile=Counter.java,  }
 
225|EndNode 
226|LoopExit 
227|ValueProxy 
228|ValueProxy 
229|ValueProxy 
230|FrameState@-4[AFTER_EXCEPTION_BCI] - 230|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
231|Pi 
232|MethodCallTarget 
233|Invoke#Counter.getValue 
234|FrameState@116 - 234|FrameState@116 { sourceLine=125, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:125) [bci: 113], stackSize=2, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=Counter.java,  }
 
235|IntegerNormalizeCompare 
236|== 
237|Begin 
238|Begin 
239|If 
241|Constant(100, i64) - node represents a constant 
242|* 
243|BytecodeException#DIVISION_BY_ZERO 
244|Begin 
245|Begin 
246|If 
247|FrameState@135 - 247|FrameState@135 { sourceLine=126, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:126) [bci: 135], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=135, sourceFile=Counter.java,  }
 
249|EndNode 
250|LoopExit 
251|ValueProxy 
252|ValueProxy 
253|ValueProxy 
254|ValueProxy 
255|FrameState@-4[AFTER_EXCEPTION_BCI] - 255|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
256|/ 
257|EndNode 
258|Merge 
259|EndNode 
260|ValuePhi(3 256, i64) 
261|FrameState@136 - 261|FrameState@136 { sourceLine=126, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, stackSize=2, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=136, sourceFile=Counter.java,  }
 
262|Constant(  , a -) - node represents a constant 
263|MethodCallTarget 
264|Invoke#RealLog.string 
265|FrameState@146 - 265|FrameState@146 { sourceLine=127, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:127) [bci: 143], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=146, sourceFile=Counter.java,  }
 
266|BytecodeException#NULL_POINTER 
267|Begin 
268|Begin 
269|If 
270|FrameState@148 - 270|FrameState@148 { sourceLine=127, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:127) [bci: 148], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=148, sourceFile=Counter.java,  }
 
272|EndNode 
273|LoopExit 
274|ValueProxy 
275|ValueProxy 
276|ValueProxy 
277|ValueProxy 
278|ValueProxy 
279|FrameState@-4[AFTER_EXCEPTION_BCI] - 279|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
280|Pi 
281|LoadField#name - node represents a read of a static or instance field. 
282|Constant(2, i32) - node represents a constant 
283|IsNull 
284|BytecodeException#NULL_POINTER 
285|Begin 
286|Begin 
287|If 
288|FrameState@153 - 288|FrameState@153 { sourceLine=127, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:127) [bci: 153], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=153, sourceFile=Counter.java,  }
 
290|EndNode 
291|LoopExit 
292|ValueProxy 
293|ValueProxy 
294|ValueProxy 
295|ValueProxy 
296|ValueProxy 
297|FrameState@-4[AFTER_EXCEPTION_BCI] - 297|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
298|Pi 
299|MethodCallTarget 
300|Invoke#Log.string 
301|FrameState@156 - 301|FrameState@156 { sourceLine=127, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:127) [bci: 153], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=156, sourceFile=Counter.java,  }
 
302|Constant(:, a -) - node represents a constant 
303|IsNull 
304|BytecodeException#NULL_POINTER 
305|Begin 
306|Begin 
307|If 
308|FrameState@158 - 308|FrameState@158 { sourceLine=127, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:127) [bci: 158], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=158, sourceFile=Counter.java,  }
 
310|EndNode 
311|LoopExit 
312|ValueProxy 
313|ValueProxy 
314|ValueProxy 
315|ValueProxy 
316|ValueProxy 
317|FrameState@-4[AFTER_EXCEPTION_BCI] - 317|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
318|Pi 
319|MethodCallTarget 
320|Invoke#Log.string 
321|FrameState@161 - 321|FrameState@161 { sourceLine=127, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:127) [bci: 158], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=161, sourceFile=Counter.java,  }
 
322|Constant(10, i32) - node represents a constant 
323|MethodCallTarget 
324|Invoke#RealLog.unsigned 
325|FrameState@173 - 325|FrameState@173 { sourceLine=128, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:128) [bci: 170], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=173, sourceFile=Counter.java,  }
 
326|Constant(5, i32) - node represents a constant 
327|IsNull 
328|BytecodeException#NULL_POINTER 
329|Begin 
330|Begin 
331|If 
332|FrameState@177 - 332|FrameState@177 { sourceLine=128, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:128) [bci: 177], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=177, sourceFile=Counter.java,  }
 
334|EndNode 
335|LoopExit 
336|ValueProxy 
337|ValueProxy 
338|ValueProxy 
339|ValueProxy 
340|ValueProxy 
341|FrameState@-4[AFTER_EXCEPTION_BCI] - 341|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
342|Pi 
343|MethodCallTarget 
344|Invoke#Log.unsigned 
345|FrameState@180 - 345|FrameState@180 { sourceLine=128, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:128) [bci: 177], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=180, sourceFile=Counter.java,  }
 
346|Constant(%, a -) - node represents a constant 
347|IsNull 
348|BytecodeException#NULL_POINTER 
349|Begin 
350|Begin 
351|If 
352|FrameState@182 - 352|FrameState@182 { sourceLine=128, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:128) [bci: 182], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=182, sourceFile=Counter.java,  }
 
354|EndNode 
355|LoopExit 
356|ValueProxy 
357|ValueProxy 
358|ValueProxy 
359|ValueProxy 
360|ValueProxy 
361|FrameState@-4[AFTER_EXCEPTION_BCI] - 361|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
362|Pi 
363|MethodCallTarget 
364|Invoke#Log.string 
365|FrameState@185 - 365|FrameState@185 { sourceLine=128, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:128) [bci: 182], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=185, sourceFile=Counter.java,  }
 
366|BytecodeException#NULL_POINTER 
367|Begin 
368|Begin 
369|If 
370|FrameState@188 - 370|FrameState@188 { sourceLine=129, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:129) [bci: 188], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=188, sourceFile=Counter.java,  }
 
372|EndNode 
373|LoopExit 
374|ValueProxy 
375|ValueProxy 
376|ValueProxy 
377|ValueProxy 
378|ValueProxy 
379|FrameState@-4[AFTER_EXCEPTION_BCI] - 379|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
380|Pi 
381|LoadField#description - node represents a read of a static or instance field. 
382|IsNull 
383|BytecodeException#NULL_POINTER 
384|Begin 
385|Begin 
386|If 
387|FrameState@191 - 387|FrameState@191 { sourceLine=129, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:129) [bci: 191], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=191, sourceFile=Counter.java,  }
 
389|EndNode 
390|LoopExit 
391|ValueProxy 
392|ValueProxy 
393|ValueProxy 
394|ValueProxy 
395|ValueProxy 
396|FrameState@-4[AFTER_EXCEPTION_BCI] - 396|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
397|Pi 
398|MethodCallTarget 
399|Invoke#String.isEmpty 
400|FrameState@194 - 400|FrameState@194 { sourceLine=129, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:129) [bci: 191], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=194, sourceFile=Counter.java,  }
 
401|== 
402|Begin 
403|Begin 
404|If 
405|Constant(  // , a -) - node represents a constant 
406|MethodCallTarget 
407|Invoke#RealLog.string 
408|FrameState@205 - 408|FrameState@205 { sourceLine=130, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:130) [bci: 202], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=205, sourceFile=Counter.java,  }
 
409|BytecodeException#NULL_POINTER 
410|Begin 
411|Begin 
412|If 
413|FrameState@207 - 413|FrameState@207 { sourceLine=130, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:130) [bci: 207], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=207, sourceFile=Counter.java,  }
 
415|EndNode 
416|LoopExit 
417|ValueProxy 
418|ValueProxy 
419|ValueProxy 
420|ValueProxy 
421|ValueProxy 
422|FrameState@-4[AFTER_EXCEPTION_BCI] - 422|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
423|Pi 
424|LoadField#description - node represents a read of a static or instance field. 
425|IsNull 
426|BytecodeException#NULL_POINTER 
427|Begin 
428|Begin 
429|If 
430|FrameState@210 - 430|FrameState@210 { sourceLine=130, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:130) [bci: 210], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=210, sourceFile=Counter.java,  }
 
432|EndNode 
433|LoopExit 
434|ValueProxy 
435|ValueProxy 
436|ValueProxy 
437|ValueProxy 
438|ValueProxy 
439|FrameState@-4[AFTER_EXCEPTION_BCI] - 439|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues() [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
440|Pi 
441|MethodCallTarget 
442|Invoke#Log.string 
443|FrameState@213 - 443|FrameState@213 { sourceLine=130, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:130) [bci: 210], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=213, sourceFile=Counter.java,  }
 
444|EndNode 
445|Merge 
446|EndNode 
447|FrameState@214 - 447|FrameState@214 { sourceLine=132, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=214, sourceFile=Counter.java,  }
 
448|MethodCallTarget 
449|Invoke#RealLog.newline 
450|FrameState@220 - 450|FrameState@220 { sourceLine=132, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:132) [bci: 217], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=220, sourceFile=Counter.java,  }
 
451|+ 
452|LoopEnd 
453|MethodCallTarget 
454|Invoke#RealLog.string 
455|FrameState@235 - 455|FrameState@235 { sourceLine=134, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:134) [bci: 232], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=235, sourceFile=Counter.java,  }
 
456|Constant(TOTAL, a -) - node represents a constant 
457|IsNull 
458|BytecodeException#NULL_POINTER 
459|Begin 
460|Begin 
461|If 
462|FrameState@239 - 462|FrameState@239 { sourceLine=134, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:134) [bci: 239], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=239, sourceFile=Counter.java,  }
 
464|EndNode 
465|Pi 
466|MethodCallTarget 
467|Invoke#Log.string 
468|FrameState@242 - 468|FrameState@242 { sourceLine=134, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:134) [bci: 239], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=242, sourceFile=Counter.java,  }
 
469|IsNull 
470|BytecodeException#NULL_POINTER 
471|Begin 
472|Begin 
473|If 
474|FrameState@244 - 474|FrameState@244 { sourceLine=134, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:134) [bci: 244], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=244, sourceFile=Counter.java,  }
 
476|EndNode 
477|Pi 
478|MethodCallTarget 
479|Invoke#Log.string 
480|FrameState@247 - 480|FrameState@247 { sourceLine=134, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:134) [bci: 244], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=247, sourceFile=Counter.java,  }
 
481|MethodCallTarget 
482|Invoke#RealLog.unsigned 
483|FrameState@258 - 483|FrameState@258 { sourceLine=135, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:135) [bci: 255], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=258, sourceFile=Counter.java,  }
 
484|IsNull 
485|BytecodeException#NULL_POINTER 
486|Begin 
487|Begin 
488|If 
489|FrameState@258 - 489|FrameState@258 { sourceLine=135, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:135) [bci: 258], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=258, sourceFile=Counter.java,  }
 
491|EndNode 
492|Pi 
493|MethodCallTarget 
494|Invoke#Log.newline 
495|FrameState@261 - 495|FrameState@261 { sourceLine=135, code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, nodeSourcePosition=at com.oracle.svm.core.util.Counter$Group.logValues(Counter.java:135) [bci: 258], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=261, sourceFile=Counter.java,  }
 
496|Return 
497|FrameState@-4[AFTER_EXCEPTION_BCI] - 497|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<Counter$Group.logValues()>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
498|Unwind 

build structured graph: Caller: dumpTopFrame (class: com.oracle.svm.core.SubstrateUtil), par: Log, Pointer, CodePointer, node count: 139
Callee: getSourcePC (class: com.oracle.svm.core.deopt.DeoptimizedFrame), par: , node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=377, code=ResolvedJavaMethodBytecode<DeoptimizedFrame.getSourcePC()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=DeoptimizedFrame.java,  }
 
3|LoadField#sourcePC - node represents a read of a static or instance field. 
4|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 5
Callee: initialSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=225, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.initialSizeEncoding()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
2|Constant(0, i32) - node represents a constant 
3|Return 

build structured graph: Caller: lookupEntryIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, node count: 3
Callee: indexGranularity (class: com.oracle.svm.core.code.CodeInfoDecoder), par: , node count: 8
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=203, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.indexGranularity()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Integer, a -) - node represents a constant 
4|LogicConstant 
5|Constant(256, i32) - node represents a constant 
6|Constant(256, i64) - node represents a constant 
7|Return 

build structured graph: Caller: lookupEntryIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, node count: 7
Callee: indexGranularity (class: com.oracle.svm.core.code.CodeInfoDecoder), par: , node count: 8
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=203, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.indexGranularity()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Integer, a -) - node represents a constant 
4|LogicConstant 
5|Constant(256, i32) - node represents a constant 
6|Constant(256, i64) - node represents a constant 
7|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 9
Callee: lookupEntryIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=207, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupEntryIP(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoDecoder.indexGranularity 
5|FrameState@4 - 5|FrameState@4 { sourceLine=207, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupEntryIP(long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupEntryIP(CodeInfoDecoder.java:207) [bci: 1], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=4, sourceFile=CodeInfoDecoder.java,  }
 
6||/| 
7|MethodCallTarget 
8|Invoke#CodeInfoDecoder.indexGranularity 
9|FrameState@10 - 9|FrameState@10 { sourceLine=207, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupEntryIP(long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupEntryIP(CodeInfoDecoder.java:207) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=CodeInfoDecoder.java,  }
 
10|* 
11|Return 

build structured graph: Caller: loadEntryOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 9
Callee: indexGranularity (class: com.oracle.svm.core.code.CodeInfoDecoder), par: , node count: 8
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=203, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.indexGranularity()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Integer, a -) - node represents a constant 
4|LogicConstant 
5|Constant(256, i32) - node represents a constant 
6|Constant(256, i64) - node represents a constant 
7|Return 

build structured graph: Caller: loadEntryOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 13
Callee: getCodeInfoIndex (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=287, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoIndex(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=287, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoIndex(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoIndex(CodeInfoAccess.java:287) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(8, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadEntryOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 19
Callee: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=91, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS4 
6|FrameState@5 - 6|FrameState@5 { sourceLine=91, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU4(NonmovableByteArrayReader.java:91) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|SignExtend 
8|Constant(4294967295, i64) - node represents a constant 
9|ZeroExtend 
10|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 12
Callee: loadEntryOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 23
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=211, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryOffset(CodeInfo, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(com.oracle.svm.core.code.CodeInfoDecoderCounters, a -) - node represents a constant 
5|Constant(com.oracle.svm.core.util.Counter, a -) - node represents a constant 
6|MethodCallTarget 
7|Invoke#Counter.inc 
8|FrameState@9 - 8|FrameState@9 { sourceLine=212, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryOffset(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryOffset(CodeInfoDecoder.java:211) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=9, sourceFile=CodeInfoDecoder.java,  }
 
9|MethodCallTarget 
10|Invoke#CodeInfoDecoder.indexGranularity 
11|FrameState@13 - 11|FrameState@13 { sourceLine=212, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryOffset(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryOffset(CodeInfoDecoder.java:212) [bci: 10], stackSize=4, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=13, sourceFile=CodeInfoDecoder.java,  }
 
12||/| 
13|MethodCallTarget 
14|Invoke#CodeInfoAccess.getCodeInfoIndex 
15|FrameState@21 - 15|FrameState@21 { sourceLine=213, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryOffset(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryOffset(CodeInfoDecoder.java:213) [bci: 18], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=21, sourceFile=CodeInfoDecoder.java,  }
 
16|Constant(4, i64) - node represents a constant 
17|Constant(2, i32) - node represents a constant 
18|<< 
19|MethodCallTarget 
20|Invoke#NonmovableByteArrayReader.getU4 
21|FrameState@29 - 21|FrameState@29 { sourceLine=213, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryOffset(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryOffset(CodeInfoDecoder.java:213) [bci: 26], stackSize=2, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=29, sourceFile=CodeInfoDecoder.java,  }
 
22|Return 

build structured graph: Caller: loadEntryFlags (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 9
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadEntryFlags (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 12
Callee: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=83, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=83, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU1(NonmovableByteArrayReader.java:83) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|Constant(255, i32) - node represents a constant 
8|& 
9|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 22
Callee: loadEntryFlags (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, node count: 16
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=218, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryFlags(CodeInfo, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(com.oracle.svm.core.code.CodeInfoDecoderCounters, a -) - node represents a constant 
5|Constant(com.oracle.svm.core.util.Counter, a -) - node represents a constant 
6|MethodCallTarget 
7|Invoke#Counter.inc 
8|FrameState@9 - 8|FrameState@9 { sourceLine=219, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryFlags(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryFlags(CodeInfoDecoder.java:218) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=9, sourceFile=CodeInfoDecoder.java,  }
 
9|MethodCallTarget 
10|Invoke#CodeInfoAccess.getCodeInfoEncodings 
11|FrameState@13 - 11|FrameState@13 { sourceLine=219, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryFlags(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryFlags(CodeInfoDecoder.java:219) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=CodeInfoDecoder.java,  }
 
12|MethodCallTarget 
13|Invoke#NonmovableByteArrayReader.getU1 
14|FrameState@17 - 14|FrameState@17 { sourceLine=219, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadEntryFlags(CodeInfo, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadEntryFlags(CodeInfoDecoder.java:219) [bci: 14], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=17, sourceFile=CodeInfoDecoder.java,  }
 
15|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 6
Callee: extractFS (class: com.oracle.svm.core.code.CodeInfoDecoder), par: int, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=444, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.extractFS(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|Constant(3, i32) - node represents a constant 
4|& 
5|Constant(0, i32) - node represents a constant 
6|>>> 
7|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 31
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 34
Callee: offsetFS (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=464, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetFS(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant(2, i32) - node represents a constant 
7|Constant(2, i64) - node represents a constant 
8|+ 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 37
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 42
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 45
Callee: offsetFS (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=464, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetFS(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant(2, i32) - node represents a constant 
7|Constant(2, i64) - node represents a constant 
8|+ 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 48
Callee: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=62, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=65, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS2(NonmovableByteArrayReader.java:65) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 53
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 56
Callee: offsetFS (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=464, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetFS(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant(2, i32) - node represents a constant 
7|Constant(2, i64) - node represents a constant 
8|+ 
9|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 59
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 25
Callee: updateSizeEncoding (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, long, node count: 65
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=230, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
6|MethodCallTarget 
7|Invoke#CodeInfoDecoder.extractFS 
8|FrameState@4 - 8|FrameState@4 { sourceLine=230, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:230) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=4, sourceFile=CodeInfoDecoder.java,  }
 
9|IntegerSwitch 
10|Begin 
11|Begin 
12|Begin 
13|Begin 
14|Begin 
15|MethodCallTarget 
16|Invoke#VMError.shouldNotReachHere 
17|FrameState@84 - 17|FrameState@84 { sourceLine=240, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:240) [bci: 81], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=84, sourceFile=CodeInfoDecoder.java,  }
 
18|IsNull 
19|BytecodeException#NULL_POINTER 
20|Begin 
21|Begin 
22|If 
23|FrameState@84 - 23|FrameState@84 { sourceLine=240, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:240) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=true, bci=84, sourceFile=CodeInfoDecoder.java,  }
 
26|Pi 
28|EndNode 
29|Merge 
30|EndNode 
31|ValuePhi(19 26, a -) 
32|MethodCallTarget 
33|Invoke#CodeInfoAccess.getCodeInfoEncodings 
34|FrameState@71 - 34|FrameState@71 { sourceLine=238, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:238) [bci: 68], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=71, sourceFile=CodeInfoDecoder.java,  }
 
35|MethodCallTarget 
36|Invoke#CodeInfoDecoder.offsetFS 
37|FrameState@76 - 37|FrameState@76 { sourceLine=238, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:238) [bci: 73], stackSize=3, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=76, sourceFile=CodeInfoDecoder.java,  }
 
38|MethodCallTarget 
39|Invoke#NonmovableByteArrayReader.getS4 
40|FrameState@79 - 40|FrameState@79 { sourceLine=238, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:238) [bci: 76], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=79, sourceFile=CodeInfoDecoder.java,  }
 
41|SignExtend 
42|Return 
43|MethodCallTarget 
44|Invoke#CodeInfoAccess.getCodeInfoEncodings 
45|FrameState@57 - 45|FrameState@57 { sourceLine=236, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:236) [bci: 54], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=57, sourceFile=CodeInfoDecoder.java,  }
 
46|MethodCallTarget 
47|Invoke#CodeInfoDecoder.offsetFS 
48|FrameState@62 - 48|FrameState@62 { sourceLine=236, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:236) [bci: 59], stackSize=3, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=62, sourceFile=CodeInfoDecoder.java,  }
 
49|MethodCallTarget 
50|Invoke#NonmovableByteArrayReader.getS2 
51|FrameState@65 - 51|FrameState@65 { sourceLine=236, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:236) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=65, sourceFile=CodeInfoDecoder.java,  }
 
52|SignExtend 
53|Return 
54|MethodCallTarget 
55|Invoke#CodeInfoAccess.getCodeInfoEncodings 
56|FrameState@43 - 56|FrameState@43 { sourceLine=234, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:234) [bci: 40], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=43, sourceFile=CodeInfoDecoder.java,  }
 
57|MethodCallTarget 
58|Invoke#CodeInfoDecoder.offsetFS 
59|FrameState@48 - 59|FrameState@48 { sourceLine=234, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:234) [bci: 45], stackSize=3, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=48, sourceFile=CodeInfoDecoder.java,  }
 
60|MethodCallTarget 
61|Invoke#NonmovableByteArrayReader.getS1 
62|FrameState@51 - 62|FrameState@51 { sourceLine=234, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.updateSizeEncoding(CodeInfoDecoder.java:234) [bci: 48], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=51, sourceFile=CodeInfoDecoder.java,  }
 
63|SignExtend 
64|Return 
65|Return 
66|FrameState@-4[AFTER_EXCEPTION_BCI] - 66|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<CodeInfoDecoder.updateSizeEncoding(CodeInfo, long, int, long)>, stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
67|Unwind 

build structured graph: Caller: advanceIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, long, node count: 5
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: advanceIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, long, node count: 8
Callee: offsetIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=460, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetIP(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(1, i64) - node represents a constant 
5|+ 
6|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: advanceIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, long, node count: 11
Callee: getU1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=83, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=83, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU1(NonmovableByteArrayReader.java:83) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|Constant(255, i32) - node represents a constant 
8|& 
9|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 40
Callee: advanceIP (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, long, node count: 25
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=362, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceIP(CodeInfo, long, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
5|MethodCallTarget 
6|Invoke#CodeInfoAccess.getCodeInfoEncodings 
7|FrameState@4 - 7|FrameState@4 { sourceLine=362, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceIP(CodeInfo, long, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.advanceIP(CodeInfoDecoder.java:362) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=4, sourceFile=CodeInfoDecoder.java,  }
 
8|MethodCallTarget 
9|Invoke#CodeInfoDecoder.offsetIP 
10|FrameState@8 - 10|FrameState@8 { sourceLine=362, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceIP(CodeInfo, long, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.advanceIP(CodeInfoDecoder.java:362) [bci: 5], stackSize=3, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=8, sourceFile=CodeInfoDecoder.java,  }
 
11|MethodCallTarget 
12|Invoke#NonmovableByteArrayReader.getU1 
13|FrameState@11 - 13|FrameState@11 { sourceLine=362, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceIP(CodeInfo, long, long)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.advanceIP(CodeInfoDecoder.java:362) [bci: 8], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=11, sourceFile=CodeInfoDecoder.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|== 
16|Begin 
17|Begin 
18|If 
19|Constant(9223372036854775807, i64) - node represents a constant 
20|Return 
21|Constant(1, i32) - node represents a constant 
23|SignExtend 
24|+ 
25|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: advanceOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 11
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 43
Callee: advanceOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=485, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceOffset(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(com.oracle.svm.core.code.CodeInfoDecoderCounters, a -) - node represents a constant 
5|Constant(com.oracle.svm.core.util.Counter, a -) - node represents a constant 
6|MethodCallTarget 
7|Invoke#Counter.inc 
8|FrameState@9 - 8|FrameState@9 { sourceLine=486, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceOffset(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.advanceOffset(CodeInfoDecoder.java:485) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=9, sourceFile=CodeInfoDecoder.java,  }
 
9|Constant([B, a -) - node represents a constant 
10|SignExtend 
11|MethodCallTarget 
12|Invoke#ByteArrayReader.getU1 
13|FrameState@18 - 13|FrameState@18 { sourceLine=486, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.advanceOffset(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.advanceOffset(CodeInfoDecoder.java:486) [bci: 15], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=18, sourceFile=CodeInfoDecoder.java,  }
 
14|SignExtend 
15|+ 
16|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 5
Callee: extractEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: int, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=448, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.extractEX(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|Constant(12, i32) - node represents a constant 
4|& 
5|Constant(2, i32) - node represents a constant 
6|>>> 
7|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 30
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 33
Callee: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=469, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@30 - 10|FrameState@30 { sourceLine=470, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetEX(CodeInfoDecoder.java:470) [bci: 27], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=30, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 36
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 41
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 44
Callee: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=469, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@30 - 10|FrameState@30 { sourceLine=470, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetEX(CodeInfoDecoder.java:470) [bci: 27], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=30, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 47
Callee: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=62, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=65, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS2(NonmovableByteArrayReader.java:65) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 52
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 55
Callee: offsetEX (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=469, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@30 - 10|FrameState@30 { sourceLine=470, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetEX(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetEX(CodeInfoDecoder.java:470) [bci: 27], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=30, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 58
Callee: getS1 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=55, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=58, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS1(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS1(NonmovableByteArrayReader.java:58) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 62
Callee: loadExceptionOffset (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 65
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=245, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
5|MethodCallTarget 
6|Invoke#CodeInfoDecoder.extractEX 
7|FrameState@4 - 7|FrameState@4 { sourceLine=245, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:245) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=4, sourceFile=CodeInfoDecoder.java,  }
 
8|IntegerSwitch 
9|Begin 
10|Begin 
11|Begin 
12|Begin 
13|Begin 
14|MethodCallTarget 
15|Invoke#VMError.shouldNotReachHere 
16|FrameState@83 - 16|FrameState@83 { sourceLine=255, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:255) [bci: 80], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=83, sourceFile=CodeInfoDecoder.java,  }
 
17|IsNull 
18|BytecodeException#NULL_POINTER 
19|Begin 
20|Begin 
21|If 
22|FrameState@83 - 22|FrameState@83 { sourceLine=255, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:255) [bci: 83], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=83, sourceFile=CodeInfoDecoder.java,  }
 
25|Pi 
27|EndNode 
28|Merge 
29|EndNode 
30|ValuePhi(18 25, a -) 
31|MethodCallTarget 
32|Invoke#CodeInfoAccess.getCodeInfoEncodings 
33|FrameState@70 - 33|FrameState@70 { sourceLine=253, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:253) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=70, sourceFile=CodeInfoDecoder.java,  }
 
34|MethodCallTarget 
35|Invoke#CodeInfoDecoder.offsetEX 
36|FrameState@75 - 36|FrameState@75 { sourceLine=253, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:253) [bci: 72], stackSize=3, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=75, sourceFile=CodeInfoDecoder.java,  }
 
37|MethodCallTarget 
38|Invoke#NonmovableByteArrayReader.getS4 
39|FrameState@78 - 39|FrameState@78 { sourceLine=253, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:253) [bci: 75], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=78, sourceFile=CodeInfoDecoder.java,  }
 
40|SignExtend 
41|Return 
42|MethodCallTarget 
43|Invoke#CodeInfoAccess.getCodeInfoEncodings 
44|FrameState@56 - 44|FrameState@56 { sourceLine=251, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:251) [bci: 53], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=56, sourceFile=CodeInfoDecoder.java,  }
 
45|MethodCallTarget 
46|Invoke#CodeInfoDecoder.offsetEX 
47|FrameState@61 - 47|FrameState@61 { sourceLine=251, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:251) [bci: 58], stackSize=3, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=61, sourceFile=CodeInfoDecoder.java,  }
 
48|MethodCallTarget 
49|Invoke#NonmovableByteArrayReader.getS2 
50|FrameState@64 - 50|FrameState@64 { sourceLine=251, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:251) [bci: 61], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=64, sourceFile=CodeInfoDecoder.java,  }
 
51|SignExtend 
52|Return 
53|MethodCallTarget 
54|Invoke#CodeInfoAccess.getCodeInfoEncodings 
55|FrameState@42 - 55|FrameState@42 { sourceLine=249, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:249) [bci: 39], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=42, sourceFile=CodeInfoDecoder.java,  }
 
56|MethodCallTarget 
57|Invoke#CodeInfoDecoder.offsetEX 
58|FrameState@47 - 58|FrameState@47 { sourceLine=249, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:249) [bci: 44], stackSize=3, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=47, sourceFile=CodeInfoDecoder.java,  }
 
59|MethodCallTarget 
60|Invoke#NonmovableByteArrayReader.getS1 
61|FrameState@50 - 61|FrameState@50 { sourceLine=249, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadExceptionOffset(CodeInfoDecoder.java:249) [bci: 47], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=50, sourceFile=CodeInfoDecoder.java,  }
 
62|SignExtend 
63|Return 
64|Constant(0, i64) - node represents a constant 
65|Return 
66|FrameState@-4[AFTER_EXCEPTION_BCI] - 66|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadExceptionOffset(CodeInfo, long, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
67|Unwind 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 5
Callee: extractRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: int, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=452, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.extractRM(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
3|Constant(48, i32) - node represents a constant 
4|& 
5|Constant(4, i32) - node represents a constant 
6|>>> 
7|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 30
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 33
Callee: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=474, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetRM(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@38 - 10|FrameState@38 { sourceLine=475, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetRM(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetRM(CodeInfoDecoder.java:475) [bci: 35], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=38, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=69, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=72, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS4(NonmovableByteArrayReader.java:72) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 36
Callee: getU4 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=91, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU4(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS4 
6|FrameState@5 - 6|FrameState@5 { sourceLine=91, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU4(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU4(NonmovableByteArrayReader.java:91) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|SignExtend 
8|Constant(4294967295, i64) - node represents a constant 
9|ZeroExtend 
10|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 40
Callee: getCodeInfoEncodings (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
3|MethodCallTarget 
4|Invoke#CodeInfoAccess.cast 
5|FrameState@4 - 5|FrameState@4 { sourceLine=291, code=ResolvedJavaMethodBytecode<CodeInfoAccess.getCodeInfoEncodings(CodeInfo)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.getCodeInfoEncodings(CodeInfoAccess.java:291) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=CodeInfoAccess.java,  }
 
6|Constant(0, i64) - node represents a constant 
7|OffsetAddress 
8|CInterfaceRead 
9|Return 

build structured graph: Caller: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 6
Callee: readOffset (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, int, node count: 11
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=88, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.readOffset(byte[], long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
5|Constant(1, i32) - node represents a constant 
6|Constant(0, i32) - node represents a constant 
7|Constant(16, i32) - node represents a constant 
8|Constant(16, i64) - node represents a constant 
9|+ 
10|Return 

build structured graph: Caller: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 4
Callee: getU1 (class: org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader), par: byte[], long, node count: 24
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=UnsafeArrayTypeReader.java,  }
 
4|Constant(sun.misc.Unsafe, a -) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|MethodCallTarget 
7|Invoke#UnsafeArrayTypeReader.readOffset 
8|FrameState@10 - 8|FrameState@10 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 7], stackSize=4, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=UnsafeArrayTypeReader.java,  }
 
9|RawLoad 
10|Constant(0, i64) - node represents a constant 
11|RawLoad 
12|IsNull 
13|Begin 
14|Begin 
15|If 
16|Merge 
17|EndNode 
18|EndNode 
19|ValuePhi(9 11, i32) 
20|FrameState@13 - 20|FrameState@13 { sourceLine=52, code=ResolvedJavaMethodBytecode<UnsafeArrayTypeReader.getU1(byte[], long)>, nodeSourcePosition=at sun.misc.Unsafe.getByte(Object, long) [bci: -1]
at org.graalvm.compiler.core.common.util.UnsafeArrayTypeReader.getU1(UnsafeArrayTypeReader.java:52) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=13, sourceFile=UnsafeArrayTypeReader.java,  }
 
21|Constant(255, i32) - node represents a constant 
22|& 
23|Return 

build structured graph: Caller: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 8
Callee: getU1 (class: com.oracle.svm.core.util.ByteArrayReader), par: byte[], long, node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=ByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#UnsafeArrayTypeReader.getU1 
6|FrameState@5 - 6|FrameState@5 { sourceLine=43, code=ResolvedJavaMethodBytecode<ByteArrayReader.getU1(byte[], long)>, nodeSourcePosition=at com.oracle.svm.core.util.ByteArrayReader.getU1(ByteArrayReader.java:43) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=ByteArrayReader.java,  }
 
7|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 43
Callee: offsetRM (class: com.oracle.svm.core.code.CodeInfoDecoder), par: long, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=474, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetRM(long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Constant([B, a -) - node represents a constant 
7|SignExtend 
8|MethodCallTarget 
9|Invoke#ByteArrayReader.getU1 
10|FrameState@38 - 10|FrameState@38 { sourceLine=475, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.offsetRM(long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.offsetRM(CodeInfoDecoder.java:475) [bci: 35], stackSize=3, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=38, sourceFile=CodeInfoDecoder.java,  }
 
11|SignExtend 
12|+ 
13|Return 

build structured graph: Caller: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 9
Callee: safeToInt (class: org.graalvm.compiler.core.common.NumUtil), par: long, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<NumUtil.safeToInt(long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=NumUtil.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|Narrow 
6|Return 

build structured graph: Caller: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 5
Callee: pointerTo (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|Constant(1, i32) - node represents a constant 
6|Constant(16, i32) - node represents a constant 
7|SignExtend 
8|+ 
9|MethodCallTarget 
10|Invoke#NumUtil.safeToInt 
11|FrameState@59 - 11|FrameState@59 { sourceLine=49, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.pointerTo(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.pointerTo(NonmovableByteArrayReader.java:49) [bci: 56], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=59, sourceFile=NonmovableByteArrayReader.java,  }
 
12|SignExtend 
13|+ 
14|Return 

build structured graph: Caller: getU2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 4
Callee: getS2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=62, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|MethodCallTarget 
6|Invoke#NonmovableByteArrayReader.pointerTo 
7|FrameState@23 - 7|FrameState@23 { sourceLine=65, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getS2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getS2(NonmovableByteArrayReader.java:65) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=NonmovableByteArrayReader.java,  }
 
8|SignExtend 
9|OffsetAddress 
10|JavaRead 
11|Return 

build structured graph: Caller: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 46
Callee: getU2 (class: com.oracle.svm.core.util.NonmovableByteArrayReader), par: NonmovableArray, long, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=87, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU2(NonmovableArray, long)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NonmovableByteArrayReader.java,  }
 
4|MethodCallTarget 
5|Invoke#NonmovableByteArrayReader.getS2 
6|FrameState@5 - 6|FrameState@5 { sourceLine=87, code=ResolvedJavaMethodBytecode<NonmovableByteArrayReader.getU2(NonmovableArray, long)>, nodeSourcePosition=at com.oracle.svm.core.util.NonmovableByteArrayReader.getU2(NonmovableByteArrayReader.java:87) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=NonmovableByteArrayReader.java,  }
 
7|Constant(65535, i32) - node represents a constant 
8|& 
9|Return 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 69
Callee: loadReferenceMapIndex (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, int, node count: 55
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=260, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
5|MethodCallTarget 
6|Invoke#CodeInfoDecoder.extractRM 
7|FrameState@4 - 7|FrameState@4 { sourceLine=260, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:260) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=4, sourceFile=CodeInfoDecoder.java,  }
 
8|IntegerSwitch 
9|Begin 
10|Begin 
11|Begin 
12|Begin 
13|Begin 
14|MethodCallTarget 
15|Invoke#VMError.shouldNotReachHere 
16|FrameState@72 - 16|FrameState@72 { sourceLine=270, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:270) [bci: 69], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=72, sourceFile=CodeInfoDecoder.java,  }
 
17|IsNull 
18|BytecodeException#NULL_POINTER 
19|Begin 
20|Begin 
21|If 
22|FrameState@72 - 22|FrameState@72 { sourceLine=270, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:270) [bci: 72], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=72, sourceFile=CodeInfoDecoder.java,  }
 
25|Pi 
27|EndNode 
28|Merge 
29|EndNode 
30|ValuePhi(18 25, a -) 
31|MethodCallTarget 
32|Invoke#CodeInfoAccess.getCodeInfoEncodings 
33|FrameState@60 - 33|FrameState@60 { sourceLine=268, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:268) [bci: 57], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=60, sourceFile=CodeInfoDecoder.java,  }
 
34|MethodCallTarget 
35|Invoke#CodeInfoDecoder.offsetRM 
36|FrameState@65 - 36|FrameState@65 { sourceLine=268, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:268) [bci: 62], stackSize=3, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=65, sourceFile=CodeInfoDecoder.java,  }
 
37|MethodCallTarget 
38|Invoke#NonmovableByteArrayReader.getU4 
39|FrameState@68 - 39|FrameState@68 { sourceLine=268, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:268) [bci: 65], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=68, sourceFile=CodeInfoDecoder.java,  }
 
40|Return 
41|MethodCallTarget 
42|Invoke#CodeInfoAccess.getCodeInfoEncodings 
43|FrameState@46 - 43|FrameState@46 { sourceLine=266, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:266) [bci: 43], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=46, sourceFile=CodeInfoDecoder.java,  }
 
44|MethodCallTarget 
45|Invoke#CodeInfoDecoder.offsetRM 
46|FrameState@51 - 46|FrameState@51 { sourceLine=266, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:266) [bci: 48], stackSize=3, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=51, sourceFile=CodeInfoDecoder.java,  }
 
47|MethodCallTarget 
48|Invoke#NonmovableByteArrayReader.getU2 
49|FrameState@54 - 49|FrameState@54 { sourceLine=266, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.loadReferenceMapIndex(CodeInfoDecoder.java:266) [bci: 51], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=54, sourceFile=CodeInfoDecoder.java,  }
 
50|SignExtend 
51|Return 
52|Constant(0, i64) - node represents a constant 
53|Return 
54|Constant(-1, i64) - node represents a constant 
55|Return 
56|FrameState@-4[AFTER_EXCEPTION_BCI] - 56|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<CodeInfoDecoder.loadReferenceMapIndex(CodeInfo, long, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
57|Unwind 

build structured graph: Caller: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 5
Callee: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoDecoder), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 82
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=117, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=0, sourceFile=CodeInfoDecoder.java,  }
 
5|MethodCallTarget 
6|Invoke#CodeInfoDecoder.initialSizeEncoding 
7|FrameState@3 - 7|FrameState@3 { sourceLine=117, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:117) [bci: 0], stackSize=1, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=3, sourceFile=CodeInfoDecoder.java,  }
 
8|SignExtend 
9|MethodCallTarget 
10|Invoke#CodeInfoDecoder.lookupEntryIP 
11|FrameState@10 - 11|FrameState@10 { sourceLine=118, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:118) [bci: 7], stackSize=2, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=10, sourceFile=CodeInfoDecoder.java,  }
 
12|MethodCallTarget 
13|Invoke#CodeInfoDecoder.loadEntryOffset 
14|FrameState@17 - 14|FrameState@17 { sourceLine=119, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:119) [bci: 14], stackSize=2, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=17, sourceFile=CodeInfoDecoder.java,  }
 
16|EndNode 
17|LoopBegin 
18|ValuePhi(8 26, i64) 
19|ValuePhi(10 41, i64) 
20|ValuePhi(13 44, i64) 
21|FrameState@19 - 21|FrameState@19 { sourceLine=121, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=19, sourceFile=CodeInfoDecoder.java,  }
 
22|MethodCallTarget 
23|Invoke#CodeInfoDecoder.loadEntryFlags 
24|FrameState@25 - 24|FrameState@25 { sourceLine=121, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:121) [bci: 22], stackSize=1, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=25, sourceFile=CodeInfoDecoder.java,  }
 
25|MethodCallTarget 
26|Invoke#CodeInfoDecoder.updateSizeEncoding 
27|FrameState@37 - 27|FrameState@37 { sourceLine=122, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:122) [bci: 34], stackSize=2, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=37, sourceFile=CodeInfoDecoder.java,  }
 
28|IntegerNormalizeCompare 
29|Constant(0, i32) - node represents a constant 
30|== 
31|Begin 
33|LoopExit 
34|ValueProxy 
35|ValueProxy 
36|ValueProxy 
37|ValueProxy 
38|FrameState@46 - 38|FrameState@46 { sourceLine=124, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:124) [bci: 46], stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=46, sourceFile=CodeInfoDecoder.java,  }
 
39|If 
40|MethodCallTarget 
41|Invoke#CodeInfoDecoder.advanceIP 
42|FrameState@91 - 42|FrameState@91 { sourceLine=130, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:130) [bci: 88], stackSize=2, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=91, sourceFile=CodeInfoDecoder.java,  }
 
43|MethodCallTarget 
44|Invoke#CodeInfoDecoder.advanceOffset 
45|FrameState@100 - 45|FrameState@100 { sourceLine=131, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:131) [bci: 97], stackSize=2, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=100, sourceFile=CodeInfoDecoder.java,  }
 
46|IntegerNormalizeCompare 
47|< 
48|LoopEnd 
50|LoopExit 
51|ValueProxy 
52|ValueProxy 
53|ValueProxy 
54|ValueProxy 
55|FrameState@109 - 55|FrameState@109 { sourceLine=134, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:134) [bci: 109], stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=109, sourceFile=CodeInfoDecoder.java,  }
 
56|Begin 
57|If 
58|Constant(0, i64) - node represents a constant 
59|OffsetAddress 
60|CInterfaceWrite 
61|FrameState@54 - 61|FrameState@54 { sourceLine=125, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:124) [bci: 49], stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=54, sourceFile=CodeInfoDecoder.java,  }
 
62|MethodCallTarget 
63|Invoke#CodeInfoDecoder.loadExceptionOffset 
64|FrameState@63 - 64|FrameState@63 { sourceLine=125, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:125) [bci: 60], stackSize=3, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=63, sourceFile=CodeInfoDecoder.java,  }
 
65|Constant(8, i64) - node represents a constant 
66|OffsetAddress 
67|CInterfaceWrite 
68|FrameState@68 - 68|FrameState@68 { sourceLine=126, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:125) [bci: 63], stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=68, sourceFile=CodeInfoDecoder.java,  }
 
69|MethodCallTarget 
70|Invoke#CodeInfoDecoder.loadReferenceMapIndex 
71|FrameState@77 - 71|FrameState@77 { sourceLine=126, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:126) [bci: 74], stackSize=3, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=77, sourceFile=CodeInfoDecoder.java,  }
 
72|Constant(16, i64) - node represents a constant 
73|OffsetAddress 
74|CInterfaceWrite 
75|FrameState@82 - 75|FrameState@82 { sourceLine=127, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:126) [bci: 77], stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=82, sourceFile=CodeInfoDecoder.java,  }
 
76|Return 
77|CInterfaceWrite 
78|FrameState@117 - 78|FrameState@117 { sourceLine=135, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:134) [bci: 112], stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=117, sourceFile=CodeInfoDecoder.java,  }
 
79|CInterfaceWrite 
80|FrameState@124 - 80|FrameState@124 { sourceLine=136, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:135) [bci: 119], stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=124, sourceFile=CodeInfoDecoder.java,  }
 
81|Constant(-1, i64) - node represents a constant 
82|CInterfaceWrite 
83|FrameState@133 - 83|FrameState@133 { sourceLine=137, code=ResolvedJavaMethodBytecode<CodeInfoDecoder.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoDecoder.lookupCodeInfo(CodeInfoDecoder.java:136) [bci: 128], stackSize=0, duringCall=false, locksSize=0, localsSize=11, rethrowException=false, bci=133, sourceFile=CodeInfoDecoder.java,  }
 
84|Return 

build structured graph: Caller: lookupTotalFrameSize (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, long, node count: 6
Callee: lookupCodeInfo (class: com.oracle.svm.core.code.CodeInfoAccess), par: CodeInfo, long, SimpleCodeInfoQueryResult, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=238, code=ResolvedJavaMethodBytecode<CodeInfoAccess.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=CodeInfoAccess.java,  }
 
5|MethodCallTarget 
6|Invoke#CodeInfoDecoder.lookupCodeInfo 
7|FrameState@6 - 7|FrameState@6 { sourceLine=239, code=ResolvedJavaMethodBytecode<CodeInfoAccess.lookupCodeInfo(CodeInfo, long, SimpleCodeInfoQueryResult)>, nodeSourcePosition=at com.oracle.svm.core.code.CodeInfoAccess.lookupCodeInfo(CodeInfoAccess.java:238) [bci: 3], stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=6, sourceFile=CodeInfoAccess.java,  }
 
8|Return 

build structured graph: Caller: logRecentEvents (class: com.oracle.svm.core.thread.VMOperationControl), par: Log, node count: 59
Callee: getName (class: com.oracle.svm.core.thread.VMOperation), par: , node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=54, code=ResolvedJavaMethodBytecode<VMOperation.getName()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=VMOperation.java,  }
 
3|LoadField#name - node represents a read of a static or instance field. 
4|Return 

build structured graph: Caller: dumpRecentVMOperations (class: com.oracle.svm.core.SubstrateUtil), par: Log, node count: 42
Callee: logRecentEvents (class: com.oracle.svm.core.thread.VMOperationControl), par: Log, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=197, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=VMOperationControl.java,  }
 
3|Constant(com.oracle.svm.core.thread.VMOperationControl, a -) - node represents a constant 
4|Constant(com.oracle.svm.core.thread.VMOperationControl$OpInProgress, a -) - node represents a constant 
5|LoadField#operation - node represents a read of a static or instance field. 
6|Constant(null, a -) - node represents a constant 
7|IsNull 
8|Begin 
9|Begin 
10|If 
11|Constant(No VMOperation in progress, a -) - node represents a constant 
12|IsNull 
13|BytecodeException#NULL_POINTER 
14|Begin 
15|Begin 
16|If 
17|FrameState@19 - 17|FrameState@19 { sourceLine=200, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:200) [bci: 19], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=19, sourceFile=VMOperationControl.java,  }
 
20|Pi 
21|MethodCallTarget 
22|Invoke#Log.string 
23|FrameState@22 - 23|FrameState@22 { sourceLine=200, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:200) [bci: 19], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=22, sourceFile=VMOperationControl.java,  }
 
24|IsNull 
25|BytecodeException#NULL_POINTER 
26|Begin 
27|Begin 
28|If 
29|FrameState@22 - 29|FrameState@22 { sourceLine=200, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:200) [bci: 22], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=22, sourceFile=VMOperationControl.java,  }
 
31|EndNode 
32|Merge 
33|EndNode 
34|ValuePhi(13 25 41 52 64 76 88 99 111 123 135 148 160 172 185 197, a -) 
35|Pi 
36|MethodCallTarget 
37|Invoke#Log.newline 
38|FrameState@25 - 38|FrameState@25 { sourceLine=200, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:200) [bci: 22], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=25, sourceFile=VMOperationControl.java,  }
 
40|Constant(VMOperation in progress: , a -) - node represents a constant 
41|BytecodeException#NULL_POINTER 
42|Begin 
43|Begin 
44|If 
45|FrameState@32 - 45|FrameState@32 { sourceLine=202, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:202) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=32, sourceFile=VMOperationControl.java,  }
 
47|EndNode 
48|Pi 
49|MethodCallTarget 
50|Invoke#Log.string 
51|FrameState@35 - 51|FrameState@35 { sourceLine=202, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:202) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=35, sourceFile=VMOperationControl.java,  }
 
52|BytecodeException#NULL_POINTER 
53|Begin 
54|Begin 
55|If 
56|FrameState@36 - 56|FrameState@36 { sourceLine=202, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:202) [bci: 36], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=36, sourceFile=VMOperationControl.java,  }
 
58|EndNode 
59|Pi 
60|MethodCallTarget 
61|Invoke#VMOperation.getName 
62|FrameState@39 - 62|FrameState@39 { sourceLine=202, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:202) [bci: 36], stackSize=2, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=39, sourceFile=VMOperationControl.java,  }
 
63|IsNull 
64|BytecodeException#NULL_POINTER 
65|Begin 
66|Begin 
67|If 
68|FrameState@39 - 68|FrameState@39 { sourceLine=202, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:202) [bci: 39], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=39, sourceFile=VMOperationControl.java,  }
 
70|EndNode 
71|Pi 
72|MethodCallTarget 
73|Invoke#Log.string 
74|FrameState@42 - 74|FrameState@42 { sourceLine=202, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:202) [bci: 39], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=42, sourceFile=VMOperationControl.java,  }
 
75|IsNull 
76|BytecodeException#NULL_POINTER 
77|Begin 
78|Begin 
79|If 
80|FrameState@42 - 80|FrameState@42 { sourceLine=202, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:202) [bci: 42], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=42, sourceFile=VMOperationControl.java,  }
 
82|EndNode 
83|Pi 
84|MethodCallTarget 
85|Invoke#Log.newline 
86|FrameState@45 - 86|FrameState@45 { sourceLine=202, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:202) [bci: 42], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=45, sourceFile=VMOperationControl.java,  }
 
87|Constant(  causesSafepoint: , a -) - node represents a constant 
88|BytecodeException#NULL_POINTER 
89|Begin 
90|Begin 
91|If 
92|FrameState@49 - 92|FrameState@49 { sourceLine=203, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:203) [bci: 49], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=49, sourceFile=VMOperationControl.java,  }
 
94|EndNode 
95|Pi 
96|MethodCallTarget 
97|Invoke#Log.string 
98|FrameState@52 - 98|FrameState@52 { sourceLine=203, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:203) [bci: 49], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=52, sourceFile=VMOperationControl.java,  }
 
99|BytecodeException#NULL_POINTER 
100|Begin 
101|Begin 
102|If 
103|FrameState@53 - 103|FrameState@53 { sourceLine=203, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:203) [bci: 53], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=53, sourceFile=VMOperationControl.java,  }
 
105|EndNode 
106|Pi 
107|MethodCallTarget 
108|Invoke#VMOperation.getCausesSafepoint 
109|FrameState@56 - 109|FrameState@56 { sourceLine=203, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:203) [bci: 53], stackSize=2, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=56, sourceFile=VMOperationControl.java,  }
 
110|IsNull 
111|BytecodeException#NULL_POINTER 
112|Begin 
113|Begin 
114|If 
115|FrameState@56 - 115|FrameState@56 { sourceLine=203, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:203) [bci: 56], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=56, sourceFile=VMOperationControl.java,  }
 
117|EndNode 
118|Pi 
119|MethodCallTarget 
120|Invoke#Log.bool 
121|FrameState@59 - 121|FrameState@59 { sourceLine=203, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:203) [bci: 56], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=59, sourceFile=VMOperationControl.java,  }
 
122|IsNull 
123|BytecodeException#NULL_POINTER 
124|Begin 
125|Begin 
126|If 
127|FrameState@59 - 127|FrameState@59 { sourceLine=203, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:203) [bci: 59], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=59, sourceFile=VMOperationControl.java,  }
 
129|EndNode 
130|Pi 
131|MethodCallTarget 
132|Invoke#Log.newline 
133|FrameState@62 - 133|FrameState@62 { sourceLine=203, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:203) [bci: 59], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=62, sourceFile=VMOperationControl.java,  }
 
134|Constant(  queuingThread: , a -) - node represents a constant 
135|BytecodeException#NULL_POINTER 
136|Begin 
137|Begin 
138|If 
139|FrameState@66 - 139|FrameState@66 { sourceLine=204, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:204) [bci: 66], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=66, sourceFile=VMOperationControl.java,  }
 
141|EndNode 
142|Pi 
143|MethodCallTarget 
144|Invoke#Log.string 
145|FrameState@69 - 145|FrameState@69 { sourceLine=204, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:204) [bci: 66], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=69, sourceFile=VMOperationControl.java,  }
 
146|LoadField#queueingThread - node represents a read of a static or instance field. 
147|IsNull 
148|BytecodeException#NULL_POINTER 
149|Begin 
150|Begin 
151|If 
152|FrameState@81 - 152|FrameState@81 { sourceLine=204, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:204) [bci: 81], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=81, sourceFile=VMOperationControl.java,  }
 
154|EndNode 
155|Pi 
156|MethodCallTarget 
157|Invoke#Log.zhex 
158|FrameState@84 - 158|FrameState@84 { sourceLine=204, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:204) [bci: 81], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=84, sourceFile=VMOperationControl.java,  }
 
159|IsNull 
160|BytecodeException#NULL_POINTER 
161|Begin 
162|Begin 
163|If 
164|FrameState@84 - 164|FrameState@84 { sourceLine=204, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:204) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=84, sourceFile=VMOperationControl.java,  }
 
166|EndNode 
167|Pi 
168|MethodCallTarget 
169|Invoke#Log.newline 
170|FrameState@87 - 170|FrameState@87 { sourceLine=204, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:204) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=87, sourceFile=VMOperationControl.java,  }
 
171|Constant(  executingThread: , a -) - node represents a constant 
172|BytecodeException#NULL_POINTER 
173|Begin 
174|Begin 
175|If 
176|FrameState@91 - 176|FrameState@91 { sourceLine=205, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:205) [bci: 91], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=91, sourceFile=VMOperationControl.java,  }
 
178|EndNode 
179|Pi 
180|MethodCallTarget 
181|Invoke#Log.string 
182|FrameState@94 - 182|FrameState@94 { sourceLine=205, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:205) [bci: 91], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=94, sourceFile=VMOperationControl.java,  }
 
183|LoadField#executingThread - node represents a read of a static or instance field. 
184|IsNull 
185|BytecodeException#NULL_POINTER 
186|Begin 
187|Begin 
188|If 
189|FrameState@106 - 189|FrameState@106 { sourceLine=205, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:205) [bci: 106], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=106, sourceFile=VMOperationControl.java,  }
 
191|EndNode 
192|Pi 
193|MethodCallTarget 
194|Invoke#Log.zhex 
195|FrameState@109 - 195|FrameState@109 { sourceLine=205, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:205) [bci: 106], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=109, sourceFile=VMOperationControl.java,  }
 
196|IsNull 
197|BytecodeException#NULL_POINTER 
198|Begin 
199|Begin 
200|If 
201|FrameState@109 - 201|FrameState@109 { sourceLine=205, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:205) [bci: 109], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=109, sourceFile=VMOperationControl.java,  }
 
203|EndNode 
204|Pi 
205|MethodCallTarget 
206|Invoke#Log.newline 
207|FrameState@112 - 207|FrameState@112 { sourceLine=205, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, nodeSourcePosition=at com.oracle.svm.core.thread.VMOperationControl.logRecentEvents(VMOperationControl.java:205) [bci: 109], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=112, sourceFile=VMOperationControl.java,  }
 
208|EndNode 
209|Merge 
210|EndNode 
211|FrameState@113 - 211|FrameState@113 { sourceLine=207, code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=113, sourceFile=VMOperationControl.java,  }
 
212|Return 
213|FrameState@-4[AFTER_EXCEPTION_BCI] - 213|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VMOperationControl.logRecentEvents(Log)>, stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
214|Unwind 

build structured graph: Caller: logRecentEvents (class: com.oracle.svm.core.thread.VMOperationControl), par: Log, node count: 59
Callee: getName (class: com.oracle.svm.core.thread.VMOperation), par: , node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=54, code=ResolvedJavaMethodBytecode<VMOperation.getName()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=VMOperation.java,  }
 
3|LoadField#name - node represents a read of a static or instance field. 
4|Return 
ForeignCall: isStatusNativeOrSafepoint, enterSlowPathTransitionFromNativeToNewStatus
ForeignCall: guarantee, enterSlowPathTransitionFromNativeToNewStatus
ForeignCall: isStatusIgnoreSafepoints, enterSlowPathTransitionFromNativeToNewStatus
ForeignCall: guarantee, enterSlowPathTransitionFromNativeToNewStatus
ForeignCall: incSlowPathFrozen, enterSlowPathTransitionFromNativeToNewStatus
ForeignCall: slowPathSafepointCheck, enterSlowPathTransitionFromNativeToNewStatus
ForeignCall: incSlowPathThawed, enterSlowPathTransitionFromNativeToNewStatus
ForeignCall: incSlowPathThawed, enterSlowPathTransitionFromNativeToNewStatus
ForeignCall: isStatusIgnoreSafepoints, enterSlowPathSafepointCheck
ForeignCall: setSafepointRequested, enterSlowPathSafepointCheck
ForeignCall: isStatusJava, enterSlowPathSafepointCheck
ForeignCall: guarantee, enterSlowPathSafepointCheck
ForeignCall: slowPathSafepointCheck, enterSlowPathSafepointCheck
ForeignCall: shouldNotReachHere, enterSlowPathSafepointCheck
Snippet 1: guarantee, throwCachedStackOverflowError
Snippet 1: guarantee, throwNewStackOverflowError
Snippet 1: isAllocationDisallowed, throwNewStackOverflowError
Snippet 1: makeYellowZoneAvailable, throwNewStackOverflowError
Snippet 1: newStackOverflowError, throwNewStackOverflowError
Snippet 1: protectYellowZone, throwNewStackOverflowError
Snippet 1: protectYellowZone, throwNewStackOverflowError
Snippet 1: newStackOverflowError0, newStackOverflowError
Snippet 1: <init>, newStackOverflowError0
ForeignCall: makeYellowZoneAvailable, slowPathMonitorEnter
ForeignCall: pauseRecurringCallback, slowPathMonitorEnter
ForeignCall: guaranteeOkayToBlock, slowPathMonitorEnter
ForeignCall: monitorEnter, slowPathMonitorEnter
ForeignCall: shouldNotReachHere, slowPathMonitorEnter
ForeignCall: resumeRecurringCallbackAtNextSafepoint, slowPathMonitorEnter
ForeignCall: protectYellowZone, slowPathMonitorEnter
ForeignCall: resumeRecurringCallbackAtNextSafepoint, slowPathMonitorEnter
ForeignCall: protectYellowZone, slowPathMonitorEnter

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: guaranteeOkayToBlock (class: com.oracle.svm.core.thread.VMOperationControl), par: String, node count: 12
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 
ForeignCall: makeYellowZoneAvailable, slowPathMonitorExit
ForeignCall: pauseRecurringCallback, slowPathMonitorExit
ForeignCall: monitorExit, slowPathMonitorExit
ForeignCall: shouldNotReachHere, slowPathMonitorExit
ForeignCall: resumeRecurringCallbackAtNextSafepoint, slowPathMonitorExit
ForeignCall: protectYellowZone, slowPathMonitorExit
ForeignCall: resumeRecurringCallbackAtNextSafepoint, slowPathMonitorExit
ForeignCall: protectYellowZone, slowPathMonitorExit
Snippet 1: <init>, hubErrorStub
Snippet 1: getLayoutEncoding, hubErrorStub
Snippet 1: isInstance, hubErrorStub
Snippet 1: <init>, hubErrorStub
Snippet 1: isInstantiated, hubErrorStub
Snippet 1: <init>, hubErrorStub
Snippet 1: append, hubErrorStub
Snippet 1: toClass, hubErrorStub
Snippet 1: getTypeName, hubErrorStub
Snippet 1: append, hubErrorStub
Snippet 1: append, hubErrorStub
Snippet 1: append, hubErrorStub
Snippet 1: toString, hubErrorStub
Snippet 1: <init>, hubErrorStub
Snippet 1: shouldNotReachHere, hubErrorStub
ForeignCall: <init>, slowPathNewArray
ForeignCall: getGCImpl, slowPathNewArray
ForeignCall: dynamicHubFromObjectHeader, slowPathNewArray
ForeignCall: slowPathNewArrayWithoutAllocating, slowPathNewArray
ForeignCall: getGCImpl, slowPathNewArray
ForeignCall: runSlowPathHooks, slowPathNewArray

build structured graph: Caller: samplePhysicalMemorySize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 3
Callee: getGCImpl (class: com.oracle.svm.core.genscavenge.HeapImpl), par: , node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=236, code=ResolvedJavaMethodBytecode<HeapImpl.getGCImpl()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=HeapImpl.java,  }
 
3|LoadField#gcImpl - node represents a read of a static or instance field. 
4|Return 

build structured graph: Caller: samplePhysicalMemorySize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 26
Callee: getYoungUsedBytes (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 7
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=376, code=ResolvedJavaMethodBytecode<HeapPolicy.getYoungUsedBytes()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapPolicy.java,  }
 
2|Constant(com.oracle.svm.core.jdk.UninterruptibleUtils$AtomicUnsigned, a -) - node represents a constant 
3|MethodCallTarget 
4|Invoke#UninterruptibleUtils$AtomicWord.get 
5|FrameState@6 - 5|FrameState@6 { sourceLine=376, code=ResolvedJavaMethodBytecode<HeapPolicy.getYoungUsedBytes()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getYoungUsedBytes(HeapPolicy.java:376) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=6, sourceFile=HeapPolicy.java,  }
 
6|Return 

build structured graph: Caller: samplePhysicalMemorySize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 29
Callee: getAllocationBeforePhysicalMemorySize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 7
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=187, code=ResolvedJavaMethodBytecode<HeapPolicy.getAllocationBeforePhysicalMemorySize()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapPolicy.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Long, a -) - node represents a constant 
4|LogicConstant 
5|Constant(1048576, i64) - node represents a constant 
6|Return 

build structured graph: Caller: size (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 2
Callee: support (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 6
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=46, code=ResolvedJavaMethodBytecode<PhysicalMemory.support()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=PhysicalMemory.java,  }
 
2|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
3|Constant(com.oracle.svm.core.posix.linux.LinuxPhysicalMemory$PhysicalMemorySupportImpl, a -) - node represents a constant 
4|LogicConstant 
5|Return 

build structured graph: Caller: samplePhysicalMemorySize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 40
Callee: size (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 17
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=53, code=ResolvedJavaMethodBytecode<PhysicalMemory.size()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=PhysicalMemory.java,  }
 
2|MethodCallTarget 
3|Invoke#PhysicalMemory.support 
4|FrameState@3 - 4|FrameState@3 { sourceLine=53, code=ResolvedJavaMethodBytecode<PhysicalMemory.size()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.size(PhysicalMemory.java:53) [bci: 0], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=3, sourceFile=PhysicalMemory.java,  }
 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@3 - 10|FrameState@3 { sourceLine=53, code=ResolvedJavaMethodBytecode<PhysicalMemory.size()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.size(PhysicalMemory.java:53) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=true, bci=3, sourceFile=PhysicalMemory.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#PhysicalMemory$PhysicalMemorySupport.size 
16|FrameState@8 - 16|FrameState@8 { sourceLine=53, code=ResolvedJavaMethodBytecode<PhysicalMemory.size()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.size(PhysicalMemory.java:53) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=8, sourceFile=PhysicalMemory.java,  }
 
17|Return 
18|Unwind 

build structured graph: Caller: runSlowPathHooks (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: , node count: 2
Callee: samplePhysicalMemorySize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 45
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=381, code=ResolvedJavaMethodBytecode<HeapPolicy.samplePhysicalMemorySize()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapPolicy.java,  }
 
2|Constant(com.oracle.svm.core.genscavenge.HeapImpl, a -) - node represents a constant 
3|MethodCallTarget 
4|Invoke#HeapImpl.getGCImpl 
5|FrameState@6 - 5|FrameState@6 { sourceLine=381, code=ResolvedJavaMethodBytecode<HeapPolicy.samplePhysicalMemorySize()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.samplePhysicalMemorySize(HeapPolicy.java:381) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=6, sourceFile=HeapPolicy.java,  }
 
6|IsNull 
7|BytecodeException#NULL_POINTER 
8|Begin 
9|Begin 
10|If 
11|FrameState@6 - 11|FrameState@6 { sourceLine=381, code=ResolvedJavaMethodBytecode<HeapPolicy.samplePhysicalMemorySize()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.samplePhysicalMemorySize(HeapPolicy.java:381) [bci: 6], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=true, bci=6, sourceFile=HeapPolicy.java,  }
 
14|Pi 
15|MethodCallTarget 
16|Invoke#GCImpl.getCollectionEpoch 
17|FrameState@9 - 17|FrameState@9 { sourceLine=381, code=ResolvedJavaMethodBytecode<HeapPolicy.samplePhysicalMemorySize()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.samplePhysicalMemorySize(HeapPolicy.java:381) [bci: 6], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=9, sourceFile=HeapPolicy.java,  }
 
18|Constant(0, i64) - node represents a constant 
19|Constant(1, i32) - node represents a constant 
20|Constant(0, i32) - node represents a constant 
21|== 
22|Conditional 
23|Begin 
24|Begin 
25|If 
26|MethodCallTarget 
27|Invoke#HeapPolicy.getYoungUsedBytes 
28|FrameState@26 - 28|FrameState@26 { sourceLine=382, code=ResolvedJavaMethodBytecode<HeapPolicy.samplePhysicalMemorySize()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.samplePhysicalMemorySize(HeapPolicy.java:382) [bci: 23], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=26, sourceFile=HeapPolicy.java,  }
 
29|MethodCallTarget 
30|Invoke#HeapPolicy.getAllocationBeforePhysicalMemorySize 
31|FrameState@29 - 31|FrameState@29 { sourceLine=382, code=ResolvedJavaMethodBytecode<HeapPolicy.samplePhysicalMemorySize()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.samplePhysicalMemorySize(HeapPolicy.java:382) [bci: 26], stackSize=2, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=29, sourceFile=HeapPolicy.java,  }
 
32||<| 
33|Conditional 
34|EndNode 
35|Merge 
36|EndNode 
37|Begin 
38|Begin 
39|If 
40|MethodCallTarget 
41|Invoke#PhysicalMemory.size 
42|FrameState@40 - 42|FrameState@40 { sourceLine=383, code=ResolvedJavaMethodBytecode<HeapPolicy.samplePhysicalMemorySize()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.samplePhysicalMemorySize(HeapPolicy.java:383) [bci: 37], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=40, sourceFile=HeapPolicy.java,  }
 
43|EndNode 
44|FrameState@41 - 44|FrameState@41 { sourceLine=385, code=ResolvedJavaMethodBytecode<HeapPolicy.samplePhysicalMemorySize()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=41, sourceFile=HeapPolicy.java,  }
 
45|Return 
46|Unwind 

build structured graph: Caller: samplePhysicalMemorySize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 3
Callee: getGCImpl (class: com.oracle.svm.core.genscavenge.HeapImpl), par: , node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=236, code=ResolvedJavaMethodBytecode<HeapImpl.getGCImpl()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=HeapImpl.java,  }
 
3|LoadField#gcImpl - node represents a read of a static or instance field. 
4|Return 

build structured graph: Caller: samplePhysicalMemorySize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 26
Callee: getYoungUsedBytes (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 7
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=376, code=ResolvedJavaMethodBytecode<HeapPolicy.getYoungUsedBytes()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapPolicy.java,  }
 
2|Constant(com.oracle.svm.core.jdk.UninterruptibleUtils$AtomicUnsigned, a -) - node represents a constant 
3|MethodCallTarget 
4|Invoke#UninterruptibleUtils$AtomicWord.get 
5|FrameState@6 - 5|FrameState@6 { sourceLine=376, code=ResolvedJavaMethodBytecode<HeapPolicy.getYoungUsedBytes()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getYoungUsedBytes(HeapPolicy.java:376) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=6, sourceFile=HeapPolicy.java,  }
 
6|Return 

build structured graph: Caller: samplePhysicalMemorySize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 29
Callee: getAllocationBeforePhysicalMemorySize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 7
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=187, code=ResolvedJavaMethodBytecode<HeapPolicy.getAllocationBeforePhysicalMemorySize()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapPolicy.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Long, a -) - node represents a constant 
4|LogicConstant 
5|Constant(1048576, i64) - node represents a constant 
6|Return 

build structured graph: Caller: size (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 2
Callee: support (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 6
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=46, code=ResolvedJavaMethodBytecode<PhysicalMemory.support()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=PhysicalMemory.java,  }
 
2|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
3|Constant(com.oracle.svm.core.posix.linux.LinuxPhysicalMemory$PhysicalMemorySupportImpl, a -) - node represents a constant 
4|LogicConstant 
5|Return 

build structured graph: Caller: samplePhysicalMemorySize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 40
Callee: size (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 17
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=53, code=ResolvedJavaMethodBytecode<PhysicalMemory.size()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=PhysicalMemory.java,  }
 
2|MethodCallTarget 
3|Invoke#PhysicalMemory.support 
4|FrameState@3 - 4|FrameState@3 { sourceLine=53, code=ResolvedJavaMethodBytecode<PhysicalMemory.size()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.size(PhysicalMemory.java:53) [bci: 0], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=3, sourceFile=PhysicalMemory.java,  }
 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@3 - 10|FrameState@3 { sourceLine=53, code=ResolvedJavaMethodBytecode<PhysicalMemory.size()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.size(PhysicalMemory.java:53) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=true, bci=3, sourceFile=PhysicalMemory.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#PhysicalMemory$PhysicalMemorySupport.size 
16|FrameState@8 - 16|FrameState@8 { sourceLine=53, code=ResolvedJavaMethodBytecode<PhysicalMemory.size()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.size(PhysicalMemory.java:53) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=8, sourceFile=PhysicalMemory.java,  }
 
17|Return 
18|Unwind 

build structured graph: Caller: size (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 2
Callee: support (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 6
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=46, code=ResolvedJavaMethodBytecode<PhysicalMemory.support()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=PhysicalMemory.java,  }
 
2|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
3|Constant(com.oracle.svm.core.posix.linux.LinuxPhysicalMemory$PhysicalMemorySupportImpl, a -) - node represents a constant 
4|LogicConstant 
5|Return 

build structured graph: Caller: allocateNewArray (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: Class, int, ThreadLocalAllocation$Descriptor, boolean, node count: 11
Callee: string (class: com.oracle.svm.core.log.Log$NoopLog), par: String, node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=393, code=ResolvedJavaMethodBytecode<Log$NoopLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Log.java,  }
 
4|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 6
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 69
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 86
Callee: newline (class: com.oracle.svm.core.log.RealLog), par: , node count: 25
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=178, code=ResolvedJavaMethodBytecode<RealLog.newline()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
3|Constant([B, a -) - node represents a constant 
4|MethodCallTarget 
5|Invoke#Log.string 
6|FrameState@7 - 6|FrameState@7 { sourceLine=178, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:178) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
7|LoadField#autoflush - node represents a read of a static or instance field. 
8|Constant(0, i32) - node represents a constant 
9|== 
10|Begin 
11|Begin 
12|If 
13|MethodCallTarget 
14|Invoke#RealLog.flush 
15|FrameState@19 - 15|FrameState@19 { sourceLine=180, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:180) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=19, sourceFile=RealLog.java,  }
 
16|EndNode 
17|Merge 
18|EndNode 
19|FrameState@20 - 19|FrameState@20 { sourceLine=182, code=ResolvedJavaMethodBytecode<RealLog.newline()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=20, sourceFile=RealLog.java,  }
 
20|LoadField#indent - node represents a read of a static or instance field. 
21|MethodCallTarget 
22|Invoke#RealLog.spaces 
23|FrameState@28 - 23|FrameState@28 { sourceLine=182, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:182) [bci: 25], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=28, sourceFile=RealLog.java,  }
 
24|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 183
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 202
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: exitIfAllocationDisallowed (class: com.oracle.svm.core.genscavenge.HeapImpl), par: String, String, node count: 13
Callee: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 218
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NoAllocationVerifier.java,  }
 
4|Constant(com.oracle.svm.core.log.RealLog, a -) - node represents a constant 
5|Constant([NoAllocationVerifier detected disallowed allocation: , a -) - node represents a constant 
6|MethodCallTarget 
7|Invoke#RealLog.string 
8|FrameState@8 - 8|FrameState@8 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=8, sourceFile=NoAllocationVerifier.java,  }
 
9|IsNull 
10|BytecodeException#NULL_POINTER 
11|Begin 
12|Begin 
13|If 
14|FrameState@9 - 14|FrameState@9 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=9, sourceFile=NoAllocationVerifier.java,  }
 
17|Pi 
18|MethodCallTarget 
19|Invoke#Log.string 
20|FrameState@12 - 20|FrameState@12 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=12, sourceFile=NoAllocationVerifier.java,  }
 
21|Constant(: , a -) - node represents a constant 
22|IsNull 
23|BytecodeException#NULL_POINTER 
24|Begin 
25|Begin 
26|If 
27|FrameState@14 - 27|FrameState@14 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 14], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=14, sourceFile=NoAllocationVerifier.java,  }
 
29|EndNode 
30|Merge 
31|EndNode 
32|ValuePhi(10 23 38 50 101 118 133 147 163 178 188 207 223 230, a -) 
33|Pi 
34|MethodCallTarget 
35|Invoke#Log.string 
36|FrameState@17 - 36|FrameState@17 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 14], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=17, sourceFile=NoAllocationVerifier.java,  }
 
37|IsNull 
38|BytecodeException#NULL_POINTER 
39|Begin 
40|Begin 
41|If 
42|FrameState@18 - 42|FrameState@18 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 18], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=18, sourceFile=NoAllocationVerifier.java,  }
 
44|EndNode 
45|Pi 
46|MethodCallTarget 
47|Invoke#Log.string 
48|FrameState@21 - 48|FrameState@21 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 18], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=21, sourceFile=NoAllocationVerifier.java,  }
 
49|IsNull 
50|BytecodeException#NULL_POINTER 
51|Begin 
52|Begin 
53|If 
54|FrameState@21 - 54|FrameState@21 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 21], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=21, sourceFile=NoAllocationVerifier.java,  }
 
56|EndNode 
57|Pi 
58|MethodCallTarget 
59|Invoke#Log.newline 
60|FrameState@24 - 60|FrameState@24 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 21], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=24, sourceFile=NoAllocationVerifier.java,  }
 
61|Constant(com.oracle.svm.core.threadlocal.FastThreadLocalObject, a -) - node represents a constant 
62|ReadIsolateThreadFloating 
63|LoadVMThreadLocal 
64|Constant(null, a -) - node represents a constant 
65|IsNull 
66|Begin 
67|Begin 
68|If 
69|Constant([NoAllocationVerifier stack: , a -) - node represents a constant 
70|MethodCallTarget 
71|Invoke#RealLog.string 
72|FrameState@42 - 72|FrameState@42 { sourceLine=53, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:53) [bci: 39], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=42, sourceFile=NoAllocationVerifier.java,  }
 
73|LoadVMThreadLocal 
74|LogicConstant 
76|EndNode 
77|LoopBegin 
78|ValuePhi(73 181, a -) 
79|FrameState@53 - 79|FrameState@53 { sourceLine=54, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=53, sourceFile=NoAllocationVerifier.java,  }
 
80|IsNull 
81|Begin 
83|LoopExit 
84|ValueProxy 
85|FrameState@92 - 85|FrameState@92 { sourceLine=57, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:57) [bci: 92], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=92, sourceFile=NoAllocationVerifier.java,  }
 
86|If 
87|MethodCallTarget 
88|Invoke#RealLog.newline 
89|FrameState@63 - 89|FrameState@63 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 60], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=63, sourceFile=NoAllocationVerifier.java,  }
 
90|Constant(  , a -) - node represents a constant 
91|IsNull 
92|BytecodeException#NULL_POINTER 
93|Begin 
94|Begin 
95|If 
96|FrameState@65 - 96|FrameState@65 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 65], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=65, sourceFile=NoAllocationVerifier.java,  }
 
98|EndNode 
99|LoopExit 
100|ValueProxy 
101|ValueProxy 
102|FrameState@-4[AFTER_EXCEPTION_BCI] - 102|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
103|Pi 
104|MethodCallTarget 
105|Invoke#Log.string 
106|FrameState@68 - 106|FrameState@68 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 65], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=68, sourceFile=NoAllocationVerifier.java,  }
 
107|Constant(  reason: , a -) - node represents a constant 
108|IsNull 
109|BytecodeException#NULL_POINTER 
110|Begin 
111|Begin 
112|If 
113|FrameState@70 - 113|FrameState@70 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 70], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=70, sourceFile=NoAllocationVerifier.java,  }
 
115|EndNode 
116|LoopExit 
117|ValueProxy 
118|ValueProxy 
119|FrameState@-4[AFTER_EXCEPTION_BCI] - 119|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
120|Pi 
121|MethodCallTarget 
122|Invoke#Log.string 
123|FrameState@73 - 123|FrameState@73 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 70], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=73, sourceFile=NoAllocationVerifier.java,  }
 
124|BytecodeException#NULL_POINTER 
125|Begin 
126|Begin 
127|If 
128|FrameState@74 - 128|FrameState@74 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 74], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=74, sourceFile=NoAllocationVerifier.java,  }
 
130|EndNode 
131|LoopExit 
132|ValueProxy 
133|ValueProxy 
134|FrameState@-4[AFTER_EXCEPTION_BCI] - 134|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
135|Pi 
136|LoadField#reason - node represents a read of a static or instance field. 
137|IsNull 
138|BytecodeException#NULL_POINTER 
139|Begin 
140|Begin 
141|If 
142|FrameState@77 - 142|FrameState@77 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 77], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=77, sourceFile=NoAllocationVerifier.java,  }
 
144|EndNode 
145|LoopExit 
146|ValueProxy 
147|ValueProxy 
148|FrameState@-4[AFTER_EXCEPTION_BCI] - 148|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
149|Pi 
150|MethodCallTarget 
151|Invoke#Log.string 
152|FrameState@80 - 152|FrameState@80 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 77], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=80, sourceFile=NoAllocationVerifier.java,  }
 
153|IsNull 
154|BytecodeException#NULL_POINTER 
155|Begin 
156|Begin 
157|If 
158|FrameState@80 - 158|FrameState@80 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 80], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=80, sourceFile=NoAllocationVerifier.java,  }
 
160|EndNode 
161|LoopExit 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|Pi 
166|MethodCallTarget 
167|Invoke#Log.newline 
168|FrameState@83 - 168|FrameState@83 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 80], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=83, sourceFile=NoAllocationVerifier.java,  }
 
169|BytecodeException#NULL_POINTER 
170|Begin 
171|Begin 
172|If 
173|FrameState@85 - 173|FrameState@85 { sourceLine=54, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:54) [bci: 85], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=85, sourceFile=NoAllocationVerifier.java,  }
 
175|EndNode 
176|LoopExit 
177|ValueProxy 
178|ValueProxy 
179|FrameState@-4[AFTER_EXCEPTION_BCI] - 179|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
180|Pi 
181|LoadField#next - node represents a read of a static or instance field. 
182|LoopEnd 
183|Constant(], a -) - node represents a constant 
184|MethodCallTarget 
185|Invoke#RealLog.string 
186|FrameState@100 - 186|FrameState@100 { sourceLine=57, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:57) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=100, sourceFile=NoAllocationVerifier.java,  }
 
187|IsNull 
188|BytecodeException#NULL_POINTER 
189|Begin 
190|Begin 
191|If 
192|FrameState@100 - 192|FrameState@100 { sourceLine=57, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:57) [bci: 100], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=100, sourceFile=NoAllocationVerifier.java,  }
 
194|EndNode 
195|Pi 
196|MethodCallTarget 
197|Invoke#Log.newline 
198|FrameState@103 - 198|FrameState@103 { sourceLine=57, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:57) [bci: 100], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=103, sourceFile=NoAllocationVerifier.java,  }
 
199|EndNode 
200|Merge 
201|EndNode 
202|FrameState@104 - 202|FrameState@104 { sourceLine=59, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=104, sourceFile=NoAllocationVerifier.java,  }
 
203|MethodCallTarget 
204|Invoke#RealLog.string 
205|FrameState@112 - 205|FrameState@112 { sourceLine=59, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:59) [bci: 109], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=112, sourceFile=NoAllocationVerifier.java,  }
 
206|IsNull 
207|BytecodeException#NULL_POINTER 
208|Begin 
209|Begin 
210|If 
211|FrameState@112 - 211|FrameState@112 { sourceLine=59, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:59) [bci: 112], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=112, sourceFile=NoAllocationVerifier.java,  }
 
213|EndNode 
214|Pi 
215|MethodCallTarget 
216|Invoke#Log.newline 
217|FrameState@115 - 217|FrameState@115 { sourceLine=59, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:59) [bci: 112], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=115, sourceFile=NoAllocationVerifier.java,  }
 
218|Constant(Attempt to allocate while allocation was explicitly disabled using a NoAllocationVerifier, a -) - node represents a constant 
219|MethodCallTarget 
220|Invoke#VMError.shouldNotReachHere 
221|FrameState@121 - 221|FrameState@121 { sourceLine=61, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:61) [bci: 118], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=121, sourceFile=NoAllocationVerifier.java,  }
 
222|IsNull 
223|BytecodeException#NULL_POINTER 
224|Begin 
225|Begin 
226|If 
227|FrameState@121 - 227|FrameState@121 { sourceLine=61, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:61) [bci: 121], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=121, sourceFile=NoAllocationVerifier.java,  }
 
229|EndNode 
230|Pi 
232|EndNode 
233|FrameState@-4[AFTER_EXCEPTION_BCI] - 233|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
234|Unwind 

build structured graph: Caller: allocateNewArray (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: Class, int, ThreadLocalAllocation$Descriptor, boolean, node count: 200
Callee: exitIfAllocationDisallowed (class: com.oracle.svm.core.genscavenge.HeapImpl), par: String, String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=252, code=ResolvedJavaMethodBytecode<HeapImpl.exitIfAllocationDisallowed(String, String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=HeapImpl.java,  }
 
4|Constant(com.oracle.svm.core.genscavenge.HeapImpl, a -) - node represents a constant 
5|MethodCallTarget 
6|Invoke#HeapImpl.isAllocationDisallowed 
7|FrameState@6 - 7|FrameState@6 { sourceLine=252, code=ResolvedJavaMethodBytecode<HeapImpl.exitIfAllocationDisallowed(String, String)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapImpl.exitIfAllocationDisallowed(HeapImpl.java:252) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=6, sourceFile=HeapImpl.java,  }
 
8|Constant(0, i32) - node represents a constant 
9|== 
10|Begin 
11|Begin 
12|If 
13|MethodCallTarget 
14|Invoke#NoAllocationVerifier.exit 
15|FrameState@14 - 15|FrameState@14 { sourceLine=255, code=ResolvedJavaMethodBytecode<HeapImpl.exitIfAllocationDisallowed(String, String)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapImpl.exitIfAllocationDisallowed(HeapImpl.java:253) [bci: 11], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=14, sourceFile=HeapImpl.java,  }
 
16|EndNode 
17|Merge 
18|EndNode 
19|FrameState@14 - 19|FrameState@14 { sourceLine=255, code=ResolvedJavaMethodBytecode<HeapImpl.exitIfAllocationDisallowed(String, String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=14, sourceFile=HeapImpl.java,  }
 
20|Return 

build structured graph: Caller: allocateNewArray (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: Class, int, ThreadLocalAllocation$Descriptor, boolean, node count: 209
Callee: getHeapPolicy (class: com.oracle.svm.core.genscavenge.HeapImpl), par: , node count: 6
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=297, code=ResolvedJavaMethodBytecode<HeapImpl.getHeapPolicy()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=HeapImpl.java,  }
 
3|Constant(com.oracle.svm.core.genscavenge.HeapImpl, a -) - node represents a constant 
4|Constant(com.oracle.svm.core.genscavenge.HeapPolicy, a -) - node represents a constant 
5|Return 

build structured graph: Caller: getXmx (class: com.oracle.svm.core.option.XOptions), par: , node count: 2
Callee: singleton (class: com.oracle.svm.core.option.XOptions), par: , node count: 6
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<XOptions.singleton()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=XOptions.java,  }
 
2|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
3|Constant(com.oracle.svm.core.option.XOptions, a -) - node represents a constant 
4|LogicConstant 
5|Return 

build structured graph: Caller: getMaximumHeapSize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 13
Callee: getXmx (class: com.oracle.svm.core.option.XOptions), par: , node count: 15
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=57, code=ResolvedJavaMethodBytecode<XOptions.getXmx()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=XOptions.java,  }
 
2|MethodCallTarget 
3|Invoke#XOptions.singleton 
4|FrameState@3 - 4|FrameState@3 { sourceLine=57, code=ResolvedJavaMethodBytecode<XOptions.getXmx()>, nodeSourcePosition=at com.oracle.svm.core.option.XOptions.getXmx(XOptions.java:57) [bci: 0], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=3, sourceFile=XOptions.java,  }
 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@3 - 10|FrameState@3 { sourceLine=57, code=ResolvedJavaMethodBytecode<XOptions.getXmx()>, nodeSourcePosition=at com.oracle.svm.core.option.XOptions.getXmx(XOptions.java:57) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=true, bci=3, sourceFile=XOptions.java,  }
 
13|Pi 
14|LoadField#xmx - node represents a read of a static or instance field. 
15|Return 
16|Unwind 

build structured graph: Caller: setMaximumHeapSize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: UnsignedWord, node count: 5
Callee: string (class: com.oracle.svm.core.log.Log$NoopLog), par: String, node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=393, code=ResolvedJavaMethodBytecode<Log$NoopLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Log.java,  }
 
4|Return 

build structured graph: Caller: getMaximumHeapSize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 47
Callee: setMaximumHeapSize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: UnsignedWord, node count: 86
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=279, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=HeapPolicy.java,  }
 
3|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
4|Constant([HeapPolicy.setMaximumHeapSize:, a -) - node represents a constant 
5|MethodCallTarget 
6|Invoke#Log$NoopLog.string 
7|FrameState@8 - 7|FrameState@8 { sourceLine=279, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:279) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=8, sourceFile=HeapPolicy.java,  }
 
8|LoadField#maximumHeapSize - node represents a read of a static or instance field. 
9|StoreField#maximumHeapSize - node represents a write to a static or instance field. 
10|FrameState@17 - 10|FrameState@17 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:281) [bci: 14], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=17, sourceFile=HeapPolicy.java,  }
 
11|Constant(  old: , a -) - node represents a constant 
12|IsNull 
13|BytecodeException#NULL_POINTER 
14|Begin 
15|Begin 
16|If 
17|FrameState@20 - 17|FrameState@20 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=20, sourceFile=HeapPolicy.java,  }
 
20|Pi 
21|MethodCallTarget 
22|Invoke#Log.string 
23|FrameState@23 - 23|FrameState@23 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=HeapPolicy.java,  }
 
24|IsNull 
25|BytecodeException#NULL_POINTER 
26|Begin 
27|Begin 
28|If 
29|FrameState@24 - 29|FrameState@24 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 24], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=24, sourceFile=HeapPolicy.java,  }
 
31|EndNode 
32|Merge 
33|EndNode 
34|ValuePhi(13 25 41 54 67 79, a -) 
35|Pi 
36|MethodCallTarget 
37|Invoke#Log.unsigned 
38|FrameState@27 - 38|FrameState@27 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 24], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=27, sourceFile=HeapPolicy.java,  }
 
39|Constant(  new: , a -) - node represents a constant 
40|IsNull 
41|BytecodeException#NULL_POINTER 
42|Begin 
43|Begin 
44|If 
45|FrameState@29 - 45|FrameState@29 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 29], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=29, sourceFile=HeapPolicy.java,  }
 
47|EndNode 
48|Pi 
49|MethodCallTarget 
50|Invoke#Log.string 
51|FrameState@32 - 51|FrameState@32 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 29], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=32, sourceFile=HeapPolicy.java,  }
 
52|LoadField#maximumHeapSize - node represents a read of a static or instance field. 
53|IsNull 
54|BytecodeException#NULL_POINTER 
55|Begin 
56|Begin 
57|If 
58|FrameState@35 - 58|FrameState@35 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 35], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=35, sourceFile=HeapPolicy.java,  }
 
60|EndNode 
61|Pi 
62|MethodCallTarget 
63|Invoke#Log.unsigned 
64|FrameState@38 - 64|FrameState@38 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 35], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=38, sourceFile=HeapPolicy.java,  }
 
65|Constant( ], a -) - node represents a constant 
66|IsNull 
67|BytecodeException#NULL_POINTER 
68|Begin 
69|Begin 
70|If 
71|FrameState@40 - 71|FrameState@40 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 40], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=40, sourceFile=HeapPolicy.java,  }
 
73|EndNode 
74|Pi 
75|MethodCallTarget 
76|Invoke#Log.string 
77|FrameState@43 - 77|FrameState@43 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 40], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=43, sourceFile=HeapPolicy.java,  }
 
78|IsNull 
79|BytecodeException#NULL_POINTER 
80|Begin 
81|Begin 
82|If 
83|FrameState@43 - 83|FrameState@43 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 43], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=43, sourceFile=HeapPolicy.java,  }
 
85|EndNode 
86|Pi 
87|MethodCallTarget 
88|Invoke#Log.newline 
89|FrameState@46 - 89|FrameState@46 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 43], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=46, sourceFile=HeapPolicy.java,  }
 
90|Return 
91|FrameState@-4[AFTER_EXCEPTION_BCI] - 91|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
92|Unwind 

build structured graph: Caller: hasSize (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 2
Callee: support (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 6
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=46, code=ResolvedJavaMethodBytecode<PhysicalMemory.support()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=PhysicalMemory.java,  }
 
2|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
3|Constant(com.oracle.svm.core.posix.linux.LinuxPhysicalMemory$PhysicalMemorySupportImpl, a -) - node represents a constant 
4|LogicConstant 
5|Return 

build structured graph: Caller: getMaximumHeapSize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 55
Callee: hasSize (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 17
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=58, code=ResolvedJavaMethodBytecode<PhysicalMemory.hasSize()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=PhysicalMemory.java,  }
 
2|MethodCallTarget 
3|Invoke#PhysicalMemory.support 
4|FrameState@3 - 4|FrameState@3 { sourceLine=58, code=ResolvedJavaMethodBytecode<PhysicalMemory.hasSize()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.hasSize(PhysicalMemory.java:58) [bci: 0], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=3, sourceFile=PhysicalMemory.java,  }
 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@3 - 10|FrameState@3 { sourceLine=58, code=ResolvedJavaMethodBytecode<PhysicalMemory.hasSize()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.hasSize(PhysicalMemory.java:58) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=true, bci=3, sourceFile=PhysicalMemory.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#PhysicalMemory$PhysicalMemorySupport.hasSize 
16|FrameState@8 - 16|FrameState@8 { sourceLine=58, code=ResolvedJavaMethodBytecode<PhysicalMemory.hasSize()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.hasSize(PhysicalMemory.java:58) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=8, sourceFile=PhysicalMemory.java,  }
 
17|Return 
18|Unwind 

build structured graph: Caller: size (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 2
Callee: support (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 6
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=46, code=ResolvedJavaMethodBytecode<PhysicalMemory.support()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=PhysicalMemory.java,  }
 
2|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
3|Constant(com.oracle.svm.core.posix.linux.LinuxPhysicalMemory$PhysicalMemorySupportImpl, a -) - node represents a constant 
4|LogicConstant 
5|Return 

build structured graph: Caller: getMaximumHeapSize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 62
Callee: size (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 17
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=53, code=ResolvedJavaMethodBytecode<PhysicalMemory.size()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=PhysicalMemory.java,  }
 
2|MethodCallTarget 
3|Invoke#PhysicalMemory.support 
4|FrameState@3 - 4|FrameState@3 { sourceLine=53, code=ResolvedJavaMethodBytecode<PhysicalMemory.size()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.size(PhysicalMemory.java:53) [bci: 0], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=3, sourceFile=PhysicalMemory.java,  }
 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@3 - 10|FrameState@3 { sourceLine=53, code=ResolvedJavaMethodBytecode<PhysicalMemory.size()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.size(PhysicalMemory.java:53) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=true, bci=3, sourceFile=PhysicalMemory.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#PhysicalMemory$PhysicalMemorySupport.size 
16|FrameState@8 - 16|FrameState@8 { sourceLine=53, code=ResolvedJavaMethodBytecode<PhysicalMemory.size()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.size(PhysicalMemory.java:53) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=8, sourceFile=PhysicalMemory.java,  }
 
17|Return 
18|Unwind 

build structured graph: Caller: getMaximumHeapSizePercent (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 3
Callee: getValue (class: com.oracle.svm.core.option.RuntimeOptionKey), par: , node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=46, code=ResolvedJavaMethodBytecode<RuntimeOptionKey.getValue()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=RuntimeOptionKey.java,  }
 
3|Constant(com.oracle.svm.core.option.RuntimeOptionValues, a -) - node represents a constant 
4|MethodCallTarget 
5|Invoke#OptionKey.getValue 
6|FrameState@7 - 6|FrameState@7 { sourceLine=46, code=ResolvedJavaMethodBytecode<RuntimeOptionKey.getValue()>, nodeSourcePosition=at com.oracle.svm.core.option.RuntimeOptionKey.getValue(RuntimeOptionKey.java:46) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=7, sourceFile=RuntimeOptionKey.java,  }
 
7|Return 

build structured graph: Caller: getMaximumHeapSize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 65
Callee: getMaximumHeapSizePercent (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 48
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=175, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSizePercent()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=HeapPolicy.java,  }
 
2|Constant(com.oracle.svm.core.option.RuntimeOptionKey, a -) - node represents a constant 
3|MethodCallTarget 
4|Invoke#RuntimeOptionKey.getValue 
5|FrameState@6 - 5|FrameState@6 { sourceLine=175, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSizePercent()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSizePercent(HeapPolicy.java:175) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=6, sourceFile=HeapPolicy.java,  }
 
6|InstanceOf 
7|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
8|BytecodeException#CLASS_CAST 
9|Begin 
10|Begin 
11|If 
12|FrameState@6 - 12|FrameState@6 { sourceLine=175, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSizePercent()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSizePercent(HeapPolicy.java:175) [bci: 6], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=6, sourceFile=HeapPolicy.java,  }
 
15|Pi 
16|IsNull 
17|BytecodeException#NULL_POINTER 
18|Begin 
19|Begin 
20|If 
21|FrameState@9 - 21|FrameState@9 { sourceLine=175, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSizePercent()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSizePercent(HeapPolicy.java:175) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=9, sourceFile=HeapPolicy.java,  }
 
23|EndNode 
24|Merge 
25|EndNode 
26|ValuePhi(8 17, a -) 
27|Pi 
28|Unbox 
29|Constant(0, i32) - node represents a constant 
30|< 
31|Begin 
32|Begin 
33|If 
34|Constant(100, i32) - node represents a constant 
35|Constant(101, i32) - node represents a constant 
36|< 
37|Constant(1, i32) - node represents a constant 
38|Conditional 
40|EndNode 
41|Merge 
42|EndNode 
43|ValuePhi(38 29, i32) 
44|FrameState@28 - 44|FrameState@28 { sourceLine=176, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSizePercent()>, stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=28, sourceFile=HeapPolicy.java,  }
 
45|Constant(MaximumHeapSizePercent should be in [0 ..100], a -) - node represents a constant 
46|MethodCallTarget 
47|Invoke#VMError.guarantee 
48|FrameState@33 - 48|FrameState@33 { sourceLine=177, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSizePercent()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSizePercent(HeapPolicy.java:176) [bci: 30], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=33, sourceFile=HeapPolicy.java,  }
 
49|Return 
50|FrameState@-4[AFTER_EXCEPTION_BCI] - 50|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSizePercent()>, stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
51|Unwind 

build structured graph: Caller: allocateNewArray (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: Class, int, ThreadLocalAllocation$Descriptor, boolean, node count: 293
Callee: getMaximumHeapSize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 76
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=247, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSize()>, stackSize=0, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=0, sourceFile=HeapPolicy.java,  }
 
2|LoadField#maximumHeapSize - node represents a read of a static or instance field. 
3|Constant(0, i64) - node represents a constant 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6||<| 
7|Conditional 
8|Begin 
9|Begin 
10|If 
11|LoadField#maximumHeapSize - node represents a read of a static or instance field. 
12|Return 
13|MethodCallTarget 
14|Invoke#XOptions.getXmx 
15|FrameState@24 - 15|FrameState@24 { sourceLine=251, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSize()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSize(HeapPolicy.java:251) [bci: 21], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=24, sourceFile=HeapPolicy.java,  }
 
16|IsNull 
17|BytecodeException#NULL_POINTER 
18|Begin 
19|Begin 
20|If 
21|FrameState@26 - 21|FrameState@26 { sourceLine=252, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSize()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSize(HeapPolicy.java:252) [bci: 26], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=true, bci=26, sourceFile=HeapPolicy.java,  }
 
24|Pi 
25|MethodCallTarget 
26|Invoke#XOptions$XFlag.getEpoch 
27|FrameState@29 - 27|FrameState@29 { sourceLine=252, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSize()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSize(HeapPolicy.java:252) [bci: 26], stackSize=2, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=29, sourceFile=HeapPolicy.java,  }
 
28|IntegerNormalizeCompare 
29|Constant(1, i64) - node represents a constant 
30|< 
31|Begin 
32|Begin 
33|If 
34|BytecodeException#NULL_POINTER 
35|Begin 
36|Begin 
37|If 
38|FrameState@35 - 38|FrameState@35 { sourceLine=254, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSize()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSize(HeapPolicy.java:254) [bci: 35], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=true, bci=35, sourceFile=HeapPolicy.java,  }
 
40|EndNode 
41|Merge 
42|EndNode 
43|ValuePhi(17 34, a -) 
44|Pi 
45|MethodCallTarget 
46|Invoke#XOptions$XFlag.getValue 
47|FrameState@38 - 47|FrameState@38 { sourceLine=254, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSize()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSize(HeapPolicy.java:254) [bci: 35], stackSize=2, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=38, sourceFile=HeapPolicy.java,  }
 
48|MethodCallTarget 
49|Invoke#HeapPolicy.setMaximumHeapSize 
50|FrameState@44 - 50|FrameState@44 { sourceLine=254, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSize()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSize(HeapPolicy.java:254) [bci: 41], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=44, sourceFile=HeapPolicy.java,  }
 
51|LoadField#maximumHeapSize - node represents a read of a static or instance field. 
52|Return 
53|Constant(com.oracle.svm.core.SubstrateOptions$3, a -) - node represents a constant 
54|Constant(java.lang.Long, a -) - node represents a constant 
55|LogicConstant 
56|MethodCallTarget 
57|Invoke#PhysicalMemory.hasSize 
58|FrameState@76 - 58|FrameState@76 { sourceLine=266, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSize()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSize(HeapPolicy.java:266) [bci: 73], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=76, sourceFile=HeapPolicy.java,  }
 
59|== 
60|Begin 
61|Begin 
62|If 
63|MethodCallTarget 
64|Invoke#PhysicalMemory.size 
65|FrameState@82 - 65|FrameState@82 { sourceLine=267, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSize()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSize(HeapPolicy.java:267) [bci: 79], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=82, sourceFile=HeapPolicy.java,  }
 
66|MethodCallTarget 
67|Invoke#HeapPolicy.getMaximumHeapSizePercent 
68|FrameState@86 - 68|FrameState@86 { sourceLine=268, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSize()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSize(HeapPolicy.java:268) [bci: 83], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=86, sourceFile=HeapPolicy.java,  }
 
69|Constant(100, i32) - node represents a constant 
70|SignExtend 
71||/| 
72|SignExtend 
73|* 
74|Return 
75|Constant(-1, i64) - node represents a constant 
76|Return 
77|FrameState@-4[AFTER_EXCEPTION_BCI] - 77|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSize()>, stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
78|Unwind 

build structured graph: Caller: getChunkSizeForObject (class: com.oracle.svm.core.genscavenge.UnalignedHeapChunk), par: UnsignedWord, node count: 5
Callee: getAlignment (class: com.oracle.svm.core.config.ObjectLayout), par: , node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=83, code=ResolvedJavaMethodBytecode<ObjectLayout.getAlignment()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=ObjectLayout.java,  }
 
3|LoadField#objectAlignment - node represents a read of a static or instance field. 
4|Return 

build structured graph: Caller: produceUnalignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: UnsignedWord, node count: 4
Callee: getChunkSizeForObject (class: com.oracle.svm.core.genscavenge.UnalignedHeapChunk), par: UnsignedWord, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=141, code=ResolvedJavaMethodBytecode<UnalignedHeapChunk.getChunkSizeForObject(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=UnalignedHeapChunk.java,  }
 
3|Constant(48, i64) - node represents a constant 
4|Constant(com.oracle.svm.core.config.ObjectLayout, a -) - node represents a constant 
5|MethodCallTarget 
6|Invoke#ObjectLayout.getAlignment 
7|FrameState@10 - 7|FrameState@10 { sourceLine=142, code=ResolvedJavaMethodBytecode<UnalignedHeapChunk.getChunkSizeForObject(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.UnalignedHeapChunk.getChunkSizeForObject(UnalignedHeapChunk.java:142) [bci: 7], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=10, sourceFile=UnalignedHeapChunk.java,  }
 
8|ZeroExtend 
9|+ 
10|MethodCallTarget 
11|Invoke#UnsignedUtils.roundUp 
12|FrameState@25 - 12|FrameState@25 { sourceLine=143, code=ResolvedJavaMethodBytecode<UnalignedHeapChunk.getChunkSizeForObject(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.UnalignedHeapChunk.getChunkSizeForObject(UnalignedHeapChunk.java:143) [bci: 22], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=25, sourceFile=UnalignedHeapChunk.java,  }
 
13|Return 

build structured graph: Caller: produceUnalignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: UnsignedWord, node count: 7
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: produceUnalignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: UnsignedWord, node count: 74
Callee: noteFirstAllocationTime (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=370, code=ResolvedJavaMethodBytecode<HeapChunkProvider.noteFirstAllocationTime()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
3|LoadField#firstAllocationTime - node represents a read of a static or instance field. 
4|Constant(0, i64) - node represents a constant 
5|IntegerNormalizeCompare 
6|Constant(0, i32) - node represents a constant 
7|== 
8|Begin 
9|Begin 
10|If 
11|MethodCallTarget 
12|Invoke#System.nanoTime 
13|FrameState@13 - 13|FrameState@13 { sourceLine=371, code=ResolvedJavaMethodBytecode<HeapChunkProvider.noteFirstAllocationTime()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.noteFirstAllocationTime(HeapChunkProvider.java:371) [bci: 10], stackSize=3, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=13, sourceFile=HeapChunkProvider.java,  }
 
14|StoreField#firstAllocationTime - node represents a write to a static or instance field. 
15|FrameState@16 - 15|FrameState@16 { sourceLine=373, code=ResolvedJavaMethodBytecode<HeapChunkProvider.noteFirstAllocationTime()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.noteFirstAllocationTime(HeapChunkProvider.java:371) [bci: 13], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
16|EndNode 
17|Merge 
18|EndNode 
19|FrameState@16 - 19|FrameState@16 { sourceLine=373, code=ResolvedJavaMethodBytecode<HeapChunkProvider.noteFirstAllocationTime()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
20|Return 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, boolean, node count: 7
Callee: defaultProtection (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: boolean, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=166, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.defaultProtection(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
3|Constant(3, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|== 
6|Begin 
7|Begin 
8|If 
9|Constant(4, i32) - node represents a constant 
10|Constant(7, i32) - node represents a constant 
11|EndNode 
12|Merge 
13|EndNode 
14|ValuePhi(3 10, i32) 
15|FrameState@10 - 15|FrameState@10 { sourceLine=170, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.defaultProtection(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=OSCommittedMemoryProvider.java,  }
 
16|Return 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, boolean, node count: 20
Callee: trackVirtualMemory (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=196, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
4|LoadField#tracker - node represents a read of a static or instance field. 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@5 - 10|FrameState@5 { sourceLine=196, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.trackVirtualMemory(OSCommittedMemoryProvider.java:196) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=5, sourceFile=OSCommittedMemoryProvider.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#OSCommittedMemoryProvider$VirtualMemoryTracker.track 
16|FrameState@8 - 16|FrameState@8 { sourceLine=197, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.trackVirtualMemory(OSCommittedMemoryProvider.java:196) [bci: 5], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=8, sourceFile=OSCommittedMemoryProvider.java,  }
 
17|Return 
18|Unwind 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, UnsignedWord, boolean, node count: 14
Callee: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, boolean, node count: 28
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=158, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
5|Constant(com.oracle.svm.core.posix.PosixVirtualMemoryProvider, a -) - node represents a constant 
6|Constant(0, i64) - node represents a constant 
7|MethodCallTarget 
8|Invoke#OSCommittedMemoryProvider.defaultProtection 
9|FrameState@11 - 9|FrameState@11 { sourceLine=158, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:158) [bci: 8], stackSize=4, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=11, sourceFile=OSCommittedMemoryProvider.java,  }
 
10|MethodCallTarget 
11|Invoke#PosixVirtualMemoryProvider.commit 
12|FrameState@16 - 12|FrameState@16 { sourceLine=158, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:158) [bci: 11], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=16, sourceFile=OSCommittedMemoryProvider.java,  }
 
13|Constant(1, i32) - node represents a constant 
14|Constant(0, i32) - node represents a constant 
15|== 
16|Conditional 
17|Begin 
18|Begin 
19|If 
20|MethodCallTarget 
21|Invoke#OSCommittedMemoryProvider.trackVirtualMemory 
22|FrameState@31 - 22|FrameState@31 { sourceLine=162, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:160) [bci: 28], stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=31, sourceFile=OSCommittedMemoryProvider.java,  }
 
23|EndNode 
24|Merge 
25|EndNode 
26|FrameState@31 - 26|FrameState@31 { sourceLine=162, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=31, sourceFile=OSCommittedMemoryProvider.java,  }
 
27|Return 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, UnsignedWord, boolean, node count: 27
Callee: defaultProtection (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: boolean, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=166, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.defaultProtection(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
3|Constant(3, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|== 
6|Begin 
7|Begin 
8|If 
9|Constant(4, i32) - node represents a constant 
10|Constant(7, i32) - node represents a constant 
11|EndNode 
12|Merge 
13|EndNode 
14|ValuePhi(3 10, i32) 
15|FrameState@10 - 15|FrameState@10 { sourceLine=170, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.defaultProtection(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=OSCommittedMemoryProvider.java,  }
 
16|Return 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, UnsignedWord, boolean, node count: 39
Callee: trackVirtualMemory (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=196, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
4|LoadField#tracker - node represents a read of a static or instance field. 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@5 - 10|FrameState@5 { sourceLine=196, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.trackVirtualMemory(OSCommittedMemoryProvider.java:196) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=5, sourceFile=OSCommittedMemoryProvider.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#OSCommittedMemoryProvider$VirtualMemoryTracker.track 
16|FrameState@8 - 16|FrameState@8 { sourceLine=197, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.trackVirtualMemory(OSCommittedMemoryProvider.java:196) [bci: 5], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=8, sourceFile=OSCommittedMemoryProvider.java,  }
 
17|Return 
18|Unwind 

build structured graph: Caller: produceUnalignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: UnsignedWord, node count: 80
Callee: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, UnsignedWord, boolean, node count: 97
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=92, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
6|Constant(1, i64) - node represents a constant 
7|Constant(1, i32) - node represents a constant 
8|Constant(0, i32) - node represents a constant 
9|== 
10|Conditional 
11|Begin 
12|Begin 
13|If 
14|MethodCallTarget 
15|Invoke#OSCommittedMemoryProvider.allocate 
16|FrameState@18 - 16|FrameState@18 { sourceLine=93, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:93) [bci: 15], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=18, sourceFile=OSCommittedMemoryProvider.java,  }
 
17|Return 
18|MethodCallTarget 
19|Invoke#CommittedMemoryProvider.getGranularity 
20|FrameState@23 - 20|FrameState@23 { sourceLine=102, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:102) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=23, sourceFile=OSCommittedMemoryProvider.java,  }
 
21|+ 
22|MethodCallTarget 
23|Invoke#UnsignedUtils.roundUp 
24|FrameState@41 - 24|FrameState@41 { sourceLine=107, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:107) [bci: 38], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=41, sourceFile=OSCommittedMemoryProvider.java,  }
 
25|Constant(com.oracle.svm.core.posix.PosixVirtualMemoryProvider, a -) - node represents a constant 
26|Constant(0, i64) - node represents a constant 
27|MethodCallTarget 
28|Invoke#OSCommittedMemoryProvider.defaultProtection 
29|FrameState@55 - 29|FrameState@55 { sourceLine=108, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:108) [bci: 52], stackSize=4, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=55, sourceFile=OSCommittedMemoryProvider.java,  }
 
30|MethodCallTarget 
31|Invoke#PosixVirtualMemoryProvider.commit 
32|FrameState@60 - 32|FrameState@60 { sourceLine=108, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:108) [bci: 55], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=60, sourceFile=OSCommittedMemoryProvider.java,  }
 
33|== 
34|Conditional 
35|Begin 
36|Begin 
37|If 
38|Return 
39|MethodCallTarget 
40|Invoke#OSCommittedMemoryProvider.trackVirtualMemory 
41|FrameState@85 - 41|FrameState@85 { sourceLine=114, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:113) [bci: 82], stackSize=0, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=85, sourceFile=OSCommittedMemoryProvider.java,  }
 
42|+ 
43|MethodCallTarget 
44|Invoke#PointerUtils.roundUp 
45|FrameState@102 - 45|FrameState@102 { sourceLine=117, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:117) [bci: 99], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=102, sourceFile=OSCommittedMemoryProvider.java,  }
 
46|+ 
47|MethodCallTarget 
48|Invoke#PointerUtils.roundDown 
49|FrameState@121 - 49|FrameState@121 { sourceLine=126, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:126) [bci: 118], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=121, sourceFile=OSCommittedMemoryProvider.java,  }
 
50|- 
51||<| 
52|Conditional 
53|Begin 
54|Begin 
55|If 
56|MethodCallTarget 
57|Invoke#OSCommittedMemoryProvider.free 
58|FrameState@162 - 58|FrameState@162 { sourceLine=134, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:134) [bci: 159], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=162, sourceFile=OSCommittedMemoryProvider.java,  }
 
59|== 
60|EndNode 
61|Merge 
62|EndNode 
63|Begin 
64|Begin 
65|If 
66|MethodCallTarget 
67|Invoke#OSCommittedMemoryProvider.free 
68|FrameState@173 - 68|FrameState@173 { sourceLine=135, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:135) [bci: 170], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=173, sourceFile=OSCommittedMemoryProvider.java,  }
 
69|Return 
70|FrameState@181 - 70|FrameState@181 { sourceLine=140, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=181, sourceFile=OSCommittedMemoryProvider.java,  }
 
71|MethodCallTarget 
72|Invoke#PointerUtils.roundUp 
73|FrameState@188 - 73|FrameState@188 { sourceLine=140, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:140) [bci: 185], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=188, sourceFile=OSCommittedMemoryProvider.java,  }
 
74|- 
75||<| 
76|Conditional 
77|Begin 
78|Begin 
79|If 
80|MethodCallTarget 
81|Invoke#OSCommittedMemoryProvider.free 
82|FrameState@229 - 82|FrameState@229 { sourceLine=148, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:148) [bci: 226], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=229, sourceFile=OSCommittedMemoryProvider.java,  }
 
83|== 
84|EndNode 
85|Merge 
86|EndNode 
87|Begin 
88|Begin 
89|If 
90|- 
91|MethodCallTarget 
92|Invoke#OSCommittedMemoryProvider.free 
93|FrameState@247 - 93|FrameState@247 { sourceLine=149, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:149) [bci: 244], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=247, sourceFile=OSCommittedMemoryProvider.java,  }
 
94|Return 
95|FrameState@255 - 95|FrameState@255 { sourceLine=153, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=255, sourceFile=OSCommittedMemoryProvider.java,  }
 
96|Return 

build structured graph: Caller: produceUnalignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: UnsignedWord, node count: 93
Callee: initializeChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: HeapChunk$Header, UnsignedWord, node count: 13
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=296, code=ResolvedJavaMethodBytecode<HeapChunkProvider.initializeChunk(HeapChunk$Header, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
4|MethodCallTarget 
5|Invoke#HeapChunk.asPointer 
6|FrameState@5 - 6|FrameState@5 { sourceLine=296, code=ResolvedJavaMethodBytecode<HeapChunkProvider.initializeChunk(HeapChunk$Header, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.initializeChunk(HeapChunkProvider.java:296) [bci: 2], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=5, sourceFile=HeapChunkProvider.java,  }
 
7|+ 
8|Constant(0, i64) - node represents a constant 
9|OffsetAddress 
10|CInterfaceWrite 
11|FrameState@16 - 11|FrameState@16 { sourceLine=297, code=ResolvedJavaMethodBytecode<HeapChunkProvider.initializeChunk(HeapChunk$Header, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.initializeChunk(HeapChunkProvider.java:296) [bci: 11], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
12|Return 

build structured graph: Caller: getUnalignedStart (class: com.oracle.svm.core.genscavenge.UnalignedHeapChunk), par: UnalignedHeapChunk$UnalignedHeader, node count: 3
Callee: getObjectStart (class: com.oracle.svm.core.genscavenge.UnalignedHeapChunk), par: UnalignedHeapChunk$UnalignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=114, code=ResolvedJavaMethodBytecode<UnalignedHeapChunk.getObjectStart(UnalignedHeapChunk$UnalignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=UnalignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=114, code=ResolvedJavaMethodBytecode<UnalignedHeapChunk.getObjectStart(UnalignedHeapChunk$UnalignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.UnalignedHeapChunk.getObjectStart(UnalignedHeapChunk.java:114) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=UnalignedHeapChunk.java,  }
 
6|Constant(48, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: resetUnalignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: UnalignedHeapChunk$UnalignedHeader, node count: 3
Callee: getUnalignedStart (class: com.oracle.svm.core.genscavenge.UnalignedHeapChunk), par: UnalignedHeapChunk$UnalignedHeader, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=119, code=ResolvedJavaMethodBytecode<UnalignedHeapChunk.getUnalignedStart(UnalignedHeapChunk$UnalignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=UnalignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#UnalignedHeapChunk.getObjectStart 
5|FrameState@4 - 5|FrameState@4 { sourceLine=119, code=ResolvedJavaMethodBytecode<UnalignedHeapChunk.getUnalignedStart(UnalignedHeapChunk$UnalignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.UnalignedHeapChunk.getUnalignedStart(UnalignedHeapChunk.java:119) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=UnalignedHeapChunk.java,  }
 
6|Return 

build structured graph: Caller: resetUnalignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: UnalignedHeapChunk$UnalignedHeader, node count: 6
Callee: resetChunkHeader (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: HeapChunk$Header, Pointer, node count: 23
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=301, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
4|Constant(32, i64) - node represents a constant 
5|OffsetAddress 
6|CInterfaceWrite 
7|FrameState@7 - 7|FrameState@7 { sourceLine=302, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetChunkHeader(HeapChunkProvider.java:301) [bci: 2], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=HeapChunkProvider.java,  }
 
8|Constant(null, a -) - node represents a constant 
9|Constant(24, i64) - node represents a constant 
10|OffsetAddress 
11|JavaWrite 
12|FrameState@14 - 12|FrameState@14 { sourceLine=303, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetChunkHeader(HeapChunkProvider.java:302) [bci: 9], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=14, sourceFile=HeapChunkProvider.java,  }
 
13|Constant(0, i64) - node represents a constant 
14|Constant(8, i64) - node represents a constant 
15|OffsetAddress 
16|CInterfaceWrite 
17|FrameState@26 - 17|FrameState@26 { sourceLine=304, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetChunkHeader(HeapChunkProvider.java:303) [bci: 21], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=26, sourceFile=HeapChunkProvider.java,  }
 
18|Constant(16, i64) - node represents a constant 
19|OffsetAddress 
20|CInterfaceWrite 
21|FrameState@38 - 21|FrameState@38 { sourceLine=305, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetChunkHeader(HeapChunkProvider.java:304) [bci: 33], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=38, sourceFile=HeapChunkProvider.java,  }
 
22|Return 

build structured graph: Caller: resetUnalignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: UnalignedHeapChunk$UnalignedHeader, node count: 9
Callee: getCardTableStart (class: com.oracle.svm.core.genscavenge.UnalignedHeapChunk), par: UnalignedHeapChunk$UnalignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=104, code=ResolvedJavaMethodBytecode<UnalignedHeapChunk.getCardTableStart(UnalignedHeapChunk$UnalignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=UnalignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=104, code=ResolvedJavaMethodBytecode<UnalignedHeapChunk.getCardTableStart(UnalignedHeapChunk$UnalignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.UnalignedHeapChunk.getCardTableStart(UnalignedHeapChunk.java:104) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=UnalignedHeapChunk.java,  }
 
6|Constant(40, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: resetUnalignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: UnalignedHeapChunk$UnalignedHeader, node count: 12
Callee: getCardTableLimit (class: com.oracle.svm.core.genscavenge.UnalignedHeapChunk), par: UnalignedHeapChunk$UnalignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=109, code=ResolvedJavaMethodBytecode<UnalignedHeapChunk.getCardTableLimit(UnalignedHeapChunk$UnalignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=UnalignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=109, code=ResolvedJavaMethodBytecode<UnalignedHeapChunk.getCardTableLimit(UnalignedHeapChunk$UnalignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.UnalignedHeapChunk.getCardTableLimit(UnalignedHeapChunk.java:109) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=UnalignedHeapChunk.java,  }
 
6|Constant(48, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: cleanTableToPointer (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, Pointer, node count: 5
Callee: tableOffsetToIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: UnsignedWord, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=227, code=ResolvedJavaMethodBytecode<CardTable.tableOffsetToIndex(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|SignExtend 
5||/| 
6|Return 

build structured graph: Caller: cleanEntryAtIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, UnsignedWord, node count: 4
Callee: indexToTableOffset (class: com.oracle.svm.core.genscavenge.CardTable), par: UnsignedWord, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=232, code=ResolvedJavaMethodBytecode<CardTable.indexToTableOffset(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|SignExtend 
5|* 
6|Return 

build structured graph: Caller: cleanTableToIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, UnsignedWord, node count: 20
Callee: cleanEntryAtIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, UnsignedWord, node count: 13
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=133, code=ResolvedJavaMethodBytecode<CardTable.cleanEntryAtIndex(Pointer, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
4|MethodCallTarget 
5|Invoke#CardTable.indexToTableOffset 
6|FrameState@5 - 6|FrameState@5 { sourceLine=133, code=ResolvedJavaMethodBytecode<CardTable.cleanEntryAtIndex(Pointer, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanEntryAtIndex(CardTable.java:133) [bci: 2], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=5, sourceFile=CardTable.java,  }
 
7|Constant(1, i32) - node represents a constant 
8|Constant(org.graalvm.compiler.nodes.NamedLocationIdentity, a -) - node represents a constant 
9|OffsetAddress 
10|JavaWrite 
11|FrameState@14 - 11|FrameState@14 { sourceLine=134, code=ResolvedJavaMethodBytecode<CardTable.cleanEntryAtIndex(Pointer, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanEntryAtIndex(CardTable.java:133) [bci: 9], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=14, sourceFile=CardTable.java,  }
 
12|Return 

build structured graph: Caller: cleanTableToPointer (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, Pointer, node count: 8
Callee: cleanTableToIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, UnsignedWord, node count: 25
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=125, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToIndex(Pointer, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|ZeroExtend 
7|EndNode 
8|LoopBegin 
9|ValuePhi(5 24, i64) 
10|FrameState@5 - 10|FrameState@5 { sourceLine=125, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToIndex(Pointer, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=CardTable.java,  }
 
11|Constant(1, i32) - node represents a constant 
12||<| 
13|Conditional 
15|LoopExit 
16|ValueProxy 
17|FrameState@31 - 17|FrameState@31 { sourceLine=128, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToIndex(Pointer, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanTableToIndex(CardTable.java:128) [bci: 31], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=31, sourceFile=CardTable.java,  }
 
18|Begin 
19|If 
20|MethodCallTarget 
21|Invoke#CardTable.cleanEntryAtIndex 
22|FrameState@20 - 22|FrameState@20 { sourceLine=125, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToIndex(Pointer, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanTableToIndex(CardTable.java:126) [bci: 17], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=20, sourceFile=CardTable.java,  }
 
23|SignExtend 
24|+ 
25|LoopEnd 
26|Return 

build structured graph: Caller: resetUnalignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: UnalignedHeapChunk$UnalignedHeader, node count: 15
Callee: cleanTableToPointer (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, Pointer, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=118, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToPointer(Pointer, Pointer)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
4|- 
5|MethodCallTarget 
6|Invoke#CardTable.tableOffsetToIndex 
7|FrameState@12 - 7|FrameState@12 { sourceLine=119, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToPointer(Pointer, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanTableToPointer(CardTable.java:119) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=12, sourceFile=CardTable.java,  }
 
8|MethodCallTarget 
9|Invoke#CardTable.cleanTableToIndex 
10|FrameState@18 - 10|FrameState@18 { sourceLine=120, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToPointer(Pointer, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanTableToPointer(CardTable.java:120) [bci: 15], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=18, sourceFile=CardTable.java,  }
 
11|Return 

build structured graph: Caller: produceUnalignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: UnsignedWord, node count: 96
Callee: resetUnalignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: UnalignedHeapChunk$UnalignedHeader, node count: 19
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=325, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetUnalignedChunk(UnalignedHeapChunk$UnalignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
3|MethodCallTarget 
4|Invoke#UnalignedHeapChunk.getUnalignedStart 
5|FrameState@5 - 5|FrameState@5 { sourceLine=325, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetUnalignedChunk(UnalignedHeapChunk$UnalignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetUnalignedChunk(HeapChunkProvider.java:325) [bci: 2], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=5, sourceFile=HeapChunkProvider.java,  }
 
6|MethodCallTarget 
7|Invoke#HeapChunkProvider.resetChunkHeader 
8|FrameState@8 - 8|FrameState@8 { sourceLine=328, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetUnalignedChunk(UnalignedHeapChunk$UnalignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetUnalignedChunk(HeapChunkProvider.java:325) [bci: 5], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=8, sourceFile=HeapChunkProvider.java,  }
 
9|MethodCallTarget 
10|Invoke#UnalignedHeapChunk.getCardTableStart 
11|FrameState@12 - 11|FrameState@12 { sourceLine=328, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetUnalignedChunk(UnalignedHeapChunk$UnalignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetUnalignedChunk(HeapChunkProvider.java:328) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=12, sourceFile=HeapChunkProvider.java,  }
 
12|MethodCallTarget 
13|Invoke#UnalignedHeapChunk.getCardTableLimit 
14|FrameState@16 - 14|FrameState@16 { sourceLine=328, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetUnalignedChunk(UnalignedHeapChunk$UnalignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetUnalignedChunk(HeapChunkProvider.java:328) [bci: 13], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
15|MethodCallTarget 
16|Invoke#CardTable.cleanTableToPointer 
17|FrameState@19 - 17|FrameState@19 { sourceLine=328, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetUnalignedChunk(UnalignedHeapChunk$UnalignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetUnalignedChunk(HeapChunkProvider.java:328) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=19, sourceFile=HeapChunkProvider.java,  }
 
18|Return 

build structured graph: Caller: produceUnalignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: UnsignedWord, node count: 100
Callee: getZapProducedHeapChunks (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 8
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=353, code=ResolvedJavaMethodBytecode<HeapPolicy.getZapProducedHeapChunks()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapPolicy.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Boolean, a -) - node represents a constant 
4|LogicConstant 
5|Constant(0, i32) - node represents a constant 
6|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
7|Return 

build structured graph: Caller: zap (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: HeapChunk$Header, WordBase, node count: 10
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: produceUnalignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: UnsignedWord, node count: 110
Callee: zap (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: HeapChunk$Header, WordBase, node count: 142
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=333, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
4|Constant(32, i64) - node represents a constant 
5|OffsetAddress 
6|CInterfaceRead 
7|Constant(0, i64) - node represents a constant 
8|OffsetAddress 
9|CInterfaceRead 
10|MethodCallTarget 
11|Invoke#HeapChunkProvider.log 
12|FrameState@17 - 12|FrameState@17 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 14], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=17, sourceFile=HeapChunkProvider.java,  }
 
13|Constant(  zap chunk: , a -) - node represents a constant 
14|IsNull 
15|BytecodeException#NULL_POINTER 
16|Begin 
17|Begin 
18|If 
19|FrameState@19 - 19|FrameState@19 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 19], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=19, sourceFile=HeapChunkProvider.java,  }
 
22|Pi 
23|MethodCallTarget 
24|Invoke#Log.string 
25|FrameState@22 - 25|FrameState@22 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 19], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=22, sourceFile=HeapChunkProvider.java,  }
 
26|IsNull 
27|BytecodeException#NULL_POINTER 
28|Begin 
29|Begin 
30|If 
31|FrameState@23 - 31|FrameState@23 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 23], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=23, sourceFile=HeapChunkProvider.java,  }
 
33|EndNode 
34|Merge 
35|EndNode 
36|ValuePhi(15 27 43 55 68 80 93 105 117, a -) 
37|Pi 
38|MethodCallTarget 
39|Invoke#Log.hex 
40|FrameState@26 - 40|FrameState@26 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 23], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=26, sourceFile=HeapChunkProvider.java,  }
 
41|Constant(  start: , a -) - node represents a constant 
42|IsNull 
43|BytecodeException#NULL_POINTER 
44|Begin 
45|Begin 
46|If 
47|FrameState@28 - 47|FrameState@28 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 28], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=28, sourceFile=HeapChunkProvider.java,  }
 
49|EndNode 
50|Pi 
51|MethodCallTarget 
52|Invoke#Log.string 
53|FrameState@31 - 53|FrameState@31 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 28], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=31, sourceFile=HeapChunkProvider.java,  }
 
54|IsNull 
55|BytecodeException#NULL_POINTER 
56|Begin 
57|Begin 
58|If 
59|FrameState@32 - 59|FrameState@32 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=32, sourceFile=HeapChunkProvider.java,  }
 
61|EndNode 
62|Pi 
63|MethodCallTarget 
64|Invoke#Log.hex 
65|FrameState@35 - 65|FrameState@35 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=35, sourceFile=HeapChunkProvider.java,  }
 
66|Constant(  limit: , a -) - node represents a constant 
67|IsNull 
68|BytecodeException#NULL_POINTER 
69|Begin 
70|Begin 
71|If 
72|FrameState@37 - 72|FrameState@37 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 37], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=37, sourceFile=HeapChunkProvider.java,  }
 
74|EndNode 
75|Pi 
76|MethodCallTarget 
77|Invoke#Log.string 
78|FrameState@40 - 78|FrameState@40 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 37], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=40, sourceFile=HeapChunkProvider.java,  }
 
79|IsNull 
80|BytecodeException#NULL_POINTER 
81|Begin 
82|Begin 
83|If 
84|FrameState@41 - 84|FrameState@41 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 41], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=41, sourceFile=HeapChunkProvider.java,  }
 
86|EndNode 
87|Pi 
88|MethodCallTarget 
89|Invoke#Log.hex 
90|FrameState@44 - 90|FrameState@44 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 41], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=44, sourceFile=HeapChunkProvider.java,  }
 
91|Constant(  value: , a -) - node represents a constant 
92|IsNull 
93|BytecodeException#NULL_POINTER 
94|Begin 
95|Begin 
96|If 
97|FrameState@46 - 97|FrameState@46 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 46], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=46, sourceFile=HeapChunkProvider.java,  }
 
99|EndNode 
100|Pi 
101|MethodCallTarget 
102|Invoke#Log.string 
103|FrameState@49 - 103|FrameState@49 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 46], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=49, sourceFile=HeapChunkProvider.java,  }
 
104|IsNull 
105|BytecodeException#NULL_POINTER 
106|Begin 
107|Begin 
108|If 
109|FrameState@50 - 109|FrameState@50 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 50], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=50, sourceFile=HeapChunkProvider.java,  }
 
111|EndNode 
112|Pi 
113|MethodCallTarget 
114|Invoke#Log.hex 
115|FrameState@53 - 115|FrameState@53 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 50], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=53, sourceFile=HeapChunkProvider.java,  }
 
116|IsNull 
117|BytecodeException#NULL_POINTER 
118|Begin 
119|Begin 
120|If 
121|FrameState@53 - 121|FrameState@53 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 53], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=53, sourceFile=HeapChunkProvider.java,  }
 
123|EndNode 
124|Pi 
125|MethodCallTarget 
126|Invoke#Log.newline 
127|FrameState@56 - 127|FrameState@56 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 53], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=56, sourceFile=HeapChunkProvider.java,  }
 
129|EndNode 
130|LoopBegin 
131|ValuePhi(6 149, i64) 
132|FrameState@60 - 132|FrameState@60 { sourceLine=336, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=60, sourceFile=HeapChunkProvider.java,  }
 
133|Constant(1, i32) - node represents a constant 
134|Constant(0, i32) - node represents a constant 
135||<| 
136|Conditional 
138|LoopExit 
139|ValueProxy 
140|FrameState@95 - 140|FrameState@95 { sourceLine=339, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:339) [bci: 95], stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=95, sourceFile=HeapChunkProvider.java,  }
 
141|Begin 
142|If 
143|SignExtend 
144|OffsetAddress 
145|JavaWrite 
146|FrameState@80 - 146|FrameState@80 { sourceLine=336, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:337) [bci: 75], stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=80, sourceFile=HeapChunkProvider.java,  }
 
147|Constant(8, i32) - node represents a constant 
148|SignExtend 
149|+ 
150|LoopEnd 
151|Return 
152|FrameState@-4[AFTER_EXCEPTION_BCI] - 152|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
153|Unwind 

build structured graph: Caller: produceUnalignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: UnsignedWord, node count: 121
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: allocateNewArray (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: Class, int, ThreadLocalAllocation$Descriptor, boolean, node count: 311
Callee: produceUnalignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: UnsignedWord, node count: 166
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=258, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
4|MethodCallTarget 
5|Invoke#UnalignedHeapChunk.getChunkSizeForObject 
6|FrameState@4 - 6|FrameState@4 { sourceLine=258, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:258) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=4, sourceFile=HeapChunkProvider.java,  }
 
7|MethodCallTarget 
8|Invoke#HeapChunkProvider.log 
9|FrameState@8 - 9|FrameState@8 { sourceLine=259, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:259) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=8, sourceFile=HeapChunkProvider.java,  }
 
10|Constant([HeapChunkProvider.produceUnalignedChunk  objectSize: , a -) - node represents a constant 
11|IsNull 
12|BytecodeException#NULL_POINTER 
13|Begin 
14|Begin 
15|If 
16|FrameState@10 - 16|FrameState@10 { sourceLine=259, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:259) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=10, sourceFile=HeapChunkProvider.java,  }
 
19|Pi 
20|MethodCallTarget 
21|Invoke#Log.string 
22|FrameState@13 - 22|FrameState@13 { sourceLine=259, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:259) [bci: 10], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=13, sourceFile=HeapChunkProvider.java,  }
 
23|IsNull 
24|BytecodeException#NULL_POINTER 
25|Begin 
26|Begin 
27|If 
28|FrameState@14 - 28|FrameState@14 { sourceLine=259, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:259) [bci: 14], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=14, sourceFile=HeapChunkProvider.java,  }
 
30|EndNode 
31|Merge 
32|EndNode 
33|ValuePhi(12 24 40 52 64 91 127 139 152 164, a -) 
34|Pi 
35|MethodCallTarget 
36|Invoke#Log.unsigned 
37|FrameState@17 - 37|FrameState@17 { sourceLine=259, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:259) [bci: 14], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=17, sourceFile=HeapChunkProvider.java,  }
 
38|Constant(  chunkSize: , a -) - node represents a constant 
39|IsNull 
40|BytecodeException#NULL_POINTER 
41|Begin 
42|Begin 
43|If 
44|FrameState@19 - 44|FrameState@19 { sourceLine=259, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:259) [bci: 19], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=19, sourceFile=HeapChunkProvider.java,  }
 
46|EndNode 
47|Pi 
48|MethodCallTarget 
49|Invoke#Log.string 
50|FrameState@22 - 50|FrameState@22 { sourceLine=259, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:259) [bci: 19], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=22, sourceFile=HeapChunkProvider.java,  }
 
51|IsNull 
52|BytecodeException#NULL_POINTER 
53|Begin 
54|Begin 
55|If 
56|FrameState@23 - 56|FrameState@23 { sourceLine=259, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:259) [bci: 23], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=23, sourceFile=HeapChunkProvider.java,  }
 
58|EndNode 
59|Pi 
60|MethodCallTarget 
61|Invoke#Log.hex 
62|FrameState@26 - 62|FrameState@26 { sourceLine=259, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:259) [bci: 23], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=26, sourceFile=HeapChunkProvider.java,  }
 
63|IsNull 
64|BytecodeException#NULL_POINTER 
65|Begin 
66|Begin 
67|If 
68|FrameState@26 - 68|FrameState@26 { sourceLine=259, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:259) [bci: 26], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=26, sourceFile=HeapChunkProvider.java,  }
 
70|EndNode 
71|Pi 
72|MethodCallTarget 
73|Invoke#Log.newline 
74|FrameState@29 - 74|FrameState@29 { sourceLine=259, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:259) [bci: 26], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=29, sourceFile=HeapChunkProvider.java,  }
 
75|MethodCallTarget 
76|Invoke#HeapChunkProvider.noteFirstAllocationTime 
77|FrameState@34 - 77|FrameState@34 { sourceLine=262, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:261) [bci: 31], stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=34, sourceFile=HeapChunkProvider.java,  }
 
78|Constant(com.oracle.svm.core.os.OSCommittedMemoryProvider, a -) - node represents a constant 
79|Constant(1, i64) - node represents a constant 
80|Constant(0, i32) - node represents a constant 
81|MethodCallTarget 
82|Invoke#OSCommittedMemoryProvider.allocate 
83|FrameState@47 - 83|FrameState@47 { sourceLine=262, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:262) [bci: 42], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=47, sourceFile=HeapChunkProvider.java,  }
 
84|Constant(1, i32) - node represents a constant 
85|Constant(0, i64) - node represents a constant 
86|== 
87|Conditional 
88|Begin 
89|Begin 
90|If 
91|Constant(java.lang.OutOfMemoryError, a -) - node represents a constant 
93|EndNode 
94|MethodCallTarget 
95|Invoke#HeapChunkProvider.initializeChunk 
96|FrameState@69 - 96|FrameState@69 { sourceLine=268, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:267) [bci: 66], stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=69, sourceFile=HeapChunkProvider.java,  }
 
97|MethodCallTarget 
98|Invoke#HeapChunkProvider.resetUnalignedChunk 
99|FrameState@73 - 99|FrameState@73 { sourceLine=269, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:268) [bci: 70], stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=73, sourceFile=HeapChunkProvider.java,  }
 
101|MethodCallTarget 
102|Invoke#HeapPolicy.getZapProducedHeapChunks 
103|FrameState@105 - 103|FrameState@105 { sourceLine=271, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:271) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=105, sourceFile=HeapChunkProvider.java,  }
 
104|== 
105|Begin 
106|Begin 
107|If 
108|MethodCallTarget 
109|Invoke#HeapPolicy.getProducedHeapChunkZapWord 
110|FrameState@112 - 110|FrameState@112 { sourceLine=272, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:272) [bci: 109], stackSize=2, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=112, sourceFile=HeapChunkProvider.java,  }
 
111|MethodCallTarget 
112|Invoke#HeapChunkProvider.zap 
113|FrameState@115 - 113|FrameState@115 { sourceLine=275, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:272) [bci: 112], stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=115, sourceFile=HeapChunkProvider.java,  }
 
114|EndNode 
115|Merge 
116|EndNode 
117|FrameState@115 - 117|FrameState@115 { sourceLine=275, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=115, sourceFile=HeapChunkProvider.java,  }
 
118|Constant(com.oracle.svm.core.jdk.UninterruptibleUtils$AtomicUnsigned, a -) - node represents a constant 
119|MethodCallTarget 
120|Invoke#UninterruptibleUtils$AtomicUnsigned.addAndGet 
121|FrameState@122 - 121|FrameState@122 { sourceLine=275, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:275) [bci: 119], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=122, sourceFile=HeapChunkProvider.java,  }
 
122|MethodCallTarget 
123|Invoke#HeapChunkProvider.log 
124|FrameState@126 - 124|FrameState@126 { sourceLine=277, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:277) [bci: 123], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=126, sourceFile=HeapChunkProvider.java,  }
 
125|Constant(  returns , a -) - node represents a constant 
126|IsNull 
127|BytecodeException#NULL_POINTER 
128|Begin 
129|Begin 
130|If 
131|FrameState@128 - 131|FrameState@128 { sourceLine=277, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:277) [bci: 128], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=128, sourceFile=HeapChunkProvider.java,  }
 
133|EndNode 
134|Pi 
135|MethodCallTarget 
136|Invoke#Log.string 
137|FrameState@131 - 137|FrameState@131 { sourceLine=277, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:277) [bci: 128], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=131, sourceFile=HeapChunkProvider.java,  }
 
138|IsNull 
139|BytecodeException#NULL_POINTER 
140|Begin 
141|Begin 
142|If 
143|FrameState@132 - 143|FrameState@132 { sourceLine=277, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:277) [bci: 132], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=132, sourceFile=HeapChunkProvider.java,  }
 
145|EndNode 
146|Pi 
147|MethodCallTarget 
148|Invoke#Log.hex 
149|FrameState@135 - 149|FrameState@135 { sourceLine=277, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:277) [bci: 132], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=135, sourceFile=HeapChunkProvider.java,  }
 
150|Constant(  ], a -) - node represents a constant 
151|IsNull 
152|BytecodeException#NULL_POINTER 
153|Begin 
154|Begin 
155|If 
156|FrameState@137 - 156|FrameState@137 { sourceLine=277, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:277) [bci: 137], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=137, sourceFile=HeapChunkProvider.java,  }
 
158|EndNode 
159|Pi 
160|MethodCallTarget 
161|Invoke#Log.string 
162|FrameState@140 - 162|FrameState@140 { sourceLine=277, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:277) [bci: 137], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=140, sourceFile=HeapChunkProvider.java,  }
 
163|IsNull 
164|BytecodeException#NULL_POINTER 
165|Begin 
166|Begin 
167|If 
168|FrameState@140 - 168|FrameState@140 { sourceLine=277, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:277) [bci: 140], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=true, bci=140, sourceFile=HeapChunkProvider.java,  }
 
170|EndNode 
171|Pi 
172|MethodCallTarget 
173|Invoke#Log.newline 
174|FrameState@143 - 174|FrameState@143 { sourceLine=277, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceUnalignedChunk(HeapChunkProvider.java:277) [bci: 140], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=143, sourceFile=HeapChunkProvider.java,  }
 
175|Return 
176|FrameState@-4[AFTER_EXCEPTION_BCI] - 176|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceUnalignedChunk(UnsignedWord)>, stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
177|Unwind 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: popUnusedAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 3
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: popUnusedAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 122
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 46
Callee: popUnusedAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 200
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunkProvider.log 
5|FrameState@3 - 5|FrameState@3 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 0], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=3, sourceFile=HeapChunkProvider.java,  }
 
6|Constant(  old list top: , a -) - node represents a constant 
7|IsNull 
8|BytecodeException#NULL_POINTER 
9|Begin 
10|Begin 
11|If 
12|FrameState@5 - 12|FrameState@5 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=5, sourceFile=HeapChunkProvider.java,  }
 
15|Pi 
16|MethodCallTarget 
17|Invoke#Log.string 
18|FrameState@8 - 18|FrameState@8 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=8, sourceFile=HeapChunkProvider.java,  }
 
19|LoadField#unusedAlignedChunks - node represents a read of a static or instance field. 
20|IsNull 
21|BytecodeException#NULL_POINTER 
22|Begin 
23|Begin 
24|If 
25|FrameState@12 - 25|FrameState@12 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 12], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=12, sourceFile=HeapChunkProvider.java,  }
 
27|EndNode 
28|Merge 
29|EndNode 
30|ValuePhi(8 21 36 49 62 74 86 112 128 141 153 165 178 190 202, a -) 
31|Pi 
32|MethodCallTarget 
33|Invoke#UninterruptibleUtils$AtomicPointer.get 
34|FrameState@15 - 34|FrameState@15 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 12], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=15, sourceFile=HeapChunkProvider.java,  }
 
35|IsNull 
36|BytecodeException#NULL_POINTER 
37|Begin 
38|Begin 
39|If 
40|FrameState@15 - 40|FrameState@15 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 15], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=15, sourceFile=HeapChunkProvider.java,  }
 
42|EndNode 
43|Pi 
44|MethodCallTarget 
45|Invoke#Log.hex 
46|FrameState@18 - 46|FrameState@18 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 15], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=HeapChunkProvider.java,  }
 
47|Constant(  list bytes , a -) - node represents a constant 
48|IsNull 
49|BytecodeException#NULL_POINTER 
50|Begin 
51|Begin 
52|If 
53|FrameState@20 - 53|FrameState@20 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=20, sourceFile=HeapChunkProvider.java,  }
 
55|EndNode 
56|Pi 
57|MethodCallTarget 
58|Invoke#Log.string 
59|FrameState@23 - 59|FrameState@23 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=23, sourceFile=HeapChunkProvider.java,  }
 
60|LoadField#bytesInUnusedAlignedChunks - node represents a read of a static or instance field. 
61|IsNull 
62|BytecodeException#NULL_POINTER 
63|Begin 
64|Begin 
65|If 
66|FrameState@27 - 66|FrameState@27 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 27], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=27, sourceFile=HeapChunkProvider.java,  }
 
68|EndNode 
69|Pi 
70|MethodCallTarget 
71|Invoke#UninterruptibleUtils$AtomicWord.get 
72|FrameState@30 - 72|FrameState@30 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 27], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=30, sourceFile=HeapChunkProvider.java,  }
 
73|IsNull 
74|BytecodeException#NULL_POINTER 
75|Begin 
76|Begin 
77|If 
78|FrameState@30 - 78|FrameState@30 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 30], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=30, sourceFile=HeapChunkProvider.java,  }
 
80|EndNode 
81|Pi 
82|MethodCallTarget 
83|Invoke#Log.signed 
84|FrameState@33 - 84|FrameState@33 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 30], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=33, sourceFile=HeapChunkProvider.java,  }
 
85|IsNull 
86|BytecodeException#NULL_POINTER 
87|Begin 
88|Begin 
89|If 
90|FrameState@33 - 90|FrameState@33 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 33], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=33, sourceFile=HeapChunkProvider.java,  }
 
92|EndNode 
93|Pi 
94|MethodCallTarget 
95|Invoke#Log.newline 
96|FrameState@36 - 96|FrameState@36 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 33], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=36, sourceFile=HeapChunkProvider.java,  }
 
97|MethodCallTarget 
98|Invoke#HeapChunkProvider.popUnusedAlignedChunkUninterruptibly 
99|FrameState@41 - 99|FrameState@41 { sourceLine=221, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:221) [bci: 38], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=41, sourceFile=HeapChunkProvider.java,  }
 
100|Constant(1, i32) - node represents a constant 
101|Constant(0, i32) - node represents a constant 
102|Constant(0, i64) - node represents a constant 
103|== 
104|Conditional 
105|Begin 
106|Begin 
107|If 
108|Return 
109|LoadField#bytesInUnusedAlignedChunks - node represents a read of a static or instance field. 
110|Constant(1048576, i64) - node represents a constant 
111|IsNull 
112|BytecodeException#NULL_POINTER 
113|Begin 
114|Begin 
115|If 
116|FrameState@65 - 116|FrameState@65 { sourceLine=227, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:227) [bci: 65], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=65, sourceFile=HeapChunkProvider.java,  }
 
118|EndNode 
119|Pi 
120|MethodCallTarget 
121|Invoke#UninterruptibleUtils$AtomicUnsigned.subtractAndGet 
122|FrameState@68 - 122|FrameState@68 { sourceLine=227, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:227) [bci: 65], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=68, sourceFile=HeapChunkProvider.java,  }
 
123|MethodCallTarget 
124|Invoke#HeapChunkProvider.log 
125|FrameState@72 - 125|FrameState@72 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 69], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=72, sourceFile=HeapChunkProvider.java,  }
 
126|Constant(  new list top: , a -) - node represents a constant 
127|IsNull 
128|BytecodeException#NULL_POINTER 
129|Begin 
130|Begin 
131|If 
132|FrameState@74 - 132|FrameState@74 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 74], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=74, sourceFile=HeapChunkProvider.java,  }
 
134|EndNode 
135|Pi 
136|MethodCallTarget 
137|Invoke#Log.string 
138|FrameState@77 - 138|FrameState@77 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 74], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=77, sourceFile=HeapChunkProvider.java,  }
 
139|LoadField#unusedAlignedChunks - node represents a read of a static or instance field. 
140|IsNull 
141|BytecodeException#NULL_POINTER 
142|Begin 
143|Begin 
144|If 
145|FrameState@81 - 145|FrameState@81 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 81], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=81, sourceFile=HeapChunkProvider.java,  }
 
147|EndNode 
148|Pi 
149|MethodCallTarget 
150|Invoke#UninterruptibleUtils$AtomicPointer.get 
151|FrameState@84 - 151|FrameState@84 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 81], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=84, sourceFile=HeapChunkProvider.java,  }
 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@84 - 157|FrameState@84 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=84, sourceFile=HeapChunkProvider.java,  }
 
159|EndNode 
160|Pi 
161|MethodCallTarget 
162|Invoke#Log.hex 
163|FrameState@87 - 163|FrameState@87 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=87, sourceFile=HeapChunkProvider.java,  }
 
164|IsNull 
165|BytecodeException#NULL_POINTER 
166|Begin 
167|Begin 
168|If 
169|FrameState@89 - 169|FrameState@89 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=89, sourceFile=HeapChunkProvider.java,  }
 
171|EndNode 
172|Pi 
173|MethodCallTarget 
174|Invoke#Log.string 
175|FrameState@92 - 175|FrameState@92 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=92, sourceFile=HeapChunkProvider.java,  }
 
176|LoadField#bytesInUnusedAlignedChunks - node represents a read of a static or instance field. 
177|IsNull 
178|BytecodeException#NULL_POINTER 
179|Begin 
180|Begin 
181|If 
182|FrameState@96 - 182|FrameState@96 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 96], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=96, sourceFile=HeapChunkProvider.java,  }
 
184|EndNode 
185|Pi 
186|MethodCallTarget 
187|Invoke#UninterruptibleUtils$AtomicWord.get 
188|FrameState@99 - 188|FrameState@99 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 96], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=99, sourceFile=HeapChunkProvider.java,  }
 
189|IsNull 
190|BytecodeException#NULL_POINTER 
191|Begin 
192|Begin 
193|If 
194|FrameState@99 - 194|FrameState@99 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 99], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=99, sourceFile=HeapChunkProvider.java,  }
 
196|EndNode 
197|Pi 
198|MethodCallTarget 
199|Invoke#Log.signed 
200|FrameState@102 - 200|FrameState@102 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 99], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=102, sourceFile=HeapChunkProvider.java,  }
 
201|IsNull 
202|BytecodeException#NULL_POINTER 
203|Begin 
204|Begin 
205|If 
206|FrameState@102 - 206|FrameState@102 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=102, sourceFile=HeapChunkProvider.java,  }
 
208|EndNode 
209|Pi 
210|MethodCallTarget 
211|Invoke#Log.newline 
212|FrameState@105 - 212|FrameState@105 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=105, sourceFile=HeapChunkProvider.java,  }
 
213|Return 
214|FrameState@-4[AFTER_EXCEPTION_BCI] - 214|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
215|Unwind 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 49
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 97
Callee: noteFirstAllocationTime (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=370, code=ResolvedJavaMethodBytecode<HeapChunkProvider.noteFirstAllocationTime()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
3|LoadField#firstAllocationTime - node represents a read of a static or instance field. 
4|Constant(0, i64) - node represents a constant 
5|IntegerNormalizeCompare 
6|Constant(0, i32) - node represents a constant 
7|== 
8|Begin 
9|Begin 
10|If 
11|MethodCallTarget 
12|Invoke#System.nanoTime 
13|FrameState@13 - 13|FrameState@13 { sourceLine=371, code=ResolvedJavaMethodBytecode<HeapChunkProvider.noteFirstAllocationTime()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.noteFirstAllocationTime(HeapChunkProvider.java:371) [bci: 10], stackSize=3, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=13, sourceFile=HeapChunkProvider.java,  }
 
14|StoreField#firstAllocationTime - node represents a write to a static or instance field. 
15|FrameState@16 - 15|FrameState@16 { sourceLine=373, code=ResolvedJavaMethodBytecode<HeapChunkProvider.noteFirstAllocationTime()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.noteFirstAllocationTime(HeapChunkProvider.java:371) [bci: 13], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
16|EndNode 
17|Merge 
18|EndNode 
19|FrameState@16 - 19|FrameState@16 { sourceLine=373, code=ResolvedJavaMethodBytecode<HeapChunkProvider.noteFirstAllocationTime()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
20|Return 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, boolean, node count: 7
Callee: defaultProtection (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: boolean, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=166, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.defaultProtection(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
3|Constant(3, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|== 
6|Begin 
7|Begin 
8|If 
9|Constant(4, i32) - node represents a constant 
10|Constant(7, i32) - node represents a constant 
11|EndNode 
12|Merge 
13|EndNode 
14|ValuePhi(3 10, i32) 
15|FrameState@10 - 15|FrameState@10 { sourceLine=170, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.defaultProtection(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=OSCommittedMemoryProvider.java,  }
 
16|Return 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, boolean, node count: 20
Callee: trackVirtualMemory (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=196, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
4|LoadField#tracker - node represents a read of a static or instance field. 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@5 - 10|FrameState@5 { sourceLine=196, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.trackVirtualMemory(OSCommittedMemoryProvider.java:196) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=5, sourceFile=OSCommittedMemoryProvider.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#OSCommittedMemoryProvider$VirtualMemoryTracker.track 
16|FrameState@8 - 16|FrameState@8 { sourceLine=197, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.trackVirtualMemory(OSCommittedMemoryProvider.java:196) [bci: 5], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=8, sourceFile=OSCommittedMemoryProvider.java,  }
 
17|Return 
18|Unwind 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, UnsignedWord, boolean, node count: 14
Callee: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, boolean, node count: 28
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=158, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
5|Constant(com.oracle.svm.core.posix.PosixVirtualMemoryProvider, a -) - node represents a constant 
6|Constant(0, i64) - node represents a constant 
7|MethodCallTarget 
8|Invoke#OSCommittedMemoryProvider.defaultProtection 
9|FrameState@11 - 9|FrameState@11 { sourceLine=158, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:158) [bci: 8], stackSize=4, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=11, sourceFile=OSCommittedMemoryProvider.java,  }
 
10|MethodCallTarget 
11|Invoke#PosixVirtualMemoryProvider.commit 
12|FrameState@16 - 12|FrameState@16 { sourceLine=158, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:158) [bci: 11], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=16, sourceFile=OSCommittedMemoryProvider.java,  }
 
13|Constant(1, i32) - node represents a constant 
14|Constant(0, i32) - node represents a constant 
15|== 
16|Conditional 
17|Begin 
18|Begin 
19|If 
20|MethodCallTarget 
21|Invoke#OSCommittedMemoryProvider.trackVirtualMemory 
22|FrameState@31 - 22|FrameState@31 { sourceLine=162, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:160) [bci: 28], stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=31, sourceFile=OSCommittedMemoryProvider.java,  }
 
23|EndNode 
24|Merge 
25|EndNode 
26|FrameState@31 - 26|FrameState@31 { sourceLine=162, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=31, sourceFile=OSCommittedMemoryProvider.java,  }
 
27|Return 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, UnsignedWord, boolean, node count: 27
Callee: defaultProtection (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: boolean, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=166, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.defaultProtection(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
3|Constant(3, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|== 
6|Begin 
7|Begin 
8|If 
9|Constant(4, i32) - node represents a constant 
10|Constant(7, i32) - node represents a constant 
11|EndNode 
12|Merge 
13|EndNode 
14|ValuePhi(3 10, i32) 
15|FrameState@10 - 15|FrameState@10 { sourceLine=170, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.defaultProtection(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=OSCommittedMemoryProvider.java,  }
 
16|Return 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, UnsignedWord, boolean, node count: 39
Callee: trackVirtualMemory (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=196, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
4|LoadField#tracker - node represents a read of a static or instance field. 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@5 - 10|FrameState@5 { sourceLine=196, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.trackVirtualMemory(OSCommittedMemoryProvider.java:196) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=5, sourceFile=OSCommittedMemoryProvider.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#OSCommittedMemoryProvider$VirtualMemoryTracker.track 
16|FrameState@8 - 16|FrameState@8 { sourceLine=197, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.trackVirtualMemory(OSCommittedMemoryProvider.java:196) [bci: 5], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=8, sourceFile=OSCommittedMemoryProvider.java,  }
 
17|Return 
18|Unwind 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 101
Callee: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, UnsignedWord, boolean, node count: 97
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=92, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
6|Constant(1, i64) - node represents a constant 
7|Constant(1, i32) - node represents a constant 
8|Constant(0, i32) - node represents a constant 
9|== 
10|Conditional 
11|Begin 
12|Begin 
13|If 
14|MethodCallTarget 
15|Invoke#OSCommittedMemoryProvider.allocate 
16|FrameState@18 - 16|FrameState@18 { sourceLine=93, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:93) [bci: 15], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=18, sourceFile=OSCommittedMemoryProvider.java,  }
 
17|Return 
18|MethodCallTarget 
19|Invoke#CommittedMemoryProvider.getGranularity 
20|FrameState@23 - 20|FrameState@23 { sourceLine=102, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:102) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=23, sourceFile=OSCommittedMemoryProvider.java,  }
 
21|+ 
22|MethodCallTarget 
23|Invoke#UnsignedUtils.roundUp 
24|FrameState@41 - 24|FrameState@41 { sourceLine=107, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:107) [bci: 38], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=41, sourceFile=OSCommittedMemoryProvider.java,  }
 
25|Constant(com.oracle.svm.core.posix.PosixVirtualMemoryProvider, a -) - node represents a constant 
26|Constant(0, i64) - node represents a constant 
27|MethodCallTarget 
28|Invoke#OSCommittedMemoryProvider.defaultProtection 
29|FrameState@55 - 29|FrameState@55 { sourceLine=108, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:108) [bci: 52], stackSize=4, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=55, sourceFile=OSCommittedMemoryProvider.java,  }
 
30|MethodCallTarget 
31|Invoke#PosixVirtualMemoryProvider.commit 
32|FrameState@60 - 32|FrameState@60 { sourceLine=108, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:108) [bci: 55], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=60, sourceFile=OSCommittedMemoryProvider.java,  }
 
33|== 
34|Conditional 
35|Begin 
36|Begin 
37|If 
38|Return 
39|MethodCallTarget 
40|Invoke#OSCommittedMemoryProvider.trackVirtualMemory 
41|FrameState@85 - 41|FrameState@85 { sourceLine=114, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:113) [bci: 82], stackSize=0, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=85, sourceFile=OSCommittedMemoryProvider.java,  }
 
42|+ 
43|MethodCallTarget 
44|Invoke#PointerUtils.roundUp 
45|FrameState@102 - 45|FrameState@102 { sourceLine=117, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:117) [bci: 99], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=102, sourceFile=OSCommittedMemoryProvider.java,  }
 
46|+ 
47|MethodCallTarget 
48|Invoke#PointerUtils.roundDown 
49|FrameState@121 - 49|FrameState@121 { sourceLine=126, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:126) [bci: 118], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=121, sourceFile=OSCommittedMemoryProvider.java,  }
 
50|- 
51||<| 
52|Conditional 
53|Begin 
54|Begin 
55|If 
56|MethodCallTarget 
57|Invoke#OSCommittedMemoryProvider.free 
58|FrameState@162 - 58|FrameState@162 { sourceLine=134, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:134) [bci: 159], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=162, sourceFile=OSCommittedMemoryProvider.java,  }
 
59|== 
60|EndNode 
61|Merge 
62|EndNode 
63|Begin 
64|Begin 
65|If 
66|MethodCallTarget 
67|Invoke#OSCommittedMemoryProvider.free 
68|FrameState@173 - 68|FrameState@173 { sourceLine=135, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:135) [bci: 170], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=173, sourceFile=OSCommittedMemoryProvider.java,  }
 
69|Return 
70|FrameState@181 - 70|FrameState@181 { sourceLine=140, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=181, sourceFile=OSCommittedMemoryProvider.java,  }
 
71|MethodCallTarget 
72|Invoke#PointerUtils.roundUp 
73|FrameState@188 - 73|FrameState@188 { sourceLine=140, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:140) [bci: 185], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=188, sourceFile=OSCommittedMemoryProvider.java,  }
 
74|- 
75||<| 
76|Conditional 
77|Begin 
78|Begin 
79|If 
80|MethodCallTarget 
81|Invoke#OSCommittedMemoryProvider.free 
82|FrameState@229 - 82|FrameState@229 { sourceLine=148, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:148) [bci: 226], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=229, sourceFile=OSCommittedMemoryProvider.java,  }
 
83|== 
84|EndNode 
85|Merge 
86|EndNode 
87|Begin 
88|Begin 
89|If 
90|- 
91|MethodCallTarget 
92|Invoke#OSCommittedMemoryProvider.free 
93|FrameState@247 - 93|FrameState@247 { sourceLine=149, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:149) [bci: 244], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=247, sourceFile=OSCommittedMemoryProvider.java,  }
 
94|Return 
95|FrameState@255 - 95|FrameState@255 { sourceLine=153, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=255, sourceFile=OSCommittedMemoryProvider.java,  }
 
96|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 112
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 152
Callee: initializeChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: HeapChunk$Header, UnsignedWord, node count: 13
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=296, code=ResolvedJavaMethodBytecode<HeapChunkProvider.initializeChunk(HeapChunk$Header, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
4|MethodCallTarget 
5|Invoke#HeapChunk.asPointer 
6|FrameState@5 - 6|FrameState@5 { sourceLine=296, code=ResolvedJavaMethodBytecode<HeapChunkProvider.initializeChunk(HeapChunk$Header, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.initializeChunk(HeapChunkProvider.java:296) [bci: 2], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=5, sourceFile=HeapChunkProvider.java,  }
 
7|+ 
8|Constant(0, i64) - node represents a constant 
9|OffsetAddress 
10|CInterfaceWrite 
11|FrameState@16 - 11|FrameState@16 { sourceLine=297, code=ResolvedJavaMethodBytecode<HeapChunkProvider.initializeChunk(HeapChunk$Header, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.initializeChunk(HeapChunkProvider.java:296) [bci: 11], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
12|Return 

build structured graph: Caller: getAlignedHeapChunkStart (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 3
Callee: getObjectsStart (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=121, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getObjectsStart(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=121, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getObjectsStart(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getObjectsStart(AlignedHeapChunk.java:121) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Constant(4136, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 3
Callee: getAlignedHeapChunkStart (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=137, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getAlignedHeapChunkStart(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#AlignedHeapChunk.getObjectsStart 
5|FrameState@4 - 5|FrameState@4 { sourceLine=137, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getAlignedHeapChunkStart(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getAlignedHeapChunkStart(AlignedHeapChunk.java:137) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 6
Callee: resetChunkHeader (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: HeapChunk$Header, Pointer, node count: 23
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=301, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
4|Constant(32, i64) - node represents a constant 
5|OffsetAddress 
6|CInterfaceWrite 
7|FrameState@7 - 7|FrameState@7 { sourceLine=302, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetChunkHeader(HeapChunkProvider.java:301) [bci: 2], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=HeapChunkProvider.java,  }
 
8|Constant(null, a -) - node represents a constant 
9|Constant(24, i64) - node represents a constant 
10|OffsetAddress 
11|JavaWrite 
12|FrameState@14 - 12|FrameState@14 { sourceLine=303, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetChunkHeader(HeapChunkProvider.java:302) [bci: 9], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=14, sourceFile=HeapChunkProvider.java,  }
 
13|Constant(0, i64) - node represents a constant 
14|Constant(8, i64) - node represents a constant 
15|OffsetAddress 
16|CInterfaceWrite 
17|FrameState@26 - 17|FrameState@26 { sourceLine=304, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetChunkHeader(HeapChunkProvider.java:303) [bci: 21], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=26, sourceFile=HeapChunkProvider.java,  }
 
18|Constant(16, i64) - node represents a constant 
19|OffsetAddress 
20|CInterfaceWrite 
21|FrameState@38 - 21|FrameState@38 { sourceLine=305, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetChunkHeader(HeapChunkProvider.java:304) [bci: 33], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=38, sourceFile=HeapChunkProvider.java,  }
 
22|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 9
Callee: getCardTableStart (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=100, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getCardTableStart(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=100, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getCardTableStart(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getCardTableStart(AlignedHeapChunk.java:100) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Constant(40, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 12
Callee: getCardTableLimit (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=105, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getCardTableLimit(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=105, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getCardTableLimit(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getCardTableLimit(AlignedHeapChunk.java:105) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Constant(2088, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: cleanTableToPointer (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, Pointer, node count: 5
Callee: tableOffsetToIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: UnsignedWord, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=227, code=ResolvedJavaMethodBytecode<CardTable.tableOffsetToIndex(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|SignExtend 
5||/| 
6|Return 

build structured graph: Caller: cleanEntryAtIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, UnsignedWord, node count: 4
Callee: indexToTableOffset (class: com.oracle.svm.core.genscavenge.CardTable), par: UnsignedWord, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=232, code=ResolvedJavaMethodBytecode<CardTable.indexToTableOffset(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|SignExtend 
5|* 
6|Return 

build structured graph: Caller: cleanTableToIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, UnsignedWord, node count: 20
Callee: cleanEntryAtIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, UnsignedWord, node count: 13
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=133, code=ResolvedJavaMethodBytecode<CardTable.cleanEntryAtIndex(Pointer, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
4|MethodCallTarget 
5|Invoke#CardTable.indexToTableOffset 
6|FrameState@5 - 6|FrameState@5 { sourceLine=133, code=ResolvedJavaMethodBytecode<CardTable.cleanEntryAtIndex(Pointer, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanEntryAtIndex(CardTable.java:133) [bci: 2], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=5, sourceFile=CardTable.java,  }
 
7|Constant(1, i32) - node represents a constant 
8|Constant(org.graalvm.compiler.nodes.NamedLocationIdentity, a -) - node represents a constant 
9|OffsetAddress 
10|JavaWrite 
11|FrameState@14 - 11|FrameState@14 { sourceLine=134, code=ResolvedJavaMethodBytecode<CardTable.cleanEntryAtIndex(Pointer, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanEntryAtIndex(CardTable.java:133) [bci: 9], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=14, sourceFile=CardTable.java,  }
 
12|Return 

build structured graph: Caller: cleanTableToPointer (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, Pointer, node count: 8
Callee: cleanTableToIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, UnsignedWord, node count: 25
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=125, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToIndex(Pointer, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|ZeroExtend 
7|EndNode 
8|LoopBegin 
9|ValuePhi(5 24, i64) 
10|FrameState@5 - 10|FrameState@5 { sourceLine=125, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToIndex(Pointer, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=CardTable.java,  }
 
11|Constant(1, i32) - node represents a constant 
12||<| 
13|Conditional 
15|LoopExit 
16|ValueProxy 
17|FrameState@31 - 17|FrameState@31 { sourceLine=128, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToIndex(Pointer, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanTableToIndex(CardTable.java:128) [bci: 31], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=31, sourceFile=CardTable.java,  }
 
18|Begin 
19|If 
20|MethodCallTarget 
21|Invoke#CardTable.cleanEntryAtIndex 
22|FrameState@20 - 22|FrameState@20 { sourceLine=125, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToIndex(Pointer, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanTableToIndex(CardTable.java:126) [bci: 17], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=20, sourceFile=CardTable.java,  }
 
23|SignExtend 
24|+ 
25|LoopEnd 
26|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 15
Callee: cleanTableToPointer (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, Pointer, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=118, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToPointer(Pointer, Pointer)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
4|- 
5|MethodCallTarget 
6|Invoke#CardTable.tableOffsetToIndex 
7|FrameState@12 - 7|FrameState@12 { sourceLine=119, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToPointer(Pointer, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanTableToPointer(CardTable.java:119) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=12, sourceFile=CardTable.java,  }
 
8|MethodCallTarget 
9|Invoke#CardTable.cleanTableToIndex 
10|FrameState@18 - 10|FrameState@18 { sourceLine=120, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToPointer(Pointer, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanTableToPointer(CardTable.java:120) [bci: 15], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=18, sourceFile=CardTable.java,  }
 
11|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 18
Callee: getFirstObjectTableStart (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=110, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getFirstObjectTableStart(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=110, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getFirstObjectTableStart(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getFirstObjectTableStart(AlignedHeapChunk.java:110) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Constant(2088, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 21
Callee: getFirstObjectTableLimit (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=115, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getFirstObjectTableLimit(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=115, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getFirstObjectTableLimit(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getFirstObjectTableLimit(AlignedHeapChunk.java:115) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Constant(4136, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: initializeTableToPointer (class: com.oracle.svm.core.genscavenge.FirstObjectTable), par: Pointer, Pointer, node count: 5
Callee: tableOffsetToIndex (class: com.oracle.svm.core.genscavenge.FirstObjectTable), par: UnsignedWord, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=584, code=ResolvedJavaMethodBytecode<FirstObjectTable.tableOffsetToIndex(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=FirstObjectTable.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|SignExtend 
5||/| 
6|Return 

build structured graph: Caller: initializeTableToPointer (class: com.oracle.svm.core.genscavenge.FirstObjectTable), par: Pointer, Pointer, node count: 8
Callee: initializeTableToIndex (class: com.oracle.svm.core.genscavenge.FirstObjectTable), par: Pointer, UnsignedWord, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=469, code=ResolvedJavaMethodBytecode<FirstObjectTable.initializeTableToIndex(Pointer, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=FirstObjectTable.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 24
Callee: initializeTableToPointer (class: com.oracle.svm.core.genscavenge.FirstObjectTable), par: Pointer, Pointer, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=208, code=ResolvedJavaMethodBytecode<FirstObjectTable.initializeTableToPointer(Pointer, Pointer)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=FirstObjectTable.java,  }
 
4|- 
5|MethodCallTarget 
6|Invoke#FirstObjectTable.tableOffsetToIndex 
7|FrameState@10 - 7|FrameState@10 { sourceLine=208, code=ResolvedJavaMethodBytecode<FirstObjectTable.initializeTableToPointer(Pointer, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.FirstObjectTable.initializeTableToPointer(FirstObjectTable.java:208) [bci: 7], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=FirstObjectTable.java,  }
 
8|MethodCallTarget 
9|Invoke#FirstObjectTable.initializeTableToIndex 
10|FrameState@16 - 10|FrameState@16 { sourceLine=209, code=ResolvedJavaMethodBytecode<FirstObjectTable.initializeTableToPointer(Pointer, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.FirstObjectTable.initializeTableToPointer(FirstObjectTable.java:209) [bci: 13], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=16, sourceFile=FirstObjectTable.java,  }
 
11|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 155
Callee: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 28
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=316, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
3|MethodCallTarget 
4|Invoke#AlignedHeapChunk.getAlignedHeapChunkStart 
5|FrameState@5 - 5|FrameState@5 { sourceLine=316, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:316) [bci: 2], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=5, sourceFile=HeapChunkProvider.java,  }
 
6|MethodCallTarget 
7|Invoke#HeapChunkProvider.resetChunkHeader 
8|FrameState@8 - 8|FrameState@8 { sourceLine=319, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:316) [bci: 5], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=8, sourceFile=HeapChunkProvider.java,  }
 
9|MethodCallTarget 
10|Invoke#AlignedHeapChunk.getCardTableStart 
11|FrameState@12 - 11|FrameState@12 { sourceLine=319, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:319) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=12, sourceFile=HeapChunkProvider.java,  }
 
12|MethodCallTarget 
13|Invoke#AlignedHeapChunk.getCardTableLimit 
14|FrameState@16 - 14|FrameState@16 { sourceLine=319, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:319) [bci: 13], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
15|MethodCallTarget 
16|Invoke#CardTable.cleanTableToPointer 
17|FrameState@19 - 17|FrameState@19 { sourceLine=319, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:319) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=19, sourceFile=HeapChunkProvider.java,  }
 
18|MethodCallTarget 
19|Invoke#AlignedHeapChunk.getFirstObjectTableStart 
20|FrameState@24 - 20|FrameState@24 { sourceLine=321, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:321) [bci: 21], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=24, sourceFile=HeapChunkProvider.java,  }
 
21|MethodCallTarget 
22|Invoke#AlignedHeapChunk.getFirstObjectTableLimit 
23|FrameState@28 - 23|FrameState@28 { sourceLine=321, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:321) [bci: 25], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=28, sourceFile=HeapChunkProvider.java,  }
 
24|MethodCallTarget 
25|Invoke#FirstObjectTable.initializeTableToPointer 
26|FrameState@31 - 26|FrameState@31 { sourceLine=321, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:321) [bci: 28], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=31, sourceFile=HeapChunkProvider.java,  }
 
27|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 165
Callee: getZapProducedHeapChunks (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 8
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=353, code=ResolvedJavaMethodBytecode<HeapPolicy.getZapProducedHeapChunks()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapPolicy.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Boolean, a -) - node represents a constant 
4|LogicConstant 
5|Constant(0, i32) - node represents a constant 
6|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
7|Return 

build structured graph: Caller: zap (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: HeapChunk$Header, WordBase, node count: 10
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 175
Callee: zap (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: HeapChunk$Header, WordBase, node count: 142
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=333, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
4|Constant(32, i64) - node represents a constant 
5|OffsetAddress 
6|CInterfaceRead 
7|Constant(0, i64) - node represents a constant 
8|OffsetAddress 
9|CInterfaceRead 
10|MethodCallTarget 
11|Invoke#HeapChunkProvider.log 
12|FrameState@17 - 12|FrameState@17 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 14], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=17, sourceFile=HeapChunkProvider.java,  }
 
13|Constant(  zap chunk: , a -) - node represents a constant 
14|IsNull 
15|BytecodeException#NULL_POINTER 
16|Begin 
17|Begin 
18|If 
19|FrameState@19 - 19|FrameState@19 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 19], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=19, sourceFile=HeapChunkProvider.java,  }
 
22|Pi 
23|MethodCallTarget 
24|Invoke#Log.string 
25|FrameState@22 - 25|FrameState@22 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 19], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=22, sourceFile=HeapChunkProvider.java,  }
 
26|IsNull 
27|BytecodeException#NULL_POINTER 
28|Begin 
29|Begin 
30|If 
31|FrameState@23 - 31|FrameState@23 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 23], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=23, sourceFile=HeapChunkProvider.java,  }
 
33|EndNode 
34|Merge 
35|EndNode 
36|ValuePhi(15 27 43 55 68 80 93 105 117, a -) 
37|Pi 
38|MethodCallTarget 
39|Invoke#Log.hex 
40|FrameState@26 - 40|FrameState@26 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 23], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=26, sourceFile=HeapChunkProvider.java,  }
 
41|Constant(  start: , a -) - node represents a constant 
42|IsNull 
43|BytecodeException#NULL_POINTER 
44|Begin 
45|Begin 
46|If 
47|FrameState@28 - 47|FrameState@28 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 28], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=28, sourceFile=HeapChunkProvider.java,  }
 
49|EndNode 
50|Pi 
51|MethodCallTarget 
52|Invoke#Log.string 
53|FrameState@31 - 53|FrameState@31 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 28], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=31, sourceFile=HeapChunkProvider.java,  }
 
54|IsNull 
55|BytecodeException#NULL_POINTER 
56|Begin 
57|Begin 
58|If 
59|FrameState@32 - 59|FrameState@32 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=32, sourceFile=HeapChunkProvider.java,  }
 
61|EndNode 
62|Pi 
63|MethodCallTarget 
64|Invoke#Log.hex 
65|FrameState@35 - 65|FrameState@35 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=35, sourceFile=HeapChunkProvider.java,  }
 
66|Constant(  limit: , a -) - node represents a constant 
67|IsNull 
68|BytecodeException#NULL_POINTER 
69|Begin 
70|Begin 
71|If 
72|FrameState@37 - 72|FrameState@37 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 37], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=37, sourceFile=HeapChunkProvider.java,  }
 
74|EndNode 
75|Pi 
76|MethodCallTarget 
77|Invoke#Log.string 
78|FrameState@40 - 78|FrameState@40 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 37], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=40, sourceFile=HeapChunkProvider.java,  }
 
79|IsNull 
80|BytecodeException#NULL_POINTER 
81|Begin 
82|Begin 
83|If 
84|FrameState@41 - 84|FrameState@41 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 41], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=41, sourceFile=HeapChunkProvider.java,  }
 
86|EndNode 
87|Pi 
88|MethodCallTarget 
89|Invoke#Log.hex 
90|FrameState@44 - 90|FrameState@44 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 41], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=44, sourceFile=HeapChunkProvider.java,  }
 
91|Constant(  value: , a -) - node represents a constant 
92|IsNull 
93|BytecodeException#NULL_POINTER 
94|Begin 
95|Begin 
96|If 
97|FrameState@46 - 97|FrameState@46 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 46], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=46, sourceFile=HeapChunkProvider.java,  }
 
99|EndNode 
100|Pi 
101|MethodCallTarget 
102|Invoke#Log.string 
103|FrameState@49 - 103|FrameState@49 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 46], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=49, sourceFile=HeapChunkProvider.java,  }
 
104|IsNull 
105|BytecodeException#NULL_POINTER 
106|Begin 
107|Begin 
108|If 
109|FrameState@50 - 109|FrameState@50 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 50], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=50, sourceFile=HeapChunkProvider.java,  }
 
111|EndNode 
112|Pi 
113|MethodCallTarget 
114|Invoke#Log.hex 
115|FrameState@53 - 115|FrameState@53 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 50], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=53, sourceFile=HeapChunkProvider.java,  }
 
116|IsNull 
117|BytecodeException#NULL_POINTER 
118|Begin 
119|Begin 
120|If 
121|FrameState@53 - 121|FrameState@53 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 53], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=53, sourceFile=HeapChunkProvider.java,  }
 
123|EndNode 
124|Pi 
125|MethodCallTarget 
126|Invoke#Log.newline 
127|FrameState@56 - 127|FrameState@56 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 53], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=56, sourceFile=HeapChunkProvider.java,  }
 
129|EndNode 
130|LoopBegin 
131|ValuePhi(6 149, i64) 
132|FrameState@60 - 132|FrameState@60 { sourceLine=336, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=60, sourceFile=HeapChunkProvider.java,  }
 
133|Constant(1, i32) - node represents a constant 
134|Constant(0, i32) - node represents a constant 
135||<| 
136|Conditional 
138|LoopExit 
139|ValueProxy 
140|FrameState@95 - 140|FrameState@95 { sourceLine=339, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:339) [bci: 95], stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=95, sourceFile=HeapChunkProvider.java,  }
 
141|Begin 
142|If 
143|SignExtend 
144|OffsetAddress 
145|JavaWrite 
146|FrameState@80 - 146|FrameState@80 { sourceLine=336, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:337) [bci: 75], stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=80, sourceFile=HeapChunkProvider.java,  }
 
147|Constant(8, i32) - node represents a constant 
148|SignExtend 
149|+ 
150|LoopEnd 
151|Return 
152|FrameState@-4[AFTER_EXCEPTION_BCI] - 152|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
153|Unwind 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 186
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: prepareNewAllocationChunk (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: ThreadLocalAllocation$Descriptor, node count: 18
Callee: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 226
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=108, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
3|Constant(1048576, i64) - node represents a constant 
4|MethodCallTarget 
5|Invoke#HeapChunkProvider.log 
6|FrameState@7 - 6|FrameState@7 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=7, sourceFile=HeapChunkProvider.java,  }
 
7|Constant([HeapChunkProvider.produceAlignedChunk  chunk size: , a -) - node represents a constant 
8|IsNull 
9|BytecodeException#NULL_POINTER 
10|Begin 
11|Begin 
12|If 
13|FrameState@9 - 13|FrameState@9 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=9, sourceFile=HeapChunkProvider.java,  }
 
16|Pi 
17|MethodCallTarget 
18|Invoke#Log.string 
19|FrameState@12 - 19|FrameState@12 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=12, sourceFile=HeapChunkProvider.java,  }
 
20|IsNull 
21|BytecodeException#NULL_POINTER 
22|Begin 
23|Begin 
24|If 
25|FrameState@13 - 25|FrameState@13 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 13], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=13, sourceFile=HeapChunkProvider.java,  }
 
27|EndNode 
28|Merge 
29|EndNode 
30|ValuePhi(9 21 36 55 67 79 110 118 130 142 192 204 217 229, a -) 
31|Pi 
32|MethodCallTarget 
33|Invoke#Log.unsigned 
34|FrameState@16 - 34|FrameState@16 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 13], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
35|IsNull 
36|BytecodeException#NULL_POINTER 
37|Begin 
38|Begin 
39|If 
40|FrameState@16 - 40|FrameState@16 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=16, sourceFile=HeapChunkProvider.java,  }
 
42|EndNode 
43|Pi 
44|MethodCallTarget 
45|Invoke#Log.newline 
46|FrameState@19 - 46|FrameState@19 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=19, sourceFile=HeapChunkProvider.java,  }
 
47|MethodCallTarget 
48|Invoke#HeapChunkProvider.popUnusedAlignedChunk 
49|FrameState@24 - 49|FrameState@24 { sourceLine=111, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:111) [bci: 21], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=24, sourceFile=HeapChunkProvider.java,  }
 
50|MethodCallTarget 
51|Invoke#HeapChunkProvider.log 
52|FrameState@28 - 52|FrameState@28 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 25], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=28, sourceFile=HeapChunkProvider.java,  }
 
53|Constant(  unused chunk: , a -) - node represents a constant 
54|IsNull 
55|BytecodeException#NULL_POINTER 
56|Begin 
57|Begin 
58|If 
59|FrameState@30 - 59|FrameState@30 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 30], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=30, sourceFile=HeapChunkProvider.java,  }
 
61|EndNode 
62|Pi 
63|MethodCallTarget 
64|Invoke#Log.string 
65|FrameState@33 - 65|FrameState@33 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 30], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=33, sourceFile=HeapChunkProvider.java,  }
 
66|IsNull 
67|BytecodeException#NULL_POINTER 
68|Begin 
69|Begin 
70|If 
71|FrameState@34 - 71|FrameState@34 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 34], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=34, sourceFile=HeapChunkProvider.java,  }
 
73|EndNode 
74|Pi 
75|MethodCallTarget 
76|Invoke#Log.hex 
77|FrameState@37 - 77|FrameState@37 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 34], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=37, sourceFile=HeapChunkProvider.java,  }
 
78|IsNull 
79|BytecodeException#NULL_POINTER 
80|Begin 
81|Begin 
82|If 
83|FrameState@37 - 83|FrameState@37 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 37], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=37, sourceFile=HeapChunkProvider.java,  }
 
85|EndNode 
86|Pi 
87|MethodCallTarget 
88|Invoke#Log.newline 
89|FrameState@40 - 89|FrameState@40 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 37], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=40, sourceFile=HeapChunkProvider.java,  }
 
90|Constant(1, i32) - node represents a constant 
91|Constant(0, i32) - node represents a constant 
92|Constant(0, i64) - node represents a constant 
93|== 
94|Conditional 
95|Begin 
96|Begin 
97|If 
98|MethodCallTarget 
99|Invoke#HeapChunkProvider.noteFirstAllocationTime 
100|FrameState@54 - 100|FrameState@54 { sourceLine=117, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:116) [bci: 51], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=54, sourceFile=HeapChunkProvider.java,  }
 
101|Constant(com.oracle.svm.core.os.OSCommittedMemoryProvider, a -) - node represents a constant 
102|MethodCallTarget 
103|Invoke#OSCommittedMemoryProvider.allocate 
104|FrameState@67 - 104|FrameState@67 { sourceLine=117, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:117) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=67, sourceFile=HeapChunkProvider.java,  }
 
105|== 
106|Conditional 
107|Begin 
108|Begin 
109|If 
110|Constant(java.lang.OutOfMemoryError, a -) - node represents a constant 
112|EndNode 
113|MethodCallTarget 
114|Invoke#HeapChunkProvider.log 
115|FrameState@87 - 115|FrameState@87 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=87, sourceFile=HeapChunkProvider.java,  }
 
116|Constant(  new chunk: , a -) - node represents a constant 
117|IsNull 
118|BytecodeException#NULL_POINTER 
119|Begin 
120|Begin 
121|If 
122|FrameState@89 - 122|FrameState@89 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=89, sourceFile=HeapChunkProvider.java,  }
 
124|EndNode 
125|Pi 
126|MethodCallTarget 
127|Invoke#Log.string 
128|FrameState@92 - 128|FrameState@92 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=92, sourceFile=HeapChunkProvider.java,  }
 
129|IsNull 
130|BytecodeException#NULL_POINTER 
131|Begin 
132|Begin 
133|If 
134|FrameState@93 - 134|FrameState@93 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 93], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=93, sourceFile=HeapChunkProvider.java,  }
 
136|EndNode 
137|Pi 
138|MethodCallTarget 
139|Invoke#Log.hex 
140|FrameState@96 - 140|FrameState@96 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 93], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=96, sourceFile=HeapChunkProvider.java,  }
 
141|IsNull 
142|BytecodeException#NULL_POINTER 
143|Begin 
144|Begin 
145|If 
146|FrameState@96 - 146|FrameState@96 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 96], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=96, sourceFile=HeapChunkProvider.java,  }
 
148|EndNode 
149|Pi 
150|MethodCallTarget 
151|Invoke#Log.newline 
152|FrameState@99 - 152|FrameState@99 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 96], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=99, sourceFile=HeapChunkProvider.java,  }
 
153|MethodCallTarget 
154|Invoke#HeapChunkProvider.initializeChunk 
155|FrameState@105 - 155|FrameState@105 { sourceLine=124, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:123) [bci: 102], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=105, sourceFile=HeapChunkProvider.java,  }
 
156|MethodCallTarget 
157|Invoke#HeapChunkProvider.resetAlignedHeapChunk 
158|FrameState@109 - 158|FrameState@109 { sourceLine=126, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:124) [bci: 106], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=109, sourceFile=HeapChunkProvider.java,  }
 
159|EndNode 
160|Merge 
161|EndNode 
162|ValuePhi(48 103, i64) 
163|FrameState@109 - 163|FrameState@109 { sourceLine=126, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=109, sourceFile=HeapChunkProvider.java,  }
 
166|MethodCallTarget 
167|Invoke#HeapPolicy.getZapProducedHeapChunks 
168|FrameState@182 - 168|FrameState@182 { sourceLine=129, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:129) [bci: 179], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=182, sourceFile=HeapChunkProvider.java,  }
 
169|== 
170|Begin 
171|Begin 
172|If 
173|MethodCallTarget 
174|Invoke#HeapPolicy.getProducedHeapChunkZapWord 
175|FrameState@189 - 175|FrameState@189 { sourceLine=130, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:130) [bci: 186], stackSize=2, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=189, sourceFile=HeapChunkProvider.java,  }
 
176|MethodCallTarget 
177|Invoke#HeapChunkProvider.zap 
178|FrameState@192 - 178|FrameState@192 { sourceLine=133, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:130) [bci: 189], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=192, sourceFile=HeapChunkProvider.java,  }
 
179|EndNode 
180|Merge 
181|EndNode 
182|FrameState@192 - 182|FrameState@192 { sourceLine=133, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=192, sourceFile=HeapChunkProvider.java,  }
 
183|Constant(com.oracle.svm.core.jdk.UninterruptibleUtils$AtomicUnsigned, a -) - node represents a constant 
184|MethodCallTarget 
185|Invoke#UninterruptibleUtils$AtomicUnsigned.addAndGet 
186|FrameState@199 - 186|FrameState@199 { sourceLine=133, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:133) [bci: 196], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=199, sourceFile=HeapChunkProvider.java,  }
 
187|MethodCallTarget 
188|Invoke#HeapChunkProvider.log 
189|FrameState@203 - 189|FrameState@203 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 200], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=203, sourceFile=HeapChunkProvider.java,  }
 
190|Constant(  result chunk: , a -) - node represents a constant 
191|IsNull 
192|BytecodeException#NULL_POINTER 
193|Begin 
194|Begin 
195|If 
196|FrameState@205 - 196|FrameState@205 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 205], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=205, sourceFile=HeapChunkProvider.java,  }
 
198|EndNode 
199|Pi 
200|MethodCallTarget 
201|Invoke#Log.string 
202|FrameState@208 - 202|FrameState@208 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 205], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=208, sourceFile=HeapChunkProvider.java,  }
 
203|IsNull 
204|BytecodeException#NULL_POINTER 
205|Begin 
206|Begin 
207|If 
208|FrameState@209 - 208|FrameState@209 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 209], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=209, sourceFile=HeapChunkProvider.java,  }
 
210|EndNode 
211|Pi 
212|MethodCallTarget 
213|Invoke#Log.hex 
214|FrameState@212 - 214|FrameState@212 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 209], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=212, sourceFile=HeapChunkProvider.java,  }
 
215|Constant(  ], a -) - node represents a constant 
216|IsNull 
217|BytecodeException#NULL_POINTER 
218|Begin 
219|Begin 
220|If 
221|FrameState@214 - 221|FrameState@214 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 214], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=214, sourceFile=HeapChunkProvider.java,  }
 
223|EndNode 
224|Pi 
225|MethodCallTarget 
226|Invoke#Log.string 
227|FrameState@217 - 227|FrameState@217 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 214], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=217, sourceFile=HeapChunkProvider.java,  }
 
228|IsNull 
229|BytecodeException#NULL_POINTER 
230|Begin 
231|Begin 
232|If 
233|FrameState@217 - 233|FrameState@217 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 217], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=217, sourceFile=HeapChunkProvider.java,  }
 
235|EndNode 
236|Pi 
237|MethodCallTarget 
238|Invoke#Log.newline 
239|FrameState@220 - 239|FrameState@220 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 217], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=220, sourceFile=HeapChunkProvider.java,  }
 
240|Return 
241|FrameState@-4[AFTER_EXCEPTION_BCI] - 241|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
242|Unwind 

build structured graph: Caller: allocateNewArray (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: Class, int, ThreadLocalAllocation$Descriptor, boolean, node count: 328
Callee: prepareNewAllocationChunk (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: ThreadLocalAllocation$Descriptor, node count: 27
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=524, code=ResolvedJavaMethodBytecode<ThreadLocalAllocation.prepareNewAllocationChunk(ThreadLocalAllocation$Descriptor)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=ThreadLocalAllocation.java,  }
 
3|MethodCallTarget 
4|Invoke#ThreadLocalAllocation.retireAllocationChunk 
5|FrameState@4 - 5|FrameState@4 { sourceLine=530, code=ResolvedJavaMethodBytecode<ThreadLocalAllocation.prepareNewAllocationChunk(ThreadLocalAllocation$Descriptor)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.ThreadLocalAllocation.prepareNewAllocationChunk(ThreadLocalAllocation.java:524) [bci: 1], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=4, sourceFile=ThreadLocalAllocation.java,  }
 
6|MethodCallTarget 
7|Invoke#ThreadLocalAllocation.popFromThreadLocalFreeList 
8|FrameState@7 - 8|FrameState@7 { sourceLine=530, code=ResolvedJavaMethodBytecode<ThreadLocalAllocation.prepareNewAllocationChunk(ThreadLocalAllocation$Descriptor)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.ThreadLocalAllocation.prepareNewAllocationChunk(ThreadLocalAllocation.java:530) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=ThreadLocalAllocation.java,  }
 
9|Constant(1, i32) - node represents a constant 
10|Constant(0, i32) - node represents a constant 
11|Constant(0, i64) - node represents a constant 
12|== 
13|Conditional 
14|Begin 
15|Begin 
16|If 
17|Constant(com.oracle.svm.core.genscavenge.HeapChunkProvider, a -) - node represents a constant 
18|MethodCallTarget 
19|Invoke#HeapChunkProvider.produceAlignedChunk 
20|FrameState@23 - 20|FrameState@23 { sourceLine=532, code=ResolvedJavaMethodBytecode<ThreadLocalAllocation.prepareNewAllocationChunk(ThreadLocalAllocation$Descriptor)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.ThreadLocalAllocation.prepareNewAllocationChunk(ThreadLocalAllocation.java:532) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=23, sourceFile=ThreadLocalAllocation.java,  }
 
21|EndNode 
22|Merge 
23|EndNode 
24|ValuePhi(7 19, i64) 
25|FrameState@24 - 25|FrameState@24 { sourceLine=539, code=ResolvedJavaMethodBytecode<ThreadLocalAllocation.prepareNewAllocationChunk(ThreadLocalAllocation$Descriptor)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=24, sourceFile=ThreadLocalAllocation.java,  }
 
26|Return 

build structured graph: Caller: allocateNewArray (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: Class, int, ThreadLocalAllocation$Descriptor, boolean, node count: 350
Callee: string (class: com.oracle.svm.core.log.Log$NoopLog), par: String, node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=393, code=ResolvedJavaMethodBytecode<Log$NoopLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Log.java,  }
 
4|Return 

build structured graph: Caller: getSizeFromObject (class: com.oracle.svm.core.hub.LayoutEncoding), par: Object, node count: 29
Callee: getInstanceSize (class: com.oracle.svm.core.hub.LayoutEncoding), par: int, node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=143, code=ResolvedJavaMethodBytecode<LayoutEncoding.getInstanceSize(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=LayoutEncoding.java,  }
 
3|ZeroExtend 
4|Return 

build structured graph: Caller: getObjectEnd (class: com.oracle.svm.core.hub.LayoutEncoding), par: Object, node count: 4
Callee: getSizeFromObject (class: com.oracle.svm.core.hub.LayoutEncoding), par: Object, node count: 32
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=188, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=LayoutEncoding.java,  }
 
3|IsNull 
4|BytecodeException#NULL_POINTER 
5|FrameState@1 - 5|FrameState@1 { sourceLine=188, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, nodeSourcePosition=at com.oracle.svm.core.snippets.KnownIntrinsics.readHub(Object) [bci: -1]
at com.oracle.svm.core.hub.LayoutEncoding.getSizeFromObject(LayoutEncoding.java:188) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=1, sourceFile=LayoutEncoding.java,  }
 
8|Begin 
9|If 
10|Begin 
11|Pi 
12|LoadHub 
13|MethodCallTarget 
14|Invoke#Class.getLayoutEncoding 
15|FrameState@7 - 15|FrameState@7 { sourceLine=188, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, nodeSourcePosition=at com.oracle.svm.core.hub.LayoutEncoding.getSizeFromObject(LayoutEncoding.java:188) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=LayoutEncoding.java,  }
 
16|MethodCallTarget 
17|Invoke#LayoutEncoding.isArray 
18|FrameState@12 - 18|FrameState@12 { sourceLine=189, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, nodeSourcePosition=at com.oracle.svm.core.hub.LayoutEncoding.getSizeFromObject(LayoutEncoding.java:189) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=12, sourceFile=LayoutEncoding.java,  }
 
19|Constant(0, i32) - node represents a constant 
20|== 
21|Begin 
22|Begin 
23|If 
24|ArrayLength 
25|MethodCallTarget 
26|Invoke#LayoutEncoding.getArraySize 
27|FrameState@23 - 27|FrameState@23 { sourceLine=190, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, nodeSourcePosition=at com.oracle.svm.core.hub.LayoutEncoding.getSizeFromObject(LayoutEncoding.java:190) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=23, sourceFile=LayoutEncoding.java,  }
 
28|Return 
29|MethodCallTarget 
30|Invoke#LayoutEncoding.getInstanceSize 
31|FrameState@28 - 31|FrameState@28 { sourceLine=192, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, nodeSourcePosition=at com.oracle.svm.core.hub.LayoutEncoding.getSizeFromObject(LayoutEncoding.java:192) [bci: 25], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=28, sourceFile=LayoutEncoding.java,  }
 
32|Return 
33|Unwind 

build structured graph: Caller: allocateNewArray (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: Class, int, ThreadLocalAllocation$Descriptor, boolean, node count: 399
Callee: getObjectEnd (class: com.oracle.svm.core.hub.LayoutEncoding), par: Object, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=201, code=ResolvedJavaMethodBytecode<LayoutEncoding.getObjectEnd(Object)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=LayoutEncoding.java,  }
 
3|WordCast 
4|MethodCallTarget 
5|Invoke#LayoutEncoding.getSizeFromObject 
6|FrameState@9 - 6|FrameState@9 { sourceLine=202, code=ResolvedJavaMethodBytecode<LayoutEncoding.getObjectEnd(Object)>, nodeSourcePosition=at com.oracle.svm.core.hub.LayoutEncoding.getObjectEnd(LayoutEncoding.java:202) [bci: 6], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=9, sourceFile=LayoutEncoding.java,  }
 
7|+ 
8|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 6
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 69
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 86
Callee: newline (class: com.oracle.svm.core.log.RealLog), par: , node count: 25
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=178, code=ResolvedJavaMethodBytecode<RealLog.newline()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
3|Constant([B, a -) - node represents a constant 
4|MethodCallTarget 
5|Invoke#Log.string 
6|FrameState@7 - 6|FrameState@7 { sourceLine=178, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:178) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
7|LoadField#autoflush - node represents a read of a static or instance field. 
8|Constant(0, i32) - node represents a constant 
9|== 
10|Begin 
11|Begin 
12|If 
13|MethodCallTarget 
14|Invoke#RealLog.flush 
15|FrameState@19 - 15|FrameState@19 { sourceLine=180, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:180) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=19, sourceFile=RealLog.java,  }
 
16|EndNode 
17|Merge 
18|EndNode 
19|FrameState@20 - 19|FrameState@20 { sourceLine=182, code=ResolvedJavaMethodBytecode<RealLog.newline()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=20, sourceFile=RealLog.java,  }
 
20|LoadField#indent - node represents a read of a static or instance field. 
21|MethodCallTarget 
22|Invoke#RealLog.spaces 
23|FrameState@28 - 23|FrameState@28 { sourceLine=182, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:182) [bci: 25], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=28, sourceFile=RealLog.java,  }
 
24|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 183
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 202
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: exitIfAllocationDisallowed (class: com.oracle.svm.core.genscavenge.HeapImpl), par: String, String, node count: 13
Callee: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 218
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NoAllocationVerifier.java,  }
 
4|Constant(com.oracle.svm.core.log.RealLog, a -) - node represents a constant 
5|Constant([NoAllocationVerifier detected disallowed allocation: , a -) - node represents a constant 
6|MethodCallTarget 
7|Invoke#RealLog.string 
8|FrameState@8 - 8|FrameState@8 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=8, sourceFile=NoAllocationVerifier.java,  }
 
9|IsNull 
10|BytecodeException#NULL_POINTER 
11|Begin 
12|Begin 
13|If 
14|FrameState@9 - 14|FrameState@9 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=9, sourceFile=NoAllocationVerifier.java,  }
 
17|Pi 
18|MethodCallTarget 
19|Invoke#Log.string 
20|FrameState@12 - 20|FrameState@12 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=12, sourceFile=NoAllocationVerifier.java,  }
 
21|Constant(: , a -) - node represents a constant 
22|IsNull 
23|BytecodeException#NULL_POINTER 
24|Begin 
25|Begin 
26|If 
27|FrameState@14 - 27|FrameState@14 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 14], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=14, sourceFile=NoAllocationVerifier.java,  }
 
29|EndNode 
30|Merge 
31|EndNode 
32|ValuePhi(10 23 38 50 101 118 133 147 163 178 188 207 223 230, a -) 
33|Pi 
34|MethodCallTarget 
35|Invoke#Log.string 
36|FrameState@17 - 36|FrameState@17 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 14], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=17, sourceFile=NoAllocationVerifier.java,  }
 
37|IsNull 
38|BytecodeException#NULL_POINTER 
39|Begin 
40|Begin 
41|If 
42|FrameState@18 - 42|FrameState@18 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 18], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=18, sourceFile=NoAllocationVerifier.java,  }
 
44|EndNode 
45|Pi 
46|MethodCallTarget 
47|Invoke#Log.string 
48|FrameState@21 - 48|FrameState@21 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 18], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=21, sourceFile=NoAllocationVerifier.java,  }
 
49|IsNull 
50|BytecodeException#NULL_POINTER 
51|Begin 
52|Begin 
53|If 
54|FrameState@21 - 54|FrameState@21 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 21], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=21, sourceFile=NoAllocationVerifier.java,  }
 
56|EndNode 
57|Pi 
58|MethodCallTarget 
59|Invoke#Log.newline 
60|FrameState@24 - 60|FrameState@24 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 21], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=24, sourceFile=NoAllocationVerifier.java,  }
 
61|Constant(com.oracle.svm.core.threadlocal.FastThreadLocalObject, a -) - node represents a constant 
62|ReadIsolateThreadFloating 
63|LoadVMThreadLocal 
64|Constant(null, a -) - node represents a constant 
65|IsNull 
66|Begin 
67|Begin 
68|If 
69|Constant([NoAllocationVerifier stack: , a -) - node represents a constant 
70|MethodCallTarget 
71|Invoke#RealLog.string 
72|FrameState@42 - 72|FrameState@42 { sourceLine=53, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:53) [bci: 39], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=42, sourceFile=NoAllocationVerifier.java,  }
 
73|LoadVMThreadLocal 
74|LogicConstant 
76|EndNode 
77|LoopBegin 
78|ValuePhi(73 181, a -) 
79|FrameState@53 - 79|FrameState@53 { sourceLine=54, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=53, sourceFile=NoAllocationVerifier.java,  }
 
80|IsNull 
81|Begin 
83|LoopExit 
84|ValueProxy 
85|FrameState@92 - 85|FrameState@92 { sourceLine=57, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:57) [bci: 92], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=92, sourceFile=NoAllocationVerifier.java,  }
 
86|If 
87|MethodCallTarget 
88|Invoke#RealLog.newline 
89|FrameState@63 - 89|FrameState@63 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 60], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=63, sourceFile=NoAllocationVerifier.java,  }
 
90|Constant(  , a -) - node represents a constant 
91|IsNull 
92|BytecodeException#NULL_POINTER 
93|Begin 
94|Begin 
95|If 
96|FrameState@65 - 96|FrameState@65 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 65], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=65, sourceFile=NoAllocationVerifier.java,  }
 
98|EndNode 
99|LoopExit 
100|ValueProxy 
101|ValueProxy 
102|FrameState@-4[AFTER_EXCEPTION_BCI] - 102|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
103|Pi 
104|MethodCallTarget 
105|Invoke#Log.string 
106|FrameState@68 - 106|FrameState@68 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 65], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=68, sourceFile=NoAllocationVerifier.java,  }
 
107|Constant(  reason: , a -) - node represents a constant 
108|IsNull 
109|BytecodeException#NULL_POINTER 
110|Begin 
111|Begin 
112|If 
113|FrameState@70 - 113|FrameState@70 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 70], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=70, sourceFile=NoAllocationVerifier.java,  }
 
115|EndNode 
116|LoopExit 
117|ValueProxy 
118|ValueProxy 
119|FrameState@-4[AFTER_EXCEPTION_BCI] - 119|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
120|Pi 
121|MethodCallTarget 
122|Invoke#Log.string 
123|FrameState@73 - 123|FrameState@73 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 70], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=73, sourceFile=NoAllocationVerifier.java,  }
 
124|BytecodeException#NULL_POINTER 
125|Begin 
126|Begin 
127|If 
128|FrameState@74 - 128|FrameState@74 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 74], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=74, sourceFile=NoAllocationVerifier.java,  }
 
130|EndNode 
131|LoopExit 
132|ValueProxy 
133|ValueProxy 
134|FrameState@-4[AFTER_EXCEPTION_BCI] - 134|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
135|Pi 
136|LoadField#reason - node represents a read of a static or instance field. 
137|IsNull 
138|BytecodeException#NULL_POINTER 
139|Begin 
140|Begin 
141|If 
142|FrameState@77 - 142|FrameState@77 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 77], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=77, sourceFile=NoAllocationVerifier.java,  }
 
144|EndNode 
145|LoopExit 
146|ValueProxy 
147|ValueProxy 
148|FrameState@-4[AFTER_EXCEPTION_BCI] - 148|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
149|Pi 
150|MethodCallTarget 
151|Invoke#Log.string 
152|FrameState@80 - 152|FrameState@80 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 77], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=80, sourceFile=NoAllocationVerifier.java,  }
 
153|IsNull 
154|BytecodeException#NULL_POINTER 
155|Begin 
156|Begin 
157|If 
158|FrameState@80 - 158|FrameState@80 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 80], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=80, sourceFile=NoAllocationVerifier.java,  }
 
160|EndNode 
161|LoopExit 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|Pi 
166|MethodCallTarget 
167|Invoke#Log.newline 
168|FrameState@83 - 168|FrameState@83 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 80], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=83, sourceFile=NoAllocationVerifier.java,  }
 
169|BytecodeException#NULL_POINTER 
170|Begin 
171|Begin 
172|If 
173|FrameState@85 - 173|FrameState@85 { sourceLine=54, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:54) [bci: 85], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=85, sourceFile=NoAllocationVerifier.java,  }
 
175|EndNode 
176|LoopExit 
177|ValueProxy 
178|ValueProxy 
179|FrameState@-4[AFTER_EXCEPTION_BCI] - 179|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
180|Pi 
181|LoadField#next - node represents a read of a static or instance field. 
182|LoopEnd 
183|Constant(], a -) - node represents a constant 
184|MethodCallTarget 
185|Invoke#RealLog.string 
186|FrameState@100 - 186|FrameState@100 { sourceLine=57, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:57) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=100, sourceFile=NoAllocationVerifier.java,  }
 
187|IsNull 
188|BytecodeException#NULL_POINTER 
189|Begin 
190|Begin 
191|If 
192|FrameState@100 - 192|FrameState@100 { sourceLine=57, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:57) [bci: 100], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=100, sourceFile=NoAllocationVerifier.java,  }
 
194|EndNode 
195|Pi 
196|MethodCallTarget 
197|Invoke#Log.newline 
198|FrameState@103 - 198|FrameState@103 { sourceLine=57, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:57) [bci: 100], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=103, sourceFile=NoAllocationVerifier.java,  }
 
199|EndNode 
200|Merge 
201|EndNode 
202|FrameState@104 - 202|FrameState@104 { sourceLine=59, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=104, sourceFile=NoAllocationVerifier.java,  }
 
203|MethodCallTarget 
204|Invoke#RealLog.string 
205|FrameState@112 - 205|FrameState@112 { sourceLine=59, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:59) [bci: 109], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=112, sourceFile=NoAllocationVerifier.java,  }
 
206|IsNull 
207|BytecodeException#NULL_POINTER 
208|Begin 
209|Begin 
210|If 
211|FrameState@112 - 211|FrameState@112 { sourceLine=59, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:59) [bci: 112], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=112, sourceFile=NoAllocationVerifier.java,  }
 
213|EndNode 
214|Pi 
215|MethodCallTarget 
216|Invoke#Log.newline 
217|FrameState@115 - 217|FrameState@115 { sourceLine=59, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:59) [bci: 112], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=115, sourceFile=NoAllocationVerifier.java,  }
 
218|Constant(Attempt to allocate while allocation was explicitly disabled using a NoAllocationVerifier, a -) - node represents a constant 
219|MethodCallTarget 
220|Invoke#VMError.shouldNotReachHere 
221|FrameState@121 - 221|FrameState@121 { sourceLine=61, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:61) [bci: 118], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=121, sourceFile=NoAllocationVerifier.java,  }
 
222|IsNull 
223|BytecodeException#NULL_POINTER 
224|Begin 
225|Begin 
226|If 
227|FrameState@121 - 227|FrameState@121 { sourceLine=61, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:61) [bci: 121], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=121, sourceFile=NoAllocationVerifier.java,  }
 
229|EndNode 
230|Pi 
232|EndNode 
233|FrameState@-4[AFTER_EXCEPTION_BCI] - 233|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
234|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 6
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 69
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 86
Callee: newline (class: com.oracle.svm.core.log.RealLog), par: , node count: 25
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=178, code=ResolvedJavaMethodBytecode<RealLog.newline()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
3|Constant([B, a -) - node represents a constant 
4|MethodCallTarget 
5|Invoke#Log.string 
6|FrameState@7 - 6|FrameState@7 { sourceLine=178, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:178) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
7|LoadField#autoflush - node represents a read of a static or instance field. 
8|Constant(0, i32) - node represents a constant 
9|== 
10|Begin 
11|Begin 
12|If 
13|MethodCallTarget 
14|Invoke#RealLog.flush 
15|FrameState@19 - 15|FrameState@19 { sourceLine=180, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:180) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=19, sourceFile=RealLog.java,  }
 
16|EndNode 
17|Merge 
18|EndNode 
19|FrameState@20 - 19|FrameState@20 { sourceLine=182, code=ResolvedJavaMethodBytecode<RealLog.newline()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=20, sourceFile=RealLog.java,  }
 
20|LoadField#indent - node represents a read of a static or instance field. 
21|MethodCallTarget 
22|Invoke#RealLog.spaces 
23|FrameState@28 - 23|FrameState@28 { sourceLine=182, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:182) [bci: 25], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=28, sourceFile=RealLog.java,  }
 
24|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 183
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 202
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: getSizeFromObject (class: com.oracle.svm.core.hub.LayoutEncoding), par: Object, node count: 29
Callee: getInstanceSize (class: com.oracle.svm.core.hub.LayoutEncoding), par: int, node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=143, code=ResolvedJavaMethodBytecode<LayoutEncoding.getInstanceSize(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=LayoutEncoding.java,  }
 
3|ZeroExtend 
4|Return 

build structured graph: Caller: getObjectEnd (class: com.oracle.svm.core.hub.LayoutEncoding), par: Object, node count: 4
Callee: getSizeFromObject (class: com.oracle.svm.core.hub.LayoutEncoding), par: Object, node count: 32
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=188, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=LayoutEncoding.java,  }
 
3|IsNull 
4|BytecodeException#NULL_POINTER 
5|FrameState@1 - 5|FrameState@1 { sourceLine=188, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, nodeSourcePosition=at com.oracle.svm.core.snippets.KnownIntrinsics.readHub(Object) [bci: -1]
at com.oracle.svm.core.hub.LayoutEncoding.getSizeFromObject(LayoutEncoding.java:188) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=1, sourceFile=LayoutEncoding.java,  }
 
8|Begin 
9|If 
10|Begin 
11|Pi 
12|LoadHub 
13|MethodCallTarget 
14|Invoke#Class.getLayoutEncoding 
15|FrameState@7 - 15|FrameState@7 { sourceLine=188, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, nodeSourcePosition=at com.oracle.svm.core.hub.LayoutEncoding.getSizeFromObject(LayoutEncoding.java:188) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=LayoutEncoding.java,  }
 
16|MethodCallTarget 
17|Invoke#LayoutEncoding.isArray 
18|FrameState@12 - 18|FrameState@12 { sourceLine=189, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, nodeSourcePosition=at com.oracle.svm.core.hub.LayoutEncoding.getSizeFromObject(LayoutEncoding.java:189) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=12, sourceFile=LayoutEncoding.java,  }
 
19|Constant(0, i32) - node represents a constant 
20|== 
21|Begin 
22|Begin 
23|If 
24|ArrayLength 
25|MethodCallTarget 
26|Invoke#LayoutEncoding.getArraySize 
27|FrameState@23 - 27|FrameState@23 { sourceLine=190, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, nodeSourcePosition=at com.oracle.svm.core.hub.LayoutEncoding.getSizeFromObject(LayoutEncoding.java:190) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=23, sourceFile=LayoutEncoding.java,  }
 
28|Return 
29|MethodCallTarget 
30|Invoke#LayoutEncoding.getInstanceSize 
31|FrameState@28 - 31|FrameState@28 { sourceLine=192, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, nodeSourcePosition=at com.oracle.svm.core.hub.LayoutEncoding.getSizeFromObject(LayoutEncoding.java:192) [bci: 25], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=28, sourceFile=LayoutEncoding.java,  }
 
32|Return 
33|Unwind 

build structured graph: Caller: getSizeFromObject (class: com.oracle.svm.core.hub.LayoutEncoding), par: Object, node count: 29
Callee: getInstanceSize (class: com.oracle.svm.core.hub.LayoutEncoding), par: int, node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=143, code=ResolvedJavaMethodBytecode<LayoutEncoding.getInstanceSize(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=LayoutEncoding.java,  }
 
3|ZeroExtend 
4|Return 

build structured graph: Caller: getXmx (class: com.oracle.svm.core.option.XOptions), par: , node count: 2
Callee: singleton (class: com.oracle.svm.core.option.XOptions), par: , node count: 6
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<XOptions.singleton()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=XOptions.java,  }
 
2|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
3|Constant(com.oracle.svm.core.option.XOptions, a -) - node represents a constant 
4|LogicConstant 
5|Return 

build structured graph: Caller: getMaximumHeapSize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 13
Callee: getXmx (class: com.oracle.svm.core.option.XOptions), par: , node count: 15
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=57, code=ResolvedJavaMethodBytecode<XOptions.getXmx()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=XOptions.java,  }
 
2|MethodCallTarget 
3|Invoke#XOptions.singleton 
4|FrameState@3 - 4|FrameState@3 { sourceLine=57, code=ResolvedJavaMethodBytecode<XOptions.getXmx()>, nodeSourcePosition=at com.oracle.svm.core.option.XOptions.getXmx(XOptions.java:57) [bci: 0], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=3, sourceFile=XOptions.java,  }
 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@3 - 10|FrameState@3 { sourceLine=57, code=ResolvedJavaMethodBytecode<XOptions.getXmx()>, nodeSourcePosition=at com.oracle.svm.core.option.XOptions.getXmx(XOptions.java:57) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=true, bci=3, sourceFile=XOptions.java,  }
 
13|Pi 
14|LoadField#xmx - node represents a read of a static or instance field. 
15|Return 
16|Unwind 

build structured graph: Caller: setMaximumHeapSize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: UnsignedWord, node count: 5
Callee: string (class: com.oracle.svm.core.log.Log$NoopLog), par: String, node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=393, code=ResolvedJavaMethodBytecode<Log$NoopLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Log.java,  }
 
4|Return 

build structured graph: Caller: getMaximumHeapSize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 47
Callee: setMaximumHeapSize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: UnsignedWord, node count: 86
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=279, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=HeapPolicy.java,  }
 
3|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
4|Constant([HeapPolicy.setMaximumHeapSize:, a -) - node represents a constant 
5|MethodCallTarget 
6|Invoke#Log$NoopLog.string 
7|FrameState@8 - 7|FrameState@8 { sourceLine=279, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:279) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=8, sourceFile=HeapPolicy.java,  }
 
8|LoadField#maximumHeapSize - node represents a read of a static or instance field. 
9|StoreField#maximumHeapSize - node represents a write to a static or instance field. 
10|FrameState@17 - 10|FrameState@17 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:281) [bci: 14], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=17, sourceFile=HeapPolicy.java,  }
 
11|Constant(  old: , a -) - node represents a constant 
12|IsNull 
13|BytecodeException#NULL_POINTER 
14|Begin 
15|Begin 
16|If 
17|FrameState@20 - 17|FrameState@20 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=20, sourceFile=HeapPolicy.java,  }
 
20|Pi 
21|MethodCallTarget 
22|Invoke#Log.string 
23|FrameState@23 - 23|FrameState@23 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=23, sourceFile=HeapPolicy.java,  }
 
24|IsNull 
25|BytecodeException#NULL_POINTER 
26|Begin 
27|Begin 
28|If 
29|FrameState@24 - 29|FrameState@24 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 24], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=24, sourceFile=HeapPolicy.java,  }
 
31|EndNode 
32|Merge 
33|EndNode 
34|ValuePhi(13 25 41 54 67 79, a -) 
35|Pi 
36|MethodCallTarget 
37|Invoke#Log.unsigned 
38|FrameState@27 - 38|FrameState@27 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 24], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=27, sourceFile=HeapPolicy.java,  }
 
39|Constant(  new: , a -) - node represents a constant 
40|IsNull 
41|BytecodeException#NULL_POINTER 
42|Begin 
43|Begin 
44|If 
45|FrameState@29 - 45|FrameState@29 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 29], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=29, sourceFile=HeapPolicy.java,  }
 
47|EndNode 
48|Pi 
49|MethodCallTarget 
50|Invoke#Log.string 
51|FrameState@32 - 51|FrameState@32 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 29], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=32, sourceFile=HeapPolicy.java,  }
 
52|LoadField#maximumHeapSize - node represents a read of a static or instance field. 
53|IsNull 
54|BytecodeException#NULL_POINTER 
55|Begin 
56|Begin 
57|If 
58|FrameState@35 - 58|FrameState@35 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 35], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=35, sourceFile=HeapPolicy.java,  }
 
60|EndNode 
61|Pi 
62|MethodCallTarget 
63|Invoke#Log.unsigned 
64|FrameState@38 - 64|FrameState@38 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 35], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=38, sourceFile=HeapPolicy.java,  }
 
65|Constant( ], a -) - node represents a constant 
66|IsNull 
67|BytecodeException#NULL_POINTER 
68|Begin 
69|Begin 
70|If 
71|FrameState@40 - 71|FrameState@40 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 40], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=40, sourceFile=HeapPolicy.java,  }
 
73|EndNode 
74|Pi 
75|MethodCallTarget 
76|Invoke#Log.string 
77|FrameState@43 - 77|FrameState@43 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 40], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=43, sourceFile=HeapPolicy.java,  }
 
78|IsNull 
79|BytecodeException#NULL_POINTER 
80|Begin 
81|Begin 
82|If 
83|FrameState@43 - 83|FrameState@43 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 43], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=43, sourceFile=HeapPolicy.java,  }
 
85|EndNode 
86|Pi 
87|MethodCallTarget 
88|Invoke#Log.newline 
89|FrameState@46 - 89|FrameState@46 { sourceLine=282, code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.setMaximumHeapSize(HeapPolicy.java:282) [bci: 43], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=46, sourceFile=HeapPolicy.java,  }
 
90|Return 
91|FrameState@-4[AFTER_EXCEPTION_BCI] - 91|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<HeapPolicy.setMaximumHeapSize(UnsignedWord)>, stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
92|Unwind 

build structured graph: Caller: hasSize (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 2
Callee: support (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 6
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=46, code=ResolvedJavaMethodBytecode<PhysicalMemory.support()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=PhysicalMemory.java,  }
 
2|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
3|Constant(com.oracle.svm.core.posix.linux.LinuxPhysicalMemory$PhysicalMemorySupportImpl, a -) - node represents a constant 
4|LogicConstant 
5|Return 

build structured graph: Caller: getMaximumHeapSize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 55
Callee: hasSize (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 17
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=58, code=ResolvedJavaMethodBytecode<PhysicalMemory.hasSize()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=PhysicalMemory.java,  }
 
2|MethodCallTarget 
3|Invoke#PhysicalMemory.support 
4|FrameState@3 - 4|FrameState@3 { sourceLine=58, code=ResolvedJavaMethodBytecode<PhysicalMemory.hasSize()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.hasSize(PhysicalMemory.java:58) [bci: 0], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=3, sourceFile=PhysicalMemory.java,  }
 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@3 - 10|FrameState@3 { sourceLine=58, code=ResolvedJavaMethodBytecode<PhysicalMemory.hasSize()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.hasSize(PhysicalMemory.java:58) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=true, bci=3, sourceFile=PhysicalMemory.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#PhysicalMemory$PhysicalMemorySupport.hasSize 
16|FrameState@8 - 16|FrameState@8 { sourceLine=58, code=ResolvedJavaMethodBytecode<PhysicalMemory.hasSize()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.hasSize(PhysicalMemory.java:58) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=8, sourceFile=PhysicalMemory.java,  }
 
17|Return 
18|Unwind 

build structured graph: Caller: size (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 2
Callee: support (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 6
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=46, code=ResolvedJavaMethodBytecode<PhysicalMemory.support()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=PhysicalMemory.java,  }
 
2|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
3|Constant(com.oracle.svm.core.posix.linux.LinuxPhysicalMemory$PhysicalMemorySupportImpl, a -) - node represents a constant 
4|LogicConstant 
5|Return 

build structured graph: Caller: getMaximumHeapSize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 62
Callee: size (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 17
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=53, code=ResolvedJavaMethodBytecode<PhysicalMemory.size()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=PhysicalMemory.java,  }
 
2|MethodCallTarget 
3|Invoke#PhysicalMemory.support 
4|FrameState@3 - 4|FrameState@3 { sourceLine=53, code=ResolvedJavaMethodBytecode<PhysicalMemory.size()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.size(PhysicalMemory.java:53) [bci: 0], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=3, sourceFile=PhysicalMemory.java,  }
 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@3 - 10|FrameState@3 { sourceLine=53, code=ResolvedJavaMethodBytecode<PhysicalMemory.size()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.size(PhysicalMemory.java:53) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=true, bci=3, sourceFile=PhysicalMemory.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#PhysicalMemory$PhysicalMemorySupport.size 
16|FrameState@8 - 16|FrameState@8 { sourceLine=53, code=ResolvedJavaMethodBytecode<PhysicalMemory.size()>, nodeSourcePosition=at com.oracle.svm.core.heap.PhysicalMemory.size(PhysicalMemory.java:53) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=8, sourceFile=PhysicalMemory.java,  }
 
17|Return 
18|Unwind 

build structured graph: Caller: getMaximumHeapSizePercent (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 3
Callee: getValue (class: com.oracle.svm.core.option.RuntimeOptionKey), par: , node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=46, code=ResolvedJavaMethodBytecode<RuntimeOptionKey.getValue()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=RuntimeOptionKey.java,  }
 
3|Constant(com.oracle.svm.core.option.RuntimeOptionValues, a -) - node represents a constant 
4|MethodCallTarget 
5|Invoke#OptionKey.getValue 
6|FrameState@7 - 6|FrameState@7 { sourceLine=46, code=ResolvedJavaMethodBytecode<RuntimeOptionKey.getValue()>, nodeSourcePosition=at com.oracle.svm.core.option.RuntimeOptionKey.getValue(RuntimeOptionKey.java:46) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=7, sourceFile=RuntimeOptionKey.java,  }
 
7|Return 

build structured graph: Caller: getMaximumHeapSize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 65
Callee: getMaximumHeapSizePercent (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 48
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=175, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSizePercent()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=HeapPolicy.java,  }
 
2|Constant(com.oracle.svm.core.option.RuntimeOptionKey, a -) - node represents a constant 
3|MethodCallTarget 
4|Invoke#RuntimeOptionKey.getValue 
5|FrameState@6 - 5|FrameState@6 { sourceLine=175, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSizePercent()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSizePercent(HeapPolicy.java:175) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=6, sourceFile=HeapPolicy.java,  }
 
6|InstanceOf 
7|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
8|BytecodeException#CLASS_CAST 
9|Begin 
10|Begin 
11|If 
12|FrameState@6 - 12|FrameState@6 { sourceLine=175, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSizePercent()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSizePercent(HeapPolicy.java:175) [bci: 6], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=6, sourceFile=HeapPolicy.java,  }
 
15|Pi 
16|IsNull 
17|BytecodeException#NULL_POINTER 
18|Begin 
19|Begin 
20|If 
21|FrameState@9 - 21|FrameState@9 { sourceLine=175, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSizePercent()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSizePercent(HeapPolicy.java:175) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=9, sourceFile=HeapPolicy.java,  }
 
23|EndNode 
24|Merge 
25|EndNode 
26|ValuePhi(8 17, a -) 
27|Pi 
28|Unbox 
29|Constant(0, i32) - node represents a constant 
30|< 
31|Begin 
32|Begin 
33|If 
34|Constant(100, i32) - node represents a constant 
35|Constant(101, i32) - node represents a constant 
36|< 
37|Constant(1, i32) - node represents a constant 
38|Conditional 
40|EndNode 
41|Merge 
42|EndNode 
43|ValuePhi(38 29, i32) 
44|FrameState@28 - 44|FrameState@28 { sourceLine=176, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSizePercent()>, stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=28, sourceFile=HeapPolicy.java,  }
 
45|Constant(MaximumHeapSizePercent should be in [0 ..100], a -) - node represents a constant 
46|MethodCallTarget 
47|Invoke#VMError.guarantee 
48|FrameState@33 - 48|FrameState@33 { sourceLine=177, code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSizePercent()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapPolicy.getMaximumHeapSizePercent(HeapPolicy.java:176) [bci: 30], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=33, sourceFile=HeapPolicy.java,  }
 
49|Return 
50|FrameState@-4[AFTER_EXCEPTION_BCI] - 50|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<HeapPolicy.getMaximumHeapSizePercent()>, stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
51|Unwind 

build structured graph: Caller: hasSize (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 2
Callee: support (class: com.oracle.svm.core.heap.PhysicalMemory), par: , node count: 6
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=46, code=ResolvedJavaMethodBytecode<PhysicalMemory.support()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=PhysicalMemory.java,  }
 
2|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
3|Constant(com.oracle.svm.core.posix.linux.LinuxPhysicalMemory$PhysicalMemorySupportImpl, a -) - node represents a constant 
4|LogicConstant 
5|Return 

build structured graph: Caller: setMaximumHeapSize (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: UnsignedWord, node count: 5
Callee: string (class: com.oracle.svm.core.log.Log$NoopLog), par: String, node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=393, code=ResolvedJavaMethodBytecode<Log$NoopLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Log.java,  }
 
4|Return 

build structured graph: Caller: getXmx (class: com.oracle.svm.core.option.XOptions), par: , node count: 2
Callee: singleton (class: com.oracle.svm.core.option.XOptions), par: , node count: 6
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=45, code=ResolvedJavaMethodBytecode<XOptions.singleton()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=XOptions.java,  }
 
2|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
3|Constant(com.oracle.svm.core.option.XOptions, a -) - node represents a constant 
4|LogicConstant 
5|Return 

build structured graph: Caller: getMaximumHeapSizePercent (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 3
Callee: getValue (class: com.oracle.svm.core.option.RuntimeOptionKey), par: , node count: 8
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=46, code=ResolvedJavaMethodBytecode<RuntimeOptionKey.getValue()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=RuntimeOptionKey.java,  }
 
3|Constant(com.oracle.svm.core.option.RuntimeOptionValues, a -) - node represents a constant 
4|MethodCallTarget 
5|Invoke#OptionKey.getValue 
6|FrameState@7 - 6|FrameState@7 { sourceLine=46, code=ResolvedJavaMethodBytecode<RuntimeOptionKey.getValue()>, nodeSourcePosition=at com.oracle.svm.core.option.RuntimeOptionKey.getValue(RuntimeOptionKey.java:46) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=7, sourceFile=RuntimeOptionKey.java,  }
 
7|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: popUnusedAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 3
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: popUnusedAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 122
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 46
Callee: popUnusedAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 200
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunkProvider.log 
5|FrameState@3 - 5|FrameState@3 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 0], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=3, sourceFile=HeapChunkProvider.java,  }
 
6|Constant(  old list top: , a -) - node represents a constant 
7|IsNull 
8|BytecodeException#NULL_POINTER 
9|Begin 
10|Begin 
11|If 
12|FrameState@5 - 12|FrameState@5 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=5, sourceFile=HeapChunkProvider.java,  }
 
15|Pi 
16|MethodCallTarget 
17|Invoke#Log.string 
18|FrameState@8 - 18|FrameState@8 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=8, sourceFile=HeapChunkProvider.java,  }
 
19|LoadField#unusedAlignedChunks - node represents a read of a static or instance field. 
20|IsNull 
21|BytecodeException#NULL_POINTER 
22|Begin 
23|Begin 
24|If 
25|FrameState@12 - 25|FrameState@12 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 12], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=12, sourceFile=HeapChunkProvider.java,  }
 
27|EndNode 
28|Merge 
29|EndNode 
30|ValuePhi(8 21 36 49 62 74 86 112 128 141 153 165 178 190 202, a -) 
31|Pi 
32|MethodCallTarget 
33|Invoke#UninterruptibleUtils$AtomicPointer.get 
34|FrameState@15 - 34|FrameState@15 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 12], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=15, sourceFile=HeapChunkProvider.java,  }
 
35|IsNull 
36|BytecodeException#NULL_POINTER 
37|Begin 
38|Begin 
39|If 
40|FrameState@15 - 40|FrameState@15 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 15], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=15, sourceFile=HeapChunkProvider.java,  }
 
42|EndNode 
43|Pi 
44|MethodCallTarget 
45|Invoke#Log.hex 
46|FrameState@18 - 46|FrameState@18 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 15], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=HeapChunkProvider.java,  }
 
47|Constant(  list bytes , a -) - node represents a constant 
48|IsNull 
49|BytecodeException#NULL_POINTER 
50|Begin 
51|Begin 
52|If 
53|FrameState@20 - 53|FrameState@20 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=20, sourceFile=HeapChunkProvider.java,  }
 
55|EndNode 
56|Pi 
57|MethodCallTarget 
58|Invoke#Log.string 
59|FrameState@23 - 59|FrameState@23 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=23, sourceFile=HeapChunkProvider.java,  }
 
60|LoadField#bytesInUnusedAlignedChunks - node represents a read of a static or instance field. 
61|IsNull 
62|BytecodeException#NULL_POINTER 
63|Begin 
64|Begin 
65|If 
66|FrameState@27 - 66|FrameState@27 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 27], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=27, sourceFile=HeapChunkProvider.java,  }
 
68|EndNode 
69|Pi 
70|MethodCallTarget 
71|Invoke#UninterruptibleUtils$AtomicWord.get 
72|FrameState@30 - 72|FrameState@30 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 27], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=30, sourceFile=HeapChunkProvider.java,  }
 
73|IsNull 
74|BytecodeException#NULL_POINTER 
75|Begin 
76|Begin 
77|If 
78|FrameState@30 - 78|FrameState@30 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 30], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=30, sourceFile=HeapChunkProvider.java,  }
 
80|EndNode 
81|Pi 
82|MethodCallTarget 
83|Invoke#Log.signed 
84|FrameState@33 - 84|FrameState@33 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 30], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=33, sourceFile=HeapChunkProvider.java,  }
 
85|IsNull 
86|BytecodeException#NULL_POINTER 
87|Begin 
88|Begin 
89|If 
90|FrameState@33 - 90|FrameState@33 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 33], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=33, sourceFile=HeapChunkProvider.java,  }
 
92|EndNode 
93|Pi 
94|MethodCallTarget 
95|Invoke#Log.newline 
96|FrameState@36 - 96|FrameState@36 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 33], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=36, sourceFile=HeapChunkProvider.java,  }
 
97|MethodCallTarget 
98|Invoke#HeapChunkProvider.popUnusedAlignedChunkUninterruptibly 
99|FrameState@41 - 99|FrameState@41 { sourceLine=221, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:221) [bci: 38], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=41, sourceFile=HeapChunkProvider.java,  }
 
100|Constant(1, i32) - node represents a constant 
101|Constant(0, i32) - node represents a constant 
102|Constant(0, i64) - node represents a constant 
103|== 
104|Conditional 
105|Begin 
106|Begin 
107|If 
108|Return 
109|LoadField#bytesInUnusedAlignedChunks - node represents a read of a static or instance field. 
110|Constant(1048576, i64) - node represents a constant 
111|IsNull 
112|BytecodeException#NULL_POINTER 
113|Begin 
114|Begin 
115|If 
116|FrameState@65 - 116|FrameState@65 { sourceLine=227, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:227) [bci: 65], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=65, sourceFile=HeapChunkProvider.java,  }
 
118|EndNode 
119|Pi 
120|MethodCallTarget 
121|Invoke#UninterruptibleUtils$AtomicUnsigned.subtractAndGet 
122|FrameState@68 - 122|FrameState@68 { sourceLine=227, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:227) [bci: 65], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=68, sourceFile=HeapChunkProvider.java,  }
 
123|MethodCallTarget 
124|Invoke#HeapChunkProvider.log 
125|FrameState@72 - 125|FrameState@72 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 69], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=72, sourceFile=HeapChunkProvider.java,  }
 
126|Constant(  new list top: , a -) - node represents a constant 
127|IsNull 
128|BytecodeException#NULL_POINTER 
129|Begin 
130|Begin 
131|If 
132|FrameState@74 - 132|FrameState@74 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 74], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=74, sourceFile=HeapChunkProvider.java,  }
 
134|EndNode 
135|Pi 
136|MethodCallTarget 
137|Invoke#Log.string 
138|FrameState@77 - 138|FrameState@77 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 74], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=77, sourceFile=HeapChunkProvider.java,  }
 
139|LoadField#unusedAlignedChunks - node represents a read of a static or instance field. 
140|IsNull 
141|BytecodeException#NULL_POINTER 
142|Begin 
143|Begin 
144|If 
145|FrameState@81 - 145|FrameState@81 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 81], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=81, sourceFile=HeapChunkProvider.java,  }
 
147|EndNode 
148|Pi 
149|MethodCallTarget 
150|Invoke#UninterruptibleUtils$AtomicPointer.get 
151|FrameState@84 - 151|FrameState@84 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 81], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=84, sourceFile=HeapChunkProvider.java,  }
 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@84 - 157|FrameState@84 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=84, sourceFile=HeapChunkProvider.java,  }
 
159|EndNode 
160|Pi 
161|MethodCallTarget 
162|Invoke#Log.hex 
163|FrameState@87 - 163|FrameState@87 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=87, sourceFile=HeapChunkProvider.java,  }
 
164|IsNull 
165|BytecodeException#NULL_POINTER 
166|Begin 
167|Begin 
168|If 
169|FrameState@89 - 169|FrameState@89 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=89, sourceFile=HeapChunkProvider.java,  }
 
171|EndNode 
172|Pi 
173|MethodCallTarget 
174|Invoke#Log.string 
175|FrameState@92 - 175|FrameState@92 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=92, sourceFile=HeapChunkProvider.java,  }
 
176|LoadField#bytesInUnusedAlignedChunks - node represents a read of a static or instance field. 
177|IsNull 
178|BytecodeException#NULL_POINTER 
179|Begin 
180|Begin 
181|If 
182|FrameState@96 - 182|FrameState@96 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 96], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=96, sourceFile=HeapChunkProvider.java,  }
 
184|EndNode 
185|Pi 
186|MethodCallTarget 
187|Invoke#UninterruptibleUtils$AtomicWord.get 
188|FrameState@99 - 188|FrameState@99 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 96], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=99, sourceFile=HeapChunkProvider.java,  }
 
189|IsNull 
190|BytecodeException#NULL_POINTER 
191|Begin 
192|Begin 
193|If 
194|FrameState@99 - 194|FrameState@99 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 99], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=99, sourceFile=HeapChunkProvider.java,  }
 
196|EndNode 
197|Pi 
198|MethodCallTarget 
199|Invoke#Log.signed 
200|FrameState@102 - 200|FrameState@102 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 99], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=102, sourceFile=HeapChunkProvider.java,  }
 
201|IsNull 
202|BytecodeException#NULL_POINTER 
203|Begin 
204|Begin 
205|If 
206|FrameState@102 - 206|FrameState@102 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=102, sourceFile=HeapChunkProvider.java,  }
 
208|EndNode 
209|Pi 
210|MethodCallTarget 
211|Invoke#Log.newline 
212|FrameState@105 - 212|FrameState@105 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=105, sourceFile=HeapChunkProvider.java,  }
 
213|Return 
214|FrameState@-4[AFTER_EXCEPTION_BCI] - 214|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
215|Unwind 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 49
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 97
Callee: noteFirstAllocationTime (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=370, code=ResolvedJavaMethodBytecode<HeapChunkProvider.noteFirstAllocationTime()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
3|LoadField#firstAllocationTime - node represents a read of a static or instance field. 
4|Constant(0, i64) - node represents a constant 
5|IntegerNormalizeCompare 
6|Constant(0, i32) - node represents a constant 
7|== 
8|Begin 
9|Begin 
10|If 
11|MethodCallTarget 
12|Invoke#System.nanoTime 
13|FrameState@13 - 13|FrameState@13 { sourceLine=371, code=ResolvedJavaMethodBytecode<HeapChunkProvider.noteFirstAllocationTime()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.noteFirstAllocationTime(HeapChunkProvider.java:371) [bci: 10], stackSize=3, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=13, sourceFile=HeapChunkProvider.java,  }
 
14|StoreField#firstAllocationTime - node represents a write to a static or instance field. 
15|FrameState@16 - 15|FrameState@16 { sourceLine=373, code=ResolvedJavaMethodBytecode<HeapChunkProvider.noteFirstAllocationTime()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.noteFirstAllocationTime(HeapChunkProvider.java:371) [bci: 13], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
16|EndNode 
17|Merge 
18|EndNode 
19|FrameState@16 - 19|FrameState@16 { sourceLine=373, code=ResolvedJavaMethodBytecode<HeapChunkProvider.noteFirstAllocationTime()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
20|Return 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, boolean, node count: 7
Callee: defaultProtection (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: boolean, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=166, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.defaultProtection(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
3|Constant(3, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|== 
6|Begin 
7|Begin 
8|If 
9|Constant(4, i32) - node represents a constant 
10|Constant(7, i32) - node represents a constant 
11|EndNode 
12|Merge 
13|EndNode 
14|ValuePhi(3 10, i32) 
15|FrameState@10 - 15|FrameState@10 { sourceLine=170, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.defaultProtection(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=OSCommittedMemoryProvider.java,  }
 
16|Return 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, boolean, node count: 20
Callee: trackVirtualMemory (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=196, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
4|LoadField#tracker - node represents a read of a static or instance field. 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@5 - 10|FrameState@5 { sourceLine=196, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.trackVirtualMemory(OSCommittedMemoryProvider.java:196) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=5, sourceFile=OSCommittedMemoryProvider.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#OSCommittedMemoryProvider$VirtualMemoryTracker.track 
16|FrameState@8 - 16|FrameState@8 { sourceLine=197, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.trackVirtualMemory(OSCommittedMemoryProvider.java:196) [bci: 5], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=8, sourceFile=OSCommittedMemoryProvider.java,  }
 
17|Return 
18|Unwind 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, UnsignedWord, boolean, node count: 14
Callee: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, boolean, node count: 28
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=158, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
5|Constant(com.oracle.svm.core.posix.PosixVirtualMemoryProvider, a -) - node represents a constant 
6|Constant(0, i64) - node represents a constant 
7|MethodCallTarget 
8|Invoke#OSCommittedMemoryProvider.defaultProtection 
9|FrameState@11 - 9|FrameState@11 { sourceLine=158, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:158) [bci: 8], stackSize=4, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=11, sourceFile=OSCommittedMemoryProvider.java,  }
 
10|MethodCallTarget 
11|Invoke#PosixVirtualMemoryProvider.commit 
12|FrameState@16 - 12|FrameState@16 { sourceLine=158, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:158) [bci: 11], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=16, sourceFile=OSCommittedMemoryProvider.java,  }
 
13|Constant(1, i32) - node represents a constant 
14|Constant(0, i32) - node represents a constant 
15|== 
16|Conditional 
17|Begin 
18|Begin 
19|If 
20|MethodCallTarget 
21|Invoke#OSCommittedMemoryProvider.trackVirtualMemory 
22|FrameState@31 - 22|FrameState@31 { sourceLine=162, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:160) [bci: 28], stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=31, sourceFile=OSCommittedMemoryProvider.java,  }
 
23|EndNode 
24|Merge 
25|EndNode 
26|FrameState@31 - 26|FrameState@31 { sourceLine=162, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=31, sourceFile=OSCommittedMemoryProvider.java,  }
 
27|Return 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, UnsignedWord, boolean, node count: 27
Callee: defaultProtection (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: boolean, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=166, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.defaultProtection(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
3|Constant(3, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|== 
6|Begin 
7|Begin 
8|If 
9|Constant(4, i32) - node represents a constant 
10|Constant(7, i32) - node represents a constant 
11|EndNode 
12|Merge 
13|EndNode 
14|ValuePhi(3 10, i32) 
15|FrameState@10 - 15|FrameState@10 { sourceLine=170, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.defaultProtection(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=OSCommittedMemoryProvider.java,  }
 
16|Return 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, UnsignedWord, boolean, node count: 39
Callee: trackVirtualMemory (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=196, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
4|LoadField#tracker - node represents a read of a static or instance field. 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@5 - 10|FrameState@5 { sourceLine=196, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.trackVirtualMemory(OSCommittedMemoryProvider.java:196) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=5, sourceFile=OSCommittedMemoryProvider.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#OSCommittedMemoryProvider$VirtualMemoryTracker.track 
16|FrameState@8 - 16|FrameState@8 { sourceLine=197, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.trackVirtualMemory(OSCommittedMemoryProvider.java:196) [bci: 5], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=8, sourceFile=OSCommittedMemoryProvider.java,  }
 
17|Return 
18|Unwind 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 101
Callee: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, UnsignedWord, boolean, node count: 97
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=92, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
6|Constant(1, i64) - node represents a constant 
7|Constant(1, i32) - node represents a constant 
8|Constant(0, i32) - node represents a constant 
9|== 
10|Conditional 
11|Begin 
12|Begin 
13|If 
14|MethodCallTarget 
15|Invoke#OSCommittedMemoryProvider.allocate 
16|FrameState@18 - 16|FrameState@18 { sourceLine=93, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:93) [bci: 15], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=18, sourceFile=OSCommittedMemoryProvider.java,  }
 
17|Return 
18|MethodCallTarget 
19|Invoke#CommittedMemoryProvider.getGranularity 
20|FrameState@23 - 20|FrameState@23 { sourceLine=102, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:102) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=23, sourceFile=OSCommittedMemoryProvider.java,  }
 
21|+ 
22|MethodCallTarget 
23|Invoke#UnsignedUtils.roundUp 
24|FrameState@41 - 24|FrameState@41 { sourceLine=107, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:107) [bci: 38], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=41, sourceFile=OSCommittedMemoryProvider.java,  }
 
25|Constant(com.oracle.svm.core.posix.PosixVirtualMemoryProvider, a -) - node represents a constant 
26|Constant(0, i64) - node represents a constant 
27|MethodCallTarget 
28|Invoke#OSCommittedMemoryProvider.defaultProtection 
29|FrameState@55 - 29|FrameState@55 { sourceLine=108, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:108) [bci: 52], stackSize=4, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=55, sourceFile=OSCommittedMemoryProvider.java,  }
 
30|MethodCallTarget 
31|Invoke#PosixVirtualMemoryProvider.commit 
32|FrameState@60 - 32|FrameState@60 { sourceLine=108, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:108) [bci: 55], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=60, sourceFile=OSCommittedMemoryProvider.java,  }
 
33|== 
34|Conditional 
35|Begin 
36|Begin 
37|If 
38|Return 
39|MethodCallTarget 
40|Invoke#OSCommittedMemoryProvider.trackVirtualMemory 
41|FrameState@85 - 41|FrameState@85 { sourceLine=114, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:113) [bci: 82], stackSize=0, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=85, sourceFile=OSCommittedMemoryProvider.java,  }
 
42|+ 
43|MethodCallTarget 
44|Invoke#PointerUtils.roundUp 
45|FrameState@102 - 45|FrameState@102 { sourceLine=117, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:117) [bci: 99], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=102, sourceFile=OSCommittedMemoryProvider.java,  }
 
46|+ 
47|MethodCallTarget 
48|Invoke#PointerUtils.roundDown 
49|FrameState@121 - 49|FrameState@121 { sourceLine=126, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:126) [bci: 118], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=121, sourceFile=OSCommittedMemoryProvider.java,  }
 
50|- 
51||<| 
52|Conditional 
53|Begin 
54|Begin 
55|If 
56|MethodCallTarget 
57|Invoke#OSCommittedMemoryProvider.free 
58|FrameState@162 - 58|FrameState@162 { sourceLine=134, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:134) [bci: 159], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=162, sourceFile=OSCommittedMemoryProvider.java,  }
 
59|== 
60|EndNode 
61|Merge 
62|EndNode 
63|Begin 
64|Begin 
65|If 
66|MethodCallTarget 
67|Invoke#OSCommittedMemoryProvider.free 
68|FrameState@173 - 68|FrameState@173 { sourceLine=135, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:135) [bci: 170], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=173, sourceFile=OSCommittedMemoryProvider.java,  }
 
69|Return 
70|FrameState@181 - 70|FrameState@181 { sourceLine=140, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=181, sourceFile=OSCommittedMemoryProvider.java,  }
 
71|MethodCallTarget 
72|Invoke#PointerUtils.roundUp 
73|FrameState@188 - 73|FrameState@188 { sourceLine=140, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:140) [bci: 185], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=188, sourceFile=OSCommittedMemoryProvider.java,  }
 
74|- 
75||<| 
76|Conditional 
77|Begin 
78|Begin 
79|If 
80|MethodCallTarget 
81|Invoke#OSCommittedMemoryProvider.free 
82|FrameState@229 - 82|FrameState@229 { sourceLine=148, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:148) [bci: 226], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=229, sourceFile=OSCommittedMemoryProvider.java,  }
 
83|== 
84|EndNode 
85|Merge 
86|EndNode 
87|Begin 
88|Begin 
89|If 
90|- 
91|MethodCallTarget 
92|Invoke#OSCommittedMemoryProvider.free 
93|FrameState@247 - 93|FrameState@247 { sourceLine=149, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:149) [bci: 244], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=247, sourceFile=OSCommittedMemoryProvider.java,  }
 
94|Return 
95|FrameState@255 - 95|FrameState@255 { sourceLine=153, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=255, sourceFile=OSCommittedMemoryProvider.java,  }
 
96|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 112
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 152
Callee: initializeChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: HeapChunk$Header, UnsignedWord, node count: 13
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=296, code=ResolvedJavaMethodBytecode<HeapChunkProvider.initializeChunk(HeapChunk$Header, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
4|MethodCallTarget 
5|Invoke#HeapChunk.asPointer 
6|FrameState@5 - 6|FrameState@5 { sourceLine=296, code=ResolvedJavaMethodBytecode<HeapChunkProvider.initializeChunk(HeapChunk$Header, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.initializeChunk(HeapChunkProvider.java:296) [bci: 2], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=5, sourceFile=HeapChunkProvider.java,  }
 
7|+ 
8|Constant(0, i64) - node represents a constant 
9|OffsetAddress 
10|CInterfaceWrite 
11|FrameState@16 - 11|FrameState@16 { sourceLine=297, code=ResolvedJavaMethodBytecode<HeapChunkProvider.initializeChunk(HeapChunk$Header, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.initializeChunk(HeapChunkProvider.java:296) [bci: 11], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
12|Return 

build structured graph: Caller: getAlignedHeapChunkStart (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 3
Callee: getObjectsStart (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=121, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getObjectsStart(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=121, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getObjectsStart(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getObjectsStart(AlignedHeapChunk.java:121) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Constant(4136, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 3
Callee: getAlignedHeapChunkStart (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=137, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getAlignedHeapChunkStart(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#AlignedHeapChunk.getObjectsStart 
5|FrameState@4 - 5|FrameState@4 { sourceLine=137, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getAlignedHeapChunkStart(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getAlignedHeapChunkStart(AlignedHeapChunk.java:137) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 6
Callee: resetChunkHeader (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: HeapChunk$Header, Pointer, node count: 23
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=301, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
4|Constant(32, i64) - node represents a constant 
5|OffsetAddress 
6|CInterfaceWrite 
7|FrameState@7 - 7|FrameState@7 { sourceLine=302, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetChunkHeader(HeapChunkProvider.java:301) [bci: 2], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=HeapChunkProvider.java,  }
 
8|Constant(null, a -) - node represents a constant 
9|Constant(24, i64) - node represents a constant 
10|OffsetAddress 
11|JavaWrite 
12|FrameState@14 - 12|FrameState@14 { sourceLine=303, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetChunkHeader(HeapChunkProvider.java:302) [bci: 9], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=14, sourceFile=HeapChunkProvider.java,  }
 
13|Constant(0, i64) - node represents a constant 
14|Constant(8, i64) - node represents a constant 
15|OffsetAddress 
16|CInterfaceWrite 
17|FrameState@26 - 17|FrameState@26 { sourceLine=304, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetChunkHeader(HeapChunkProvider.java:303) [bci: 21], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=26, sourceFile=HeapChunkProvider.java,  }
 
18|Constant(16, i64) - node represents a constant 
19|OffsetAddress 
20|CInterfaceWrite 
21|FrameState@38 - 21|FrameState@38 { sourceLine=305, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetChunkHeader(HeapChunkProvider.java:304) [bci: 33], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=38, sourceFile=HeapChunkProvider.java,  }
 
22|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 9
Callee: getCardTableStart (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=100, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getCardTableStart(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=100, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getCardTableStart(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getCardTableStart(AlignedHeapChunk.java:100) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Constant(40, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 12
Callee: getCardTableLimit (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=105, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getCardTableLimit(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=105, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getCardTableLimit(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getCardTableLimit(AlignedHeapChunk.java:105) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Constant(2088, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: cleanTableToPointer (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, Pointer, node count: 5
Callee: tableOffsetToIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: UnsignedWord, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=227, code=ResolvedJavaMethodBytecode<CardTable.tableOffsetToIndex(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|SignExtend 
5||/| 
6|Return 

build structured graph: Caller: cleanEntryAtIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, UnsignedWord, node count: 4
Callee: indexToTableOffset (class: com.oracle.svm.core.genscavenge.CardTable), par: UnsignedWord, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=232, code=ResolvedJavaMethodBytecode<CardTable.indexToTableOffset(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|SignExtend 
5|* 
6|Return 

build structured graph: Caller: cleanTableToIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, UnsignedWord, node count: 20
Callee: cleanEntryAtIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, UnsignedWord, node count: 13
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=133, code=ResolvedJavaMethodBytecode<CardTable.cleanEntryAtIndex(Pointer, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
4|MethodCallTarget 
5|Invoke#CardTable.indexToTableOffset 
6|FrameState@5 - 6|FrameState@5 { sourceLine=133, code=ResolvedJavaMethodBytecode<CardTable.cleanEntryAtIndex(Pointer, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanEntryAtIndex(CardTable.java:133) [bci: 2], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=5, sourceFile=CardTable.java,  }
 
7|Constant(1, i32) - node represents a constant 
8|Constant(org.graalvm.compiler.nodes.NamedLocationIdentity, a -) - node represents a constant 
9|OffsetAddress 
10|JavaWrite 
11|FrameState@14 - 11|FrameState@14 { sourceLine=134, code=ResolvedJavaMethodBytecode<CardTable.cleanEntryAtIndex(Pointer, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanEntryAtIndex(CardTable.java:133) [bci: 9], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=14, sourceFile=CardTable.java,  }
 
12|Return 

build structured graph: Caller: cleanTableToPointer (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, Pointer, node count: 8
Callee: cleanTableToIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, UnsignedWord, node count: 25
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=125, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToIndex(Pointer, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|ZeroExtend 
7|EndNode 
8|LoopBegin 
9|ValuePhi(5 24, i64) 
10|FrameState@5 - 10|FrameState@5 { sourceLine=125, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToIndex(Pointer, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=CardTable.java,  }
 
11|Constant(1, i32) - node represents a constant 
12||<| 
13|Conditional 
15|LoopExit 
16|ValueProxy 
17|FrameState@31 - 17|FrameState@31 { sourceLine=128, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToIndex(Pointer, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanTableToIndex(CardTable.java:128) [bci: 31], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=31, sourceFile=CardTable.java,  }
 
18|Begin 
19|If 
20|MethodCallTarget 
21|Invoke#CardTable.cleanEntryAtIndex 
22|FrameState@20 - 22|FrameState@20 { sourceLine=125, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToIndex(Pointer, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanTableToIndex(CardTable.java:126) [bci: 17], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=20, sourceFile=CardTable.java,  }
 
23|SignExtend 
24|+ 
25|LoopEnd 
26|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 15
Callee: cleanTableToPointer (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, Pointer, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=118, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToPointer(Pointer, Pointer)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
4|- 
5|MethodCallTarget 
6|Invoke#CardTable.tableOffsetToIndex 
7|FrameState@12 - 7|FrameState@12 { sourceLine=119, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToPointer(Pointer, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanTableToPointer(CardTable.java:119) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=12, sourceFile=CardTable.java,  }
 
8|MethodCallTarget 
9|Invoke#CardTable.cleanTableToIndex 
10|FrameState@18 - 10|FrameState@18 { sourceLine=120, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToPointer(Pointer, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanTableToPointer(CardTable.java:120) [bci: 15], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=18, sourceFile=CardTable.java,  }
 
11|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 18
Callee: getFirstObjectTableStart (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=110, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getFirstObjectTableStart(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=110, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getFirstObjectTableStart(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getFirstObjectTableStart(AlignedHeapChunk.java:110) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Constant(2088, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 21
Callee: getFirstObjectTableLimit (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=115, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getFirstObjectTableLimit(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=115, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getFirstObjectTableLimit(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getFirstObjectTableLimit(AlignedHeapChunk.java:115) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Constant(4136, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: initializeTableToPointer (class: com.oracle.svm.core.genscavenge.FirstObjectTable), par: Pointer, Pointer, node count: 5
Callee: tableOffsetToIndex (class: com.oracle.svm.core.genscavenge.FirstObjectTable), par: UnsignedWord, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=584, code=ResolvedJavaMethodBytecode<FirstObjectTable.tableOffsetToIndex(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=FirstObjectTable.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|SignExtend 
5||/| 
6|Return 

build structured graph: Caller: initializeTableToPointer (class: com.oracle.svm.core.genscavenge.FirstObjectTable), par: Pointer, Pointer, node count: 8
Callee: initializeTableToIndex (class: com.oracle.svm.core.genscavenge.FirstObjectTable), par: Pointer, UnsignedWord, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=469, code=ResolvedJavaMethodBytecode<FirstObjectTable.initializeTableToIndex(Pointer, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=FirstObjectTable.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 24
Callee: initializeTableToPointer (class: com.oracle.svm.core.genscavenge.FirstObjectTable), par: Pointer, Pointer, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=208, code=ResolvedJavaMethodBytecode<FirstObjectTable.initializeTableToPointer(Pointer, Pointer)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=FirstObjectTable.java,  }
 
4|- 
5|MethodCallTarget 
6|Invoke#FirstObjectTable.tableOffsetToIndex 
7|FrameState@10 - 7|FrameState@10 { sourceLine=208, code=ResolvedJavaMethodBytecode<FirstObjectTable.initializeTableToPointer(Pointer, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.FirstObjectTable.initializeTableToPointer(FirstObjectTable.java:208) [bci: 7], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=FirstObjectTable.java,  }
 
8|MethodCallTarget 
9|Invoke#FirstObjectTable.initializeTableToIndex 
10|FrameState@16 - 10|FrameState@16 { sourceLine=209, code=ResolvedJavaMethodBytecode<FirstObjectTable.initializeTableToPointer(Pointer, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.FirstObjectTable.initializeTableToPointer(FirstObjectTable.java:209) [bci: 13], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=16, sourceFile=FirstObjectTable.java,  }
 
11|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 155
Callee: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 28
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=316, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
3|MethodCallTarget 
4|Invoke#AlignedHeapChunk.getAlignedHeapChunkStart 
5|FrameState@5 - 5|FrameState@5 { sourceLine=316, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:316) [bci: 2], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=5, sourceFile=HeapChunkProvider.java,  }
 
6|MethodCallTarget 
7|Invoke#HeapChunkProvider.resetChunkHeader 
8|FrameState@8 - 8|FrameState@8 { sourceLine=319, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:316) [bci: 5], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=8, sourceFile=HeapChunkProvider.java,  }
 
9|MethodCallTarget 
10|Invoke#AlignedHeapChunk.getCardTableStart 
11|FrameState@12 - 11|FrameState@12 { sourceLine=319, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:319) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=12, sourceFile=HeapChunkProvider.java,  }
 
12|MethodCallTarget 
13|Invoke#AlignedHeapChunk.getCardTableLimit 
14|FrameState@16 - 14|FrameState@16 { sourceLine=319, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:319) [bci: 13], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
15|MethodCallTarget 
16|Invoke#CardTable.cleanTableToPointer 
17|FrameState@19 - 17|FrameState@19 { sourceLine=319, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:319) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=19, sourceFile=HeapChunkProvider.java,  }
 
18|MethodCallTarget 
19|Invoke#AlignedHeapChunk.getFirstObjectTableStart 
20|FrameState@24 - 20|FrameState@24 { sourceLine=321, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:321) [bci: 21], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=24, sourceFile=HeapChunkProvider.java,  }
 
21|MethodCallTarget 
22|Invoke#AlignedHeapChunk.getFirstObjectTableLimit 
23|FrameState@28 - 23|FrameState@28 { sourceLine=321, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:321) [bci: 25], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=28, sourceFile=HeapChunkProvider.java,  }
 
24|MethodCallTarget 
25|Invoke#FirstObjectTable.initializeTableToPointer 
26|FrameState@31 - 26|FrameState@31 { sourceLine=321, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:321) [bci: 28], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=31, sourceFile=HeapChunkProvider.java,  }
 
27|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 165
Callee: getZapProducedHeapChunks (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 8
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=353, code=ResolvedJavaMethodBytecode<HeapPolicy.getZapProducedHeapChunks()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapPolicy.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Boolean, a -) - node represents a constant 
4|LogicConstant 
5|Constant(0, i32) - node represents a constant 
6|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
7|Return 

build structured graph: Caller: zap (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: HeapChunk$Header, WordBase, node count: 10
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 175
Callee: zap (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: HeapChunk$Header, WordBase, node count: 142
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=333, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
4|Constant(32, i64) - node represents a constant 
5|OffsetAddress 
6|CInterfaceRead 
7|Constant(0, i64) - node represents a constant 
8|OffsetAddress 
9|CInterfaceRead 
10|MethodCallTarget 
11|Invoke#HeapChunkProvider.log 
12|FrameState@17 - 12|FrameState@17 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 14], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=17, sourceFile=HeapChunkProvider.java,  }
 
13|Constant(  zap chunk: , a -) - node represents a constant 
14|IsNull 
15|BytecodeException#NULL_POINTER 
16|Begin 
17|Begin 
18|If 
19|FrameState@19 - 19|FrameState@19 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 19], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=19, sourceFile=HeapChunkProvider.java,  }
 
22|Pi 
23|MethodCallTarget 
24|Invoke#Log.string 
25|FrameState@22 - 25|FrameState@22 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 19], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=22, sourceFile=HeapChunkProvider.java,  }
 
26|IsNull 
27|BytecodeException#NULL_POINTER 
28|Begin 
29|Begin 
30|If 
31|FrameState@23 - 31|FrameState@23 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 23], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=23, sourceFile=HeapChunkProvider.java,  }
 
33|EndNode 
34|Merge 
35|EndNode 
36|ValuePhi(15 27 43 55 68 80 93 105 117, a -) 
37|Pi 
38|MethodCallTarget 
39|Invoke#Log.hex 
40|FrameState@26 - 40|FrameState@26 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 23], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=26, sourceFile=HeapChunkProvider.java,  }
 
41|Constant(  start: , a -) - node represents a constant 
42|IsNull 
43|BytecodeException#NULL_POINTER 
44|Begin 
45|Begin 
46|If 
47|FrameState@28 - 47|FrameState@28 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 28], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=28, sourceFile=HeapChunkProvider.java,  }
 
49|EndNode 
50|Pi 
51|MethodCallTarget 
52|Invoke#Log.string 
53|FrameState@31 - 53|FrameState@31 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 28], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=31, sourceFile=HeapChunkProvider.java,  }
 
54|IsNull 
55|BytecodeException#NULL_POINTER 
56|Begin 
57|Begin 
58|If 
59|FrameState@32 - 59|FrameState@32 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=32, sourceFile=HeapChunkProvider.java,  }
 
61|EndNode 
62|Pi 
63|MethodCallTarget 
64|Invoke#Log.hex 
65|FrameState@35 - 65|FrameState@35 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=35, sourceFile=HeapChunkProvider.java,  }
 
66|Constant(  limit: , a -) - node represents a constant 
67|IsNull 
68|BytecodeException#NULL_POINTER 
69|Begin 
70|Begin 
71|If 
72|FrameState@37 - 72|FrameState@37 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 37], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=37, sourceFile=HeapChunkProvider.java,  }
 
74|EndNode 
75|Pi 
76|MethodCallTarget 
77|Invoke#Log.string 
78|FrameState@40 - 78|FrameState@40 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 37], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=40, sourceFile=HeapChunkProvider.java,  }
 
79|IsNull 
80|BytecodeException#NULL_POINTER 
81|Begin 
82|Begin 
83|If 
84|FrameState@41 - 84|FrameState@41 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 41], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=41, sourceFile=HeapChunkProvider.java,  }
 
86|EndNode 
87|Pi 
88|MethodCallTarget 
89|Invoke#Log.hex 
90|FrameState@44 - 90|FrameState@44 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 41], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=44, sourceFile=HeapChunkProvider.java,  }
 
91|Constant(  value: , a -) - node represents a constant 
92|IsNull 
93|BytecodeException#NULL_POINTER 
94|Begin 
95|Begin 
96|If 
97|FrameState@46 - 97|FrameState@46 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 46], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=46, sourceFile=HeapChunkProvider.java,  }
 
99|EndNode 
100|Pi 
101|MethodCallTarget 
102|Invoke#Log.string 
103|FrameState@49 - 103|FrameState@49 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 46], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=49, sourceFile=HeapChunkProvider.java,  }
 
104|IsNull 
105|BytecodeException#NULL_POINTER 
106|Begin 
107|Begin 
108|If 
109|FrameState@50 - 109|FrameState@50 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 50], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=50, sourceFile=HeapChunkProvider.java,  }
 
111|EndNode 
112|Pi 
113|MethodCallTarget 
114|Invoke#Log.hex 
115|FrameState@53 - 115|FrameState@53 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 50], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=53, sourceFile=HeapChunkProvider.java,  }
 
116|IsNull 
117|BytecodeException#NULL_POINTER 
118|Begin 
119|Begin 
120|If 
121|FrameState@53 - 121|FrameState@53 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 53], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=53, sourceFile=HeapChunkProvider.java,  }
 
123|EndNode 
124|Pi 
125|MethodCallTarget 
126|Invoke#Log.newline 
127|FrameState@56 - 127|FrameState@56 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 53], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=56, sourceFile=HeapChunkProvider.java,  }
 
129|EndNode 
130|LoopBegin 
131|ValuePhi(6 149, i64) 
132|FrameState@60 - 132|FrameState@60 { sourceLine=336, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=60, sourceFile=HeapChunkProvider.java,  }
 
133|Constant(1, i32) - node represents a constant 
134|Constant(0, i32) - node represents a constant 
135||<| 
136|Conditional 
138|LoopExit 
139|ValueProxy 
140|FrameState@95 - 140|FrameState@95 { sourceLine=339, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:339) [bci: 95], stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=95, sourceFile=HeapChunkProvider.java,  }
 
141|Begin 
142|If 
143|SignExtend 
144|OffsetAddress 
145|JavaWrite 
146|FrameState@80 - 146|FrameState@80 { sourceLine=336, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:337) [bci: 75], stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=80, sourceFile=HeapChunkProvider.java,  }
 
147|Constant(8, i32) - node represents a constant 
148|SignExtend 
149|+ 
150|LoopEnd 
151|Return 
152|FrameState@-4[AFTER_EXCEPTION_BCI] - 152|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
153|Unwind 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 186
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: prepareNewAllocationChunk (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: ThreadLocalAllocation$Descriptor, node count: 18
Callee: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 226
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=108, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
3|Constant(1048576, i64) - node represents a constant 
4|MethodCallTarget 
5|Invoke#HeapChunkProvider.log 
6|FrameState@7 - 6|FrameState@7 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=7, sourceFile=HeapChunkProvider.java,  }
 
7|Constant([HeapChunkProvider.produceAlignedChunk  chunk size: , a -) - node represents a constant 
8|IsNull 
9|BytecodeException#NULL_POINTER 
10|Begin 
11|Begin 
12|If 
13|FrameState@9 - 13|FrameState@9 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=9, sourceFile=HeapChunkProvider.java,  }
 
16|Pi 
17|MethodCallTarget 
18|Invoke#Log.string 
19|FrameState@12 - 19|FrameState@12 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=12, sourceFile=HeapChunkProvider.java,  }
 
20|IsNull 
21|BytecodeException#NULL_POINTER 
22|Begin 
23|Begin 
24|If 
25|FrameState@13 - 25|FrameState@13 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 13], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=13, sourceFile=HeapChunkProvider.java,  }
 
27|EndNode 
28|Merge 
29|EndNode 
30|ValuePhi(9 21 36 55 67 79 110 118 130 142 192 204 217 229, a -) 
31|Pi 
32|MethodCallTarget 
33|Invoke#Log.unsigned 
34|FrameState@16 - 34|FrameState@16 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 13], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
35|IsNull 
36|BytecodeException#NULL_POINTER 
37|Begin 
38|Begin 
39|If 
40|FrameState@16 - 40|FrameState@16 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=16, sourceFile=HeapChunkProvider.java,  }
 
42|EndNode 
43|Pi 
44|MethodCallTarget 
45|Invoke#Log.newline 
46|FrameState@19 - 46|FrameState@19 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=19, sourceFile=HeapChunkProvider.java,  }
 
47|MethodCallTarget 
48|Invoke#HeapChunkProvider.popUnusedAlignedChunk 
49|FrameState@24 - 49|FrameState@24 { sourceLine=111, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:111) [bci: 21], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=24, sourceFile=HeapChunkProvider.java,  }
 
50|MethodCallTarget 
51|Invoke#HeapChunkProvider.log 
52|FrameState@28 - 52|FrameState@28 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 25], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=28, sourceFile=HeapChunkProvider.java,  }
 
53|Constant(  unused chunk: , a -) - node represents a constant 
54|IsNull 
55|BytecodeException#NULL_POINTER 
56|Begin 
57|Begin 
58|If 
59|FrameState@30 - 59|FrameState@30 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 30], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=30, sourceFile=HeapChunkProvider.java,  }
 
61|EndNode 
62|Pi 
63|MethodCallTarget 
64|Invoke#Log.string 
65|FrameState@33 - 65|FrameState@33 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 30], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=33, sourceFile=HeapChunkProvider.java,  }
 
66|IsNull 
67|BytecodeException#NULL_POINTER 
68|Begin 
69|Begin 
70|If 
71|FrameState@34 - 71|FrameState@34 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 34], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=34, sourceFile=HeapChunkProvider.java,  }
 
73|EndNode 
74|Pi 
75|MethodCallTarget 
76|Invoke#Log.hex 
77|FrameState@37 - 77|FrameState@37 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 34], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=37, sourceFile=HeapChunkProvider.java,  }
 
78|IsNull 
79|BytecodeException#NULL_POINTER 
80|Begin 
81|Begin 
82|If 
83|FrameState@37 - 83|FrameState@37 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 37], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=37, sourceFile=HeapChunkProvider.java,  }
 
85|EndNode 
86|Pi 
87|MethodCallTarget 
88|Invoke#Log.newline 
89|FrameState@40 - 89|FrameState@40 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 37], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=40, sourceFile=HeapChunkProvider.java,  }
 
90|Constant(1, i32) - node represents a constant 
91|Constant(0, i32) - node represents a constant 
92|Constant(0, i64) - node represents a constant 
93|== 
94|Conditional 
95|Begin 
96|Begin 
97|If 
98|MethodCallTarget 
99|Invoke#HeapChunkProvider.noteFirstAllocationTime 
100|FrameState@54 - 100|FrameState@54 { sourceLine=117, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:116) [bci: 51], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=54, sourceFile=HeapChunkProvider.java,  }
 
101|Constant(com.oracle.svm.core.os.OSCommittedMemoryProvider, a -) - node represents a constant 
102|MethodCallTarget 
103|Invoke#OSCommittedMemoryProvider.allocate 
104|FrameState@67 - 104|FrameState@67 { sourceLine=117, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:117) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=67, sourceFile=HeapChunkProvider.java,  }
 
105|== 
106|Conditional 
107|Begin 
108|Begin 
109|If 
110|Constant(java.lang.OutOfMemoryError, a -) - node represents a constant 
112|EndNode 
113|MethodCallTarget 
114|Invoke#HeapChunkProvider.log 
115|FrameState@87 - 115|FrameState@87 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=87, sourceFile=HeapChunkProvider.java,  }
 
116|Constant(  new chunk: , a -) - node represents a constant 
117|IsNull 
118|BytecodeException#NULL_POINTER 
119|Begin 
120|Begin 
121|If 
122|FrameState@89 - 122|FrameState@89 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=89, sourceFile=HeapChunkProvider.java,  }
 
124|EndNode 
125|Pi 
126|MethodCallTarget 
127|Invoke#Log.string 
128|FrameState@92 - 128|FrameState@92 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=92, sourceFile=HeapChunkProvider.java,  }
 
129|IsNull 
130|BytecodeException#NULL_POINTER 
131|Begin 
132|Begin 
133|If 
134|FrameState@93 - 134|FrameState@93 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 93], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=93, sourceFile=HeapChunkProvider.java,  }
 
136|EndNode 
137|Pi 
138|MethodCallTarget 
139|Invoke#Log.hex 
140|FrameState@96 - 140|FrameState@96 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 93], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=96, sourceFile=HeapChunkProvider.java,  }
 
141|IsNull 
142|BytecodeException#NULL_POINTER 
143|Begin 
144|Begin 
145|If 
146|FrameState@96 - 146|FrameState@96 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 96], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=96, sourceFile=HeapChunkProvider.java,  }
 
148|EndNode 
149|Pi 
150|MethodCallTarget 
151|Invoke#Log.newline 
152|FrameState@99 - 152|FrameState@99 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 96], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=99, sourceFile=HeapChunkProvider.java,  }
 
153|MethodCallTarget 
154|Invoke#HeapChunkProvider.initializeChunk 
155|FrameState@105 - 155|FrameState@105 { sourceLine=124, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:123) [bci: 102], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=105, sourceFile=HeapChunkProvider.java,  }
 
156|MethodCallTarget 
157|Invoke#HeapChunkProvider.resetAlignedHeapChunk 
158|FrameState@109 - 158|FrameState@109 { sourceLine=126, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:124) [bci: 106], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=109, sourceFile=HeapChunkProvider.java,  }
 
159|EndNode 
160|Merge 
161|EndNode 
162|ValuePhi(48 103, i64) 
163|FrameState@109 - 163|FrameState@109 { sourceLine=126, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=109, sourceFile=HeapChunkProvider.java,  }
 
166|MethodCallTarget 
167|Invoke#HeapPolicy.getZapProducedHeapChunks 
168|FrameState@182 - 168|FrameState@182 { sourceLine=129, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:129) [bci: 179], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=182, sourceFile=HeapChunkProvider.java,  }
 
169|== 
170|Begin 
171|Begin 
172|If 
173|MethodCallTarget 
174|Invoke#HeapPolicy.getProducedHeapChunkZapWord 
175|FrameState@189 - 175|FrameState@189 { sourceLine=130, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:130) [bci: 186], stackSize=2, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=189, sourceFile=HeapChunkProvider.java,  }
 
176|MethodCallTarget 
177|Invoke#HeapChunkProvider.zap 
178|FrameState@192 - 178|FrameState@192 { sourceLine=133, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:130) [bci: 189], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=192, sourceFile=HeapChunkProvider.java,  }
 
179|EndNode 
180|Merge 
181|EndNode 
182|FrameState@192 - 182|FrameState@192 { sourceLine=133, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=192, sourceFile=HeapChunkProvider.java,  }
 
183|Constant(com.oracle.svm.core.jdk.UninterruptibleUtils$AtomicUnsigned, a -) - node represents a constant 
184|MethodCallTarget 
185|Invoke#UninterruptibleUtils$AtomicUnsigned.addAndGet 
186|FrameState@199 - 186|FrameState@199 { sourceLine=133, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:133) [bci: 196], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=199, sourceFile=HeapChunkProvider.java,  }
 
187|MethodCallTarget 
188|Invoke#HeapChunkProvider.log 
189|FrameState@203 - 189|FrameState@203 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 200], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=203, sourceFile=HeapChunkProvider.java,  }
 
190|Constant(  result chunk: , a -) - node represents a constant 
191|IsNull 
192|BytecodeException#NULL_POINTER 
193|Begin 
194|Begin 
195|If 
196|FrameState@205 - 196|FrameState@205 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 205], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=205, sourceFile=HeapChunkProvider.java,  }
 
198|EndNode 
199|Pi 
200|MethodCallTarget 
201|Invoke#Log.string 
202|FrameState@208 - 202|FrameState@208 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 205], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=208, sourceFile=HeapChunkProvider.java,  }
 
203|IsNull 
204|BytecodeException#NULL_POINTER 
205|Begin 
206|Begin 
207|If 
208|FrameState@209 - 208|FrameState@209 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 209], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=209, sourceFile=HeapChunkProvider.java,  }
 
210|EndNode 
211|Pi 
212|MethodCallTarget 
213|Invoke#Log.hex 
214|FrameState@212 - 214|FrameState@212 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 209], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=212, sourceFile=HeapChunkProvider.java,  }
 
215|Constant(  ], a -) - node represents a constant 
216|IsNull 
217|BytecodeException#NULL_POINTER 
218|Begin 
219|Begin 
220|If 
221|FrameState@214 - 221|FrameState@214 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 214], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=214, sourceFile=HeapChunkProvider.java,  }
 
223|EndNode 
224|Pi 
225|MethodCallTarget 
226|Invoke#Log.string 
227|FrameState@217 - 227|FrameState@217 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 214], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=217, sourceFile=HeapChunkProvider.java,  }
 
228|IsNull 
229|BytecodeException#NULL_POINTER 
230|Begin 
231|Begin 
232|If 
233|FrameState@217 - 233|FrameState@217 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 217], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=217, sourceFile=HeapChunkProvider.java,  }
 
235|EndNode 
236|Pi 
237|MethodCallTarget 
238|Invoke#Log.newline 
239|FrameState@220 - 239|FrameState@220 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 217], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=220, sourceFile=HeapChunkProvider.java,  }
 
240|Return 
241|FrameState@-4[AFTER_EXCEPTION_BCI] - 241|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
242|Unwind 
ForeignCall: dynamicHubFromObjectHeader, slowPathNewInstance
ForeignCall: getGCImpl, slowPathNewInstance
ForeignCall: slowPathNewInstanceWithoutAllocating, slowPathNewInstance
ForeignCall: getGCImpl, slowPathNewInstance
ForeignCall: runSlowPathHooks, slowPathNewInstance

build structured graph: Caller: allocateNewInstance (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: Class, ThreadLocalAllocation$Descriptor, boolean, node count: 10
Callee: string (class: com.oracle.svm.core.log.Log$NoopLog), par: String, node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=393, code=ResolvedJavaMethodBytecode<Log$NoopLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Log.java,  }
 
4|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 6
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 69
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 86
Callee: newline (class: com.oracle.svm.core.log.RealLog), par: , node count: 25
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=178, code=ResolvedJavaMethodBytecode<RealLog.newline()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
3|Constant([B, a -) - node represents a constant 
4|MethodCallTarget 
5|Invoke#Log.string 
6|FrameState@7 - 6|FrameState@7 { sourceLine=178, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:178) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
7|LoadField#autoflush - node represents a read of a static or instance field. 
8|Constant(0, i32) - node represents a constant 
9|== 
10|Begin 
11|Begin 
12|If 
13|MethodCallTarget 
14|Invoke#RealLog.flush 
15|FrameState@19 - 15|FrameState@19 { sourceLine=180, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:180) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=19, sourceFile=RealLog.java,  }
 
16|EndNode 
17|Merge 
18|EndNode 
19|FrameState@20 - 19|FrameState@20 { sourceLine=182, code=ResolvedJavaMethodBytecode<RealLog.newline()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=20, sourceFile=RealLog.java,  }
 
20|LoadField#indent - node represents a read of a static or instance field. 
21|MethodCallTarget 
22|Invoke#RealLog.spaces 
23|FrameState@28 - 23|FrameState@28 { sourceLine=182, code=ResolvedJavaMethodBytecode<RealLog.newline()>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.newline(RealLog.java:182) [bci: 25], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=28, sourceFile=RealLog.java,  }
 
24|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 183
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 9
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: length (class: java.lang.String), par: , node count: 14
Callee: coder (class: java.lang.String), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=3258, code=ResolvedJavaMethodBytecode<String.coder()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|LoadField#coder - node represents a read of a static or instance field. 
6|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: length (class: java.lang.String), par: , node count: 18
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=String.java,  }
 
3|LoadField#value - node represents a read of a static or instance field. 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@4 - 9|FrameState@4 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=true, bci=4, sourceFile=String.java,  }
 
12|Pi 
13|ArrayLength 
14|MethodCallTarget 
15|Invoke#String.coder 
16|FrameState@9 - 16|FrameState@9 { sourceLine=658, code=ResolvedJavaMethodBytecode<String.length()>, nodeSourcePosition=at java.lang.String.length(String.java:658) [bci: 6], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=String.java,  }
 
17|>>> 
18|Return 
19|Unwind 

build structured graph: Caller: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 24
Callee: min (class: java.lang.Math), par: int, int, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Math.java,  }
 
4|< 
5|Begin 
6|Begin 
7|If 
9|EndNode 
10|Merge 
11|EndNode 
12|ValuePhi(1 2, i32) 
13|FrameState@10 - 13|FrameState@10 { sourceLine=1513, code=ResolvedJavaMethodBytecode<Math.min(int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=Math.java,  }
 
14|Return 

build structured graph: Caller: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 17
Callee: rawBytes (class: com.oracle.svm.core.log.RealLog), par: Object, int, int, node count: 197
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=124, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
6|Constant(256, i32) - node represents a constant 
7|StackValue 
9|EndNode 
10|LoopBegin 
11|ValuePhi(3 204, i32) 
12|ValuePhi(4 205, i32) 
13|FrameState@22 - 13|FrameState@22 { sourceLine=129, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=22, sourceFile=RealLog.java,  }
 
14|Constant(0, i32) - node represents a constant 
15|Constant(1, i32) - node represents a constant 
16|< 
17|Begin 
19|LoopExit 
20|ValueProxy 
21|ValueProxy 
22|FrameState@151 - 22|FrameState@151 { sourceLine=149, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:149) [bci: 151], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=151, sourceFile=RealLog.java,  }
 
23|If 
24|MethodCallTarget 
25|Invoke#Math.min 
26|FrameState@35 - 26|FrameState@35 { sourceLine=130, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:130) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=35, sourceFile=RealLog.java,  }
 
28|EndNode 
29|LoopBegin 
30|ValuePhi(14 198, i32) 
31|FrameState@40 - 31|FrameState@40 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=40, sourceFile=RealLog.java,  }
 
32|< 
34|LoopExit 
35|ValueProxy 
36|FrameState@122 - 36|FrameState@122 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 122], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=122, sourceFile=RealLog.java,  }
 
37|Begin 
38|If 
39|+ 
40|InstanceOf 
41|Begin 
42|Begin 
43|If 
44|InstanceOf 
45|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
46|BytecodeException#CLASS_CAST 
47|Begin 
48|Begin 
49|If 
50|FrameState@62 - 50|FrameState@62 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=62, sourceFile=RealLog.java,  }
 
53|LoopExit 
54|ValueProxy 
55|ValueProxy 
56|ValueProxy 
57|FrameState@-4[AFTER_EXCEPTION_BCI] - 57|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
58|LoopExit 
59|ValueProxy 
60|FrameState@-4[AFTER_EXCEPTION_BCI] - 60|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
61|Pi 
62|MethodCallTarget 
63|Invoke#RealLog.charAt 
64|FrameState@70 - 64|FrameState@70 { sourceLine=136, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:136) [bci: 67], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=70, sourceFile=RealLog.java,  }
 
65|Narrow 
66|SignExtend 
68|InstanceOf 
69|Begin 
70|Begin 
71|If 
72|InstanceOf 
73|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
74|BytecodeException#CLASS_CAST 
75|Begin 
76|Begin 
77|If 
78|FrameState@84 - 78|FrameState@84 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=84, sourceFile=RealLog.java,  }
 
80|EndNode 
81|Merge 
82|EndNode 
83|LoopExit 
84|ValueProxy 
85|ValueProxy 
86|ValueProxy 
87|FrameState@-4[AFTER_EXCEPTION_BCI] - 87|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
88|LoopExit 
89|ValueProxy 
90|FrameState@-4[AFTER_EXCEPTION_BCI] - 90|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
91|ValuePhi(59 89 107 125 149 166 184, a -) 
92|Pi 
93|IsNull 
94|BytecodeException#NULL_POINTER 
95|Begin 
96|Begin 
97|If 
98|FrameState@89 - 98|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
100|EndNode 
101|LoopExit 
102|ValueProxy 
103|ValueProxy 
104|ValueProxy 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|LoopExit 
107|ValueProxy 
108|FrameState@-4[AFTER_EXCEPTION_BCI] - 108|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
109|Pi 
110|ArrayLength 
111||<| 
112|BytecodeException#OUT_OF_BOUNDS 
113|Begin 
114|Begin 
115|If 
116|FrameState@89 - 116|FrameState@89 { sourceLine=138, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:138) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=89, sourceFile=RealLog.java,  }
 
118|EndNode 
119|LoopExit 
120|ValueProxy 
121|ValueProxy 
122|ValueProxy 
123|FrameState@-4[AFTER_EXCEPTION_BCI] - 123|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
124|LoopExit 
125|ValueProxy 
126|FrameState@-4[AFTER_EXCEPTION_BCI] - 126|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
127|LoadIndexed 
128|Narrow 
129|SignExtend 
130|EndNode 
131|Merge 
132|EndNode 
133|ValuePhi(66 129 186, i32) 
134|InstanceOf 
135|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
136|BytecodeException#CLASS_CAST 
137|Begin 
138|Begin 
139|If 
140|FrameState@97 - 140|FrameState@97 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=97, sourceFile=RealLog.java,  }
 
142|EndNode 
143|LoopExit 
144|ValueProxy 
145|ValueProxy 
146|ValueProxy 
147|FrameState@-4[AFTER_EXCEPTION_BCI] - 147|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
148|LoopExit 
149|ValueProxy 
150|FrameState@-4[AFTER_EXCEPTION_BCI] - 150|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
151|Pi 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@102 - 157|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
159|EndNode 
160|LoopExit 
161|ValueProxy 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|LoopExit 
166|ValueProxy 
167|FrameState@-4[AFTER_EXCEPTION_BCI] - 167|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
168|Pi 
169|ArrayLength 
170||<| 
171|BytecodeException#OUT_OF_BOUNDS 
172|Begin 
173|Begin 
174|If 
175|FrameState@102 - 175|FrameState@102 { sourceLine=140, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:140) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=true, bci=102, sourceFile=RealLog.java,  }
 
177|EndNode 
178|LoopExit 
179|ValueProxy 
180|ValueProxy 
181|ValueProxy 
182|FrameState@-4[AFTER_EXCEPTION_BCI] - 182|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
183|LoopExit 
184|ValueProxy 
185|FrameState@-4[AFTER_EXCEPTION_BCI] - 185|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(Object, int, int) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
186|LoadIndexed 
187|EndNode 
188|FrameState@105 - 188|FrameState@105 { sourceLine=142, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=105, sourceFile=RealLog.java,  }
 
189|Constant(0, i64) - node represents a constant 
190|SignExtend 
191|Constant(1, i64) - node represents a constant 
192|* 
193|+ 
194|OffsetAddress 
195|Narrow 
196|CInterfaceWrite 
197|FrameState@116 - 197|FrameState@116 { sourceLine=132, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:142) [bci: 111], stackSize=0, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=116, sourceFile=RealLog.java,  }
 
198|+ 
199|LoopEnd 
200|ZeroExtend 
201|MethodCallTarget 
202|Invoke#RealLog.rawBytes 
203|FrameState@133 - 203|FrameState@133 { sourceLine=144, code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawBytes(RealLog.java:144) [bci: 130], stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=133, sourceFile=RealLog.java,  }
 
204|+ 
205|- 
206|LoopEnd 
207|Return 
208|FrameState@-4[AFTER_EXCEPTION_BCI] - 208|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RealLog.rawBytes(Object, int, int)>, stackSize=1, duringCall=false, locksSize=0, localsSize=12, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
209|Unwind 

build structured graph: Caller: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 14
Callee: rawString (class: com.oracle.svm.core.log.RealLog), par: String, node count: 20
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@4 - 10|FrameState@4 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=4, sourceFile=RealLog.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#String.length 
16|FrameState@7 - 16|FrameState@7 { sourceLine=406, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 4], stackSize=4, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=RealLog.java,  }
 
17|MethodCallTarget 
18|Invoke#RealLog.rawBytes 
19|FrameState@10 - 19|FrameState@10 { sourceLine=407, code=ResolvedJavaMethodBytecode<RealLog.rawString(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.rawString(RealLog.java:406) [bci: 7], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=RealLog.java,  }
 
20|Return 
21|Unwind 

build structured graph: Caller: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 202
Callee: string (class: com.oracle.svm.core.log.RealLog), par: String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=65, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=RealLog.java,  }
 
4|Constant(null, a -) - node represents a constant 
5|IsNull 
6|Begin 
7|Begin 
8|If 
9|MethodCallTarget 
10|Invoke#RealLog.rawString 
11|FrameState@9 - 11|FrameState@9 { sourceLine=66, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:66) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=9, sourceFile=RealLog.java,  }
 
13|Constant(null, a -) - node represents a constant 
14|MethodCallTarget 
15|Invoke#RealLog.rawString 
16|FrameState@18 - 16|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, nodeSourcePosition=at com.oracle.svm.core.log.RealLog.string(RealLog.java:68) [bci: 15], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
17|EndNode 
18|Merge 
19|EndNode 
20|FrameState@18 - 20|FrameState@18 { sourceLine=70, code=ResolvedJavaMethodBytecode<RealLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=RealLog.java,  }
 
21|Return 

build structured graph: Caller: exitIfAllocationDisallowed (class: com.oracle.svm.core.genscavenge.HeapImpl), par: String, String, node count: 13
Callee: exit (class: com.oracle.svm.core.heap.NoAllocationVerifier), par: String, String, node count: 218
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=NoAllocationVerifier.java,  }
 
4|Constant(com.oracle.svm.core.log.RealLog, a -) - node represents a constant 
5|Constant([NoAllocationVerifier detected disallowed allocation: , a -) - node represents a constant 
6|MethodCallTarget 
7|Invoke#RealLog.string 
8|FrameState@8 - 8|FrameState@8 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=8, sourceFile=NoAllocationVerifier.java,  }
 
9|IsNull 
10|BytecodeException#NULL_POINTER 
11|Begin 
12|Begin 
13|If 
14|FrameState@9 - 14|FrameState@9 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=9, sourceFile=NoAllocationVerifier.java,  }
 
17|Pi 
18|MethodCallTarget 
19|Invoke#Log.string 
20|FrameState@12 - 20|FrameState@12 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=12, sourceFile=NoAllocationVerifier.java,  }
 
21|Constant(: , a -) - node represents a constant 
22|IsNull 
23|BytecodeException#NULL_POINTER 
24|Begin 
25|Begin 
26|If 
27|FrameState@14 - 27|FrameState@14 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 14], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=14, sourceFile=NoAllocationVerifier.java,  }
 
29|EndNode 
30|Merge 
31|EndNode 
32|ValuePhi(10 23 38 50 101 118 133 147 163 178 188 207 223 230, a -) 
33|Pi 
34|MethodCallTarget 
35|Invoke#Log.string 
36|FrameState@17 - 36|FrameState@17 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 14], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=17, sourceFile=NoAllocationVerifier.java,  }
 
37|IsNull 
38|BytecodeException#NULL_POINTER 
39|Begin 
40|Begin 
41|If 
42|FrameState@18 - 42|FrameState@18 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 18], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=18, sourceFile=NoAllocationVerifier.java,  }
 
44|EndNode 
45|Pi 
46|MethodCallTarget 
47|Invoke#Log.string 
48|FrameState@21 - 48|FrameState@21 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 18], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=21, sourceFile=NoAllocationVerifier.java,  }
 
49|IsNull 
50|BytecodeException#NULL_POINTER 
51|Begin 
52|Begin 
53|If 
54|FrameState@21 - 54|FrameState@21 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 21], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=21, sourceFile=NoAllocationVerifier.java,  }
 
56|EndNode 
57|Pi 
58|MethodCallTarget 
59|Invoke#Log.newline 
60|FrameState@24 - 60|FrameState@24 { sourceLine=51, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:51) [bci: 21], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=24, sourceFile=NoAllocationVerifier.java,  }
 
61|Constant(com.oracle.svm.core.threadlocal.FastThreadLocalObject, a -) - node represents a constant 
62|ReadIsolateThreadFloating 
63|LoadVMThreadLocal 
64|Constant(null, a -) - node represents a constant 
65|IsNull 
66|Begin 
67|Begin 
68|If 
69|Constant([NoAllocationVerifier stack: , a -) - node represents a constant 
70|MethodCallTarget 
71|Invoke#RealLog.string 
72|FrameState@42 - 72|FrameState@42 { sourceLine=53, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:53) [bci: 39], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=42, sourceFile=NoAllocationVerifier.java,  }
 
73|LoadVMThreadLocal 
74|LogicConstant 
76|EndNode 
77|LoopBegin 
78|ValuePhi(73 181, a -) 
79|FrameState@53 - 79|FrameState@53 { sourceLine=54, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=53, sourceFile=NoAllocationVerifier.java,  }
 
80|IsNull 
81|Begin 
83|LoopExit 
84|ValueProxy 
85|FrameState@92 - 85|FrameState@92 { sourceLine=57, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:57) [bci: 92], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=92, sourceFile=NoAllocationVerifier.java,  }
 
86|If 
87|MethodCallTarget 
88|Invoke#RealLog.newline 
89|FrameState@63 - 89|FrameState@63 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 60], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=63, sourceFile=NoAllocationVerifier.java,  }
 
90|Constant(  , a -) - node represents a constant 
91|IsNull 
92|BytecodeException#NULL_POINTER 
93|Begin 
94|Begin 
95|If 
96|FrameState@65 - 96|FrameState@65 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 65], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=65, sourceFile=NoAllocationVerifier.java,  }
 
98|EndNode 
99|LoopExit 
100|ValueProxy 
101|ValueProxy 
102|FrameState@-4[AFTER_EXCEPTION_BCI] - 102|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
103|Pi 
104|MethodCallTarget 
105|Invoke#Log.string 
106|FrameState@68 - 106|FrameState@68 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 65], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=68, sourceFile=NoAllocationVerifier.java,  }
 
107|Constant(  reason: , a -) - node represents a constant 
108|IsNull 
109|BytecodeException#NULL_POINTER 
110|Begin 
111|Begin 
112|If 
113|FrameState@70 - 113|FrameState@70 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 70], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=70, sourceFile=NoAllocationVerifier.java,  }
 
115|EndNode 
116|LoopExit 
117|ValueProxy 
118|ValueProxy 
119|FrameState@-4[AFTER_EXCEPTION_BCI] - 119|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
120|Pi 
121|MethodCallTarget 
122|Invoke#Log.string 
123|FrameState@73 - 123|FrameState@73 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 70], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=73, sourceFile=NoAllocationVerifier.java,  }
 
124|BytecodeException#NULL_POINTER 
125|Begin 
126|Begin 
127|If 
128|FrameState@74 - 128|FrameState@74 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 74], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=74, sourceFile=NoAllocationVerifier.java,  }
 
130|EndNode 
131|LoopExit 
132|ValueProxy 
133|ValueProxy 
134|FrameState@-4[AFTER_EXCEPTION_BCI] - 134|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
135|Pi 
136|LoadField#reason - node represents a read of a static or instance field. 
137|IsNull 
138|BytecodeException#NULL_POINTER 
139|Begin 
140|Begin 
141|If 
142|FrameState@77 - 142|FrameState@77 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 77], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=77, sourceFile=NoAllocationVerifier.java,  }
 
144|EndNode 
145|LoopExit 
146|ValueProxy 
147|ValueProxy 
148|FrameState@-4[AFTER_EXCEPTION_BCI] - 148|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
149|Pi 
150|MethodCallTarget 
151|Invoke#Log.string 
152|FrameState@80 - 152|FrameState@80 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 77], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=80, sourceFile=NoAllocationVerifier.java,  }
 
153|IsNull 
154|BytecodeException#NULL_POINTER 
155|Begin 
156|Begin 
157|If 
158|FrameState@80 - 158|FrameState@80 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 80], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=80, sourceFile=NoAllocationVerifier.java,  }
 
160|EndNode 
161|LoopExit 
162|ValueProxy 
163|ValueProxy 
164|FrameState@-4[AFTER_EXCEPTION_BCI] - 164|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
165|Pi 
166|MethodCallTarget 
167|Invoke#Log.newline 
168|FrameState@83 - 168|FrameState@83 { sourceLine=55, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:55) [bci: 80], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=83, sourceFile=NoAllocationVerifier.java,  }
 
169|BytecodeException#NULL_POINTER 
170|Begin 
171|Begin 
172|If 
173|FrameState@85 - 173|FrameState@85 { sourceLine=54, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:54) [bci: 85], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=85, sourceFile=NoAllocationVerifier.java,  }
 
175|EndNode 
176|LoopExit 
177|ValueProxy 
178|ValueProxy 
179|FrameState@-4[AFTER_EXCEPTION_BCI] - 179|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(String, String) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
180|Pi 
181|LoadField#next - node represents a read of a static or instance field. 
182|LoopEnd 
183|Constant(], a -) - node represents a constant 
184|MethodCallTarget 
185|Invoke#RealLog.string 
186|FrameState@100 - 186|FrameState@100 { sourceLine=57, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:57) [bci: 97], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=100, sourceFile=NoAllocationVerifier.java,  }
 
187|IsNull 
188|BytecodeException#NULL_POINTER 
189|Begin 
190|Begin 
191|If 
192|FrameState@100 - 192|FrameState@100 { sourceLine=57, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:57) [bci: 100], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=100, sourceFile=NoAllocationVerifier.java,  }
 
194|EndNode 
195|Pi 
196|MethodCallTarget 
197|Invoke#Log.newline 
198|FrameState@103 - 198|FrameState@103 { sourceLine=57, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:57) [bci: 100], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=103, sourceFile=NoAllocationVerifier.java,  }
 
199|EndNode 
200|Merge 
201|EndNode 
202|FrameState@104 - 202|FrameState@104 { sourceLine=59, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=104, sourceFile=NoAllocationVerifier.java,  }
 
203|MethodCallTarget 
204|Invoke#RealLog.string 
205|FrameState@112 - 205|FrameState@112 { sourceLine=59, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:59) [bci: 109], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=112, sourceFile=NoAllocationVerifier.java,  }
 
206|IsNull 
207|BytecodeException#NULL_POINTER 
208|Begin 
209|Begin 
210|If 
211|FrameState@112 - 211|FrameState@112 { sourceLine=59, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:59) [bci: 112], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=112, sourceFile=NoAllocationVerifier.java,  }
 
213|EndNode 
214|Pi 
215|MethodCallTarget 
216|Invoke#Log.newline 
217|FrameState@115 - 217|FrameState@115 { sourceLine=59, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:59) [bci: 112], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=115, sourceFile=NoAllocationVerifier.java,  }
 
218|Constant(Attempt to allocate while allocation was explicitly disabled using a NoAllocationVerifier, a -) - node represents a constant 
219|MethodCallTarget 
220|Invoke#VMError.shouldNotReachHere 
221|FrameState@121 - 221|FrameState@121 { sourceLine=61, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:61) [bci: 118], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=121, sourceFile=NoAllocationVerifier.java,  }
 
222|IsNull 
223|BytecodeException#NULL_POINTER 
224|Begin 
225|Begin 
226|If 
227|FrameState@121 - 227|FrameState@121 { sourceLine=61, code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, nodeSourcePosition=at com.oracle.svm.core.heap.NoAllocationVerifier.exit(NoAllocationVerifier.java:61) [bci: 121], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=121, sourceFile=NoAllocationVerifier.java,  }
 
229|EndNode 
230|Pi 
232|EndNode 
233|FrameState@-4[AFTER_EXCEPTION_BCI] - 233|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<NoAllocationVerifier.exit(String, String)>, stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
234|Unwind 

build structured graph: Caller: allocateNewInstance (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: Class, ThreadLocalAllocation$Descriptor, boolean, node count: 158
Callee: exitIfAllocationDisallowed (class: com.oracle.svm.core.genscavenge.HeapImpl), par: String, String, node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=252, code=ResolvedJavaMethodBytecode<HeapImpl.exitIfAllocationDisallowed(String, String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=HeapImpl.java,  }
 
4|Constant(com.oracle.svm.core.genscavenge.HeapImpl, a -) - node represents a constant 
5|MethodCallTarget 
6|Invoke#HeapImpl.isAllocationDisallowed 
7|FrameState@6 - 7|FrameState@6 { sourceLine=252, code=ResolvedJavaMethodBytecode<HeapImpl.exitIfAllocationDisallowed(String, String)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapImpl.exitIfAllocationDisallowed(HeapImpl.java:252) [bci: 3], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=6, sourceFile=HeapImpl.java,  }
 
8|Constant(0, i32) - node represents a constant 
9|== 
10|Begin 
11|Begin 
12|If 
13|MethodCallTarget 
14|Invoke#NoAllocationVerifier.exit 
15|FrameState@14 - 15|FrameState@14 { sourceLine=255, code=ResolvedJavaMethodBytecode<HeapImpl.exitIfAllocationDisallowed(String, String)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapImpl.exitIfAllocationDisallowed(HeapImpl.java:253) [bci: 11], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=14, sourceFile=HeapImpl.java,  }
 
16|EndNode 
17|Merge 
18|EndNode 
19|FrameState@14 - 19|FrameState@14 { sourceLine=255, code=ResolvedJavaMethodBytecode<HeapImpl.exitIfAllocationDisallowed(String, String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=14, sourceFile=HeapImpl.java,  }
 
20|Return 

build structured graph: Caller: allocateNewInstance (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: Class, ThreadLocalAllocation$Descriptor, boolean, node count: 167
Callee: getHeapPolicy (class: com.oracle.svm.core.genscavenge.HeapImpl), par: , node count: 6
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=297, code=ResolvedJavaMethodBytecode<HeapImpl.getHeapPolicy()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=HeapImpl.java,  }
 
3|Constant(com.oracle.svm.core.genscavenge.HeapImpl, a -) - node represents a constant 
4|Constant(com.oracle.svm.core.genscavenge.HeapPolicy, a -) - node represents a constant 
5|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: popUnusedAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 3
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: popUnusedAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 122
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 46
Callee: popUnusedAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 200
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunkProvider.log 
5|FrameState@3 - 5|FrameState@3 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 0], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=3, sourceFile=HeapChunkProvider.java,  }
 
6|Constant(  old list top: , a -) - node represents a constant 
7|IsNull 
8|BytecodeException#NULL_POINTER 
9|Begin 
10|Begin 
11|If 
12|FrameState@5 - 12|FrameState@5 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=5, sourceFile=HeapChunkProvider.java,  }
 
15|Pi 
16|MethodCallTarget 
17|Invoke#Log.string 
18|FrameState@8 - 18|FrameState@8 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=8, sourceFile=HeapChunkProvider.java,  }
 
19|LoadField#unusedAlignedChunks - node represents a read of a static or instance field. 
20|IsNull 
21|BytecodeException#NULL_POINTER 
22|Begin 
23|Begin 
24|If 
25|FrameState@12 - 25|FrameState@12 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 12], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=12, sourceFile=HeapChunkProvider.java,  }
 
27|EndNode 
28|Merge 
29|EndNode 
30|ValuePhi(8 21 36 49 62 74 86 112 128 141 153 165 178 190 202, a -) 
31|Pi 
32|MethodCallTarget 
33|Invoke#UninterruptibleUtils$AtomicPointer.get 
34|FrameState@15 - 34|FrameState@15 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 12], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=15, sourceFile=HeapChunkProvider.java,  }
 
35|IsNull 
36|BytecodeException#NULL_POINTER 
37|Begin 
38|Begin 
39|If 
40|FrameState@15 - 40|FrameState@15 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 15], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=15, sourceFile=HeapChunkProvider.java,  }
 
42|EndNode 
43|Pi 
44|MethodCallTarget 
45|Invoke#Log.hex 
46|FrameState@18 - 46|FrameState@18 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 15], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=18, sourceFile=HeapChunkProvider.java,  }
 
47|Constant(  list bytes , a -) - node represents a constant 
48|IsNull 
49|BytecodeException#NULL_POINTER 
50|Begin 
51|Begin 
52|If 
53|FrameState@20 - 53|FrameState@20 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=20, sourceFile=HeapChunkProvider.java,  }
 
55|EndNode 
56|Pi 
57|MethodCallTarget 
58|Invoke#Log.string 
59|FrameState@23 - 59|FrameState@23 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=23, sourceFile=HeapChunkProvider.java,  }
 
60|LoadField#bytesInUnusedAlignedChunks - node represents a read of a static or instance field. 
61|IsNull 
62|BytecodeException#NULL_POINTER 
63|Begin 
64|Begin 
65|If 
66|FrameState@27 - 66|FrameState@27 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 27], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=27, sourceFile=HeapChunkProvider.java,  }
 
68|EndNode 
69|Pi 
70|MethodCallTarget 
71|Invoke#UninterruptibleUtils$AtomicWord.get 
72|FrameState@30 - 72|FrameState@30 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 27], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=30, sourceFile=HeapChunkProvider.java,  }
 
73|IsNull 
74|BytecodeException#NULL_POINTER 
75|Begin 
76|Begin 
77|If 
78|FrameState@30 - 78|FrameState@30 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 30], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=30, sourceFile=HeapChunkProvider.java,  }
 
80|EndNode 
81|Pi 
82|MethodCallTarget 
83|Invoke#Log.signed 
84|FrameState@33 - 84|FrameState@33 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 30], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=33, sourceFile=HeapChunkProvider.java,  }
 
85|IsNull 
86|BytecodeException#NULL_POINTER 
87|Begin 
88|Begin 
89|If 
90|FrameState@33 - 90|FrameState@33 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 33], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=33, sourceFile=HeapChunkProvider.java,  }
 
92|EndNode 
93|Pi 
94|MethodCallTarget 
95|Invoke#Log.newline 
96|FrameState@36 - 96|FrameState@36 { sourceLine=219, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:219) [bci: 33], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=36, sourceFile=HeapChunkProvider.java,  }
 
97|MethodCallTarget 
98|Invoke#HeapChunkProvider.popUnusedAlignedChunkUninterruptibly 
99|FrameState@41 - 99|FrameState@41 { sourceLine=221, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:221) [bci: 38], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=41, sourceFile=HeapChunkProvider.java,  }
 
100|Constant(1, i32) - node represents a constant 
101|Constant(0, i32) - node represents a constant 
102|Constant(0, i64) - node represents a constant 
103|== 
104|Conditional 
105|Begin 
106|Begin 
107|If 
108|Return 
109|LoadField#bytesInUnusedAlignedChunks - node represents a read of a static or instance field. 
110|Constant(1048576, i64) - node represents a constant 
111|IsNull 
112|BytecodeException#NULL_POINTER 
113|Begin 
114|Begin 
115|If 
116|FrameState@65 - 116|FrameState@65 { sourceLine=227, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:227) [bci: 65], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=65, sourceFile=HeapChunkProvider.java,  }
 
118|EndNode 
119|Pi 
120|MethodCallTarget 
121|Invoke#UninterruptibleUtils$AtomicUnsigned.subtractAndGet 
122|FrameState@68 - 122|FrameState@68 { sourceLine=227, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:227) [bci: 65], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=68, sourceFile=HeapChunkProvider.java,  }
 
123|MethodCallTarget 
124|Invoke#HeapChunkProvider.log 
125|FrameState@72 - 125|FrameState@72 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 69], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=72, sourceFile=HeapChunkProvider.java,  }
 
126|Constant(  new list top: , a -) - node represents a constant 
127|IsNull 
128|BytecodeException#NULL_POINTER 
129|Begin 
130|Begin 
131|If 
132|FrameState@74 - 132|FrameState@74 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 74], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=74, sourceFile=HeapChunkProvider.java,  }
 
134|EndNode 
135|Pi 
136|MethodCallTarget 
137|Invoke#Log.string 
138|FrameState@77 - 138|FrameState@77 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 74], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=77, sourceFile=HeapChunkProvider.java,  }
 
139|LoadField#unusedAlignedChunks - node represents a read of a static or instance field. 
140|IsNull 
141|BytecodeException#NULL_POINTER 
142|Begin 
143|Begin 
144|If 
145|FrameState@81 - 145|FrameState@81 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 81], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=81, sourceFile=HeapChunkProvider.java,  }
 
147|EndNode 
148|Pi 
149|MethodCallTarget 
150|Invoke#UninterruptibleUtils$AtomicPointer.get 
151|FrameState@84 - 151|FrameState@84 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 81], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=84, sourceFile=HeapChunkProvider.java,  }
 
152|IsNull 
153|BytecodeException#NULL_POINTER 
154|Begin 
155|Begin 
156|If 
157|FrameState@84 - 157|FrameState@84 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=84, sourceFile=HeapChunkProvider.java,  }
 
159|EndNode 
160|Pi 
161|MethodCallTarget 
162|Invoke#Log.hex 
163|FrameState@87 - 163|FrameState@87 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=87, sourceFile=HeapChunkProvider.java,  }
 
164|IsNull 
165|BytecodeException#NULL_POINTER 
166|Begin 
167|Begin 
168|If 
169|FrameState@89 - 169|FrameState@89 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=89, sourceFile=HeapChunkProvider.java,  }
 
171|EndNode 
172|Pi 
173|MethodCallTarget 
174|Invoke#Log.string 
175|FrameState@92 - 175|FrameState@92 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=92, sourceFile=HeapChunkProvider.java,  }
 
176|LoadField#bytesInUnusedAlignedChunks - node represents a read of a static or instance field. 
177|IsNull 
178|BytecodeException#NULL_POINTER 
179|Begin 
180|Begin 
181|If 
182|FrameState@96 - 182|FrameState@96 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 96], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=96, sourceFile=HeapChunkProvider.java,  }
 
184|EndNode 
185|Pi 
186|MethodCallTarget 
187|Invoke#UninterruptibleUtils$AtomicWord.get 
188|FrameState@99 - 188|FrameState@99 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 96], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=99, sourceFile=HeapChunkProvider.java,  }
 
189|IsNull 
190|BytecodeException#NULL_POINTER 
191|Begin 
192|Begin 
193|If 
194|FrameState@99 - 194|FrameState@99 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 99], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=99, sourceFile=HeapChunkProvider.java,  }
 
196|EndNode 
197|Pi 
198|MethodCallTarget 
199|Invoke#Log.signed 
200|FrameState@102 - 200|FrameState@102 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 99], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=102, sourceFile=HeapChunkProvider.java,  }
 
201|IsNull 
202|BytecodeException#NULL_POINTER 
203|Begin 
204|Begin 
205|If 
206|FrameState@102 - 206|FrameState@102 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=102, sourceFile=HeapChunkProvider.java,  }
 
208|EndNode 
209|Pi 
210|MethodCallTarget 
211|Invoke#Log.newline 
212|FrameState@105 - 212|FrameState@105 { sourceLine=228, code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.popUnusedAlignedChunk(HeapChunkProvider.java:228) [bci: 102], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=105, sourceFile=HeapChunkProvider.java,  }
 
213|Return 
214|FrameState@-4[AFTER_EXCEPTION_BCI] - 214|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<HeapChunkProvider.popUnusedAlignedChunk()>, stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
215|Unwind 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 49
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 97
Callee: noteFirstAllocationTime (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 21
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=370, code=ResolvedJavaMethodBytecode<HeapChunkProvider.noteFirstAllocationTime()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
3|LoadField#firstAllocationTime - node represents a read of a static or instance field. 
4|Constant(0, i64) - node represents a constant 
5|IntegerNormalizeCompare 
6|Constant(0, i32) - node represents a constant 
7|== 
8|Begin 
9|Begin 
10|If 
11|MethodCallTarget 
12|Invoke#System.nanoTime 
13|FrameState@13 - 13|FrameState@13 { sourceLine=371, code=ResolvedJavaMethodBytecode<HeapChunkProvider.noteFirstAllocationTime()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.noteFirstAllocationTime(HeapChunkProvider.java:371) [bci: 10], stackSize=3, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=13, sourceFile=HeapChunkProvider.java,  }
 
14|StoreField#firstAllocationTime - node represents a write to a static or instance field. 
15|FrameState@16 - 15|FrameState@16 { sourceLine=373, code=ResolvedJavaMethodBytecode<HeapChunkProvider.noteFirstAllocationTime()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.noteFirstAllocationTime(HeapChunkProvider.java:371) [bci: 13], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
16|EndNode 
17|Merge 
18|EndNode 
19|FrameState@16 - 19|FrameState@16 { sourceLine=373, code=ResolvedJavaMethodBytecode<HeapChunkProvider.noteFirstAllocationTime()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
20|Return 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, boolean, node count: 7
Callee: defaultProtection (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: boolean, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=166, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.defaultProtection(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
3|Constant(3, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|== 
6|Begin 
7|Begin 
8|If 
9|Constant(4, i32) - node represents a constant 
10|Constant(7, i32) - node represents a constant 
11|EndNode 
12|Merge 
13|EndNode 
14|ValuePhi(3 10, i32) 
15|FrameState@10 - 15|FrameState@10 { sourceLine=170, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.defaultProtection(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=OSCommittedMemoryProvider.java,  }
 
16|Return 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, boolean, node count: 20
Callee: trackVirtualMemory (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=196, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
4|LoadField#tracker - node represents a read of a static or instance field. 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@5 - 10|FrameState@5 { sourceLine=196, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.trackVirtualMemory(OSCommittedMemoryProvider.java:196) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=5, sourceFile=OSCommittedMemoryProvider.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#OSCommittedMemoryProvider$VirtualMemoryTracker.track 
16|FrameState@8 - 16|FrameState@8 { sourceLine=197, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.trackVirtualMemory(OSCommittedMemoryProvider.java:196) [bci: 5], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=8, sourceFile=OSCommittedMemoryProvider.java,  }
 
17|Return 
18|Unwind 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, UnsignedWord, boolean, node count: 14
Callee: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, boolean, node count: 28
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=158, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
5|Constant(com.oracle.svm.core.posix.PosixVirtualMemoryProvider, a -) - node represents a constant 
6|Constant(0, i64) - node represents a constant 
7|MethodCallTarget 
8|Invoke#OSCommittedMemoryProvider.defaultProtection 
9|FrameState@11 - 9|FrameState@11 { sourceLine=158, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:158) [bci: 8], stackSize=4, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=11, sourceFile=OSCommittedMemoryProvider.java,  }
 
10|MethodCallTarget 
11|Invoke#PosixVirtualMemoryProvider.commit 
12|FrameState@16 - 12|FrameState@16 { sourceLine=158, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:158) [bci: 11], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=16, sourceFile=OSCommittedMemoryProvider.java,  }
 
13|Constant(1, i32) - node represents a constant 
14|Constant(0, i32) - node represents a constant 
15|== 
16|Conditional 
17|Begin 
18|Begin 
19|If 
20|MethodCallTarget 
21|Invoke#OSCommittedMemoryProvider.trackVirtualMemory 
22|FrameState@31 - 22|FrameState@31 { sourceLine=162, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:160) [bci: 28], stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=31, sourceFile=OSCommittedMemoryProvider.java,  }
 
23|EndNode 
24|Merge 
25|EndNode 
26|FrameState@31 - 26|FrameState@31 { sourceLine=162, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=31, sourceFile=OSCommittedMemoryProvider.java,  }
 
27|Return 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, UnsignedWord, boolean, node count: 27
Callee: defaultProtection (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: boolean, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=166, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.defaultProtection(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
3|Constant(3, i32) - node represents a constant 
4|Constant(0, i32) - node represents a constant 
5|== 
6|Begin 
7|Begin 
8|If 
9|Constant(4, i32) - node represents a constant 
10|Constant(7, i32) - node represents a constant 
11|EndNode 
12|Merge 
13|EndNode 
14|ValuePhi(3 10, i32) 
15|FrameState@10 - 15|FrameState@10 { sourceLine=170, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.defaultProtection(boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=10, sourceFile=OSCommittedMemoryProvider.java,  }
 
16|Return 

build structured graph: Caller: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, UnsignedWord, boolean, node count: 39
Callee: trackVirtualMemory (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, node count: 17
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=196, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
4|LoadField#tracker - node represents a read of a static or instance field. 
5|IsNull 
6|BytecodeException#NULL_POINTER 
7|Begin 
8|Begin 
9|If 
10|FrameState@5 - 10|FrameState@5 { sourceLine=196, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.trackVirtualMemory(OSCommittedMemoryProvider.java:196) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=5, sourceFile=OSCommittedMemoryProvider.java,  }
 
13|Pi 
14|MethodCallTarget 
15|Invoke#OSCommittedMemoryProvider$VirtualMemoryTracker.track 
16|FrameState@8 - 16|FrameState@8 { sourceLine=197, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.trackVirtualMemory(UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.trackVirtualMemory(OSCommittedMemoryProvider.java:196) [bci: 5], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=8, sourceFile=OSCommittedMemoryProvider.java,  }
 
17|Return 
18|Unwind 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 101
Callee: allocate (class: com.oracle.svm.core.os.OSCommittedMemoryProvider), par: UnsignedWord, UnsignedWord, boolean, node count: 97
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|Parameter(3) - node represents a placeholder for an incoming argument to a function call. 
5|FrameState@0 - 5|FrameState@0 { sourceLine=92, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=0, sourceFile=OSCommittedMemoryProvider.java,  }
 
6|Constant(1, i64) - node represents a constant 
7|Constant(1, i32) - node represents a constant 
8|Constant(0, i32) - node represents a constant 
9|== 
10|Conditional 
11|Begin 
12|Begin 
13|If 
14|MethodCallTarget 
15|Invoke#OSCommittedMemoryProvider.allocate 
16|FrameState@18 - 16|FrameState@18 { sourceLine=93, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:93) [bci: 15], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=18, sourceFile=OSCommittedMemoryProvider.java,  }
 
17|Return 
18|MethodCallTarget 
19|Invoke#CommittedMemoryProvider.getGranularity 
20|FrameState@23 - 20|FrameState@23 { sourceLine=102, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:102) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=23, sourceFile=OSCommittedMemoryProvider.java,  }
 
21|+ 
22|MethodCallTarget 
23|Invoke#UnsignedUtils.roundUp 
24|FrameState@41 - 24|FrameState@41 { sourceLine=107, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:107) [bci: 38], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=41, sourceFile=OSCommittedMemoryProvider.java,  }
 
25|Constant(com.oracle.svm.core.posix.PosixVirtualMemoryProvider, a -) - node represents a constant 
26|Constant(0, i64) - node represents a constant 
27|MethodCallTarget 
28|Invoke#OSCommittedMemoryProvider.defaultProtection 
29|FrameState@55 - 29|FrameState@55 { sourceLine=108, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:108) [bci: 52], stackSize=4, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=55, sourceFile=OSCommittedMemoryProvider.java,  }
 
30|MethodCallTarget 
31|Invoke#PosixVirtualMemoryProvider.commit 
32|FrameState@60 - 32|FrameState@60 { sourceLine=108, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:108) [bci: 55], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=60, sourceFile=OSCommittedMemoryProvider.java,  }
 
33|== 
34|Conditional 
35|Begin 
36|Begin 
37|If 
38|Return 
39|MethodCallTarget 
40|Invoke#OSCommittedMemoryProvider.trackVirtualMemory 
41|FrameState@85 - 41|FrameState@85 { sourceLine=114, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:113) [bci: 82], stackSize=0, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=85, sourceFile=OSCommittedMemoryProvider.java,  }
 
42|+ 
43|MethodCallTarget 
44|Invoke#PointerUtils.roundUp 
45|FrameState@102 - 45|FrameState@102 { sourceLine=117, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:117) [bci: 99], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=102, sourceFile=OSCommittedMemoryProvider.java,  }
 
46|+ 
47|MethodCallTarget 
48|Invoke#PointerUtils.roundDown 
49|FrameState@121 - 49|FrameState@121 { sourceLine=126, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:126) [bci: 118], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=121, sourceFile=OSCommittedMemoryProvider.java,  }
 
50|- 
51||<| 
52|Conditional 
53|Begin 
54|Begin 
55|If 
56|MethodCallTarget 
57|Invoke#OSCommittedMemoryProvider.free 
58|FrameState@162 - 58|FrameState@162 { sourceLine=134, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:134) [bci: 159], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=162, sourceFile=OSCommittedMemoryProvider.java,  }
 
59|== 
60|EndNode 
61|Merge 
62|EndNode 
63|Begin 
64|Begin 
65|If 
66|MethodCallTarget 
67|Invoke#OSCommittedMemoryProvider.free 
68|FrameState@173 - 68|FrameState@173 { sourceLine=135, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:135) [bci: 170], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=173, sourceFile=OSCommittedMemoryProvider.java,  }
 
69|Return 
70|FrameState@181 - 70|FrameState@181 { sourceLine=140, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=181, sourceFile=OSCommittedMemoryProvider.java,  }
 
71|MethodCallTarget 
72|Invoke#PointerUtils.roundUp 
73|FrameState@188 - 73|FrameState@188 { sourceLine=140, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:140) [bci: 185], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=188, sourceFile=OSCommittedMemoryProvider.java,  }
 
74|- 
75||<| 
76|Conditional 
77|Begin 
78|Begin 
79|If 
80|MethodCallTarget 
81|Invoke#OSCommittedMemoryProvider.free 
82|FrameState@229 - 82|FrameState@229 { sourceLine=148, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:148) [bci: 226], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=229, sourceFile=OSCommittedMemoryProvider.java,  }
 
83|== 
84|EndNode 
85|Merge 
86|EndNode 
87|Begin 
88|Begin 
89|If 
90|- 
91|MethodCallTarget 
92|Invoke#OSCommittedMemoryProvider.free 
93|FrameState@247 - 93|FrameState@247 { sourceLine=149, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, nodeSourcePosition=at com.oracle.svm.core.os.OSCommittedMemoryProvider.allocate(OSCommittedMemoryProvider.java:149) [bci: 244], stackSize=1, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=247, sourceFile=OSCommittedMemoryProvider.java,  }
 
94|Return 
95|FrameState@255 - 95|FrameState@255 { sourceLine=153, code=ResolvedJavaMethodBytecode<OSCommittedMemoryProvider.allocate(UnsignedWord, UnsignedWord, boolean)>, stackSize=0, duringCall=false, locksSize=0, localsSize=19, rethrowException=false, bci=255, sourceFile=OSCommittedMemoryProvider.java,  }
 
96|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 112
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 152
Callee: initializeChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: HeapChunk$Header, UnsignedWord, node count: 13
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=296, code=ResolvedJavaMethodBytecode<HeapChunkProvider.initializeChunk(HeapChunk$Header, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
4|MethodCallTarget 
5|Invoke#HeapChunk.asPointer 
6|FrameState@5 - 6|FrameState@5 { sourceLine=296, code=ResolvedJavaMethodBytecode<HeapChunkProvider.initializeChunk(HeapChunk$Header, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.initializeChunk(HeapChunkProvider.java:296) [bci: 2], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=5, sourceFile=HeapChunkProvider.java,  }
 
7|+ 
8|Constant(0, i64) - node represents a constant 
9|OffsetAddress 
10|CInterfaceWrite 
11|FrameState@16 - 11|FrameState@16 { sourceLine=297, code=ResolvedJavaMethodBytecode<HeapChunkProvider.initializeChunk(HeapChunk$Header, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.initializeChunk(HeapChunkProvider.java:296) [bci: 11], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
12|Return 

build structured graph: Caller: getAlignedHeapChunkStart (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 3
Callee: getObjectsStart (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=121, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getObjectsStart(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=121, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getObjectsStart(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getObjectsStart(AlignedHeapChunk.java:121) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Constant(4136, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 3
Callee: getAlignedHeapChunkStart (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=137, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getAlignedHeapChunkStart(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#AlignedHeapChunk.getObjectsStart 
5|FrameState@4 - 5|FrameState@4 { sourceLine=137, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getAlignedHeapChunkStart(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getAlignedHeapChunkStart(AlignedHeapChunk.java:137) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 6
Callee: resetChunkHeader (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: HeapChunk$Header, Pointer, node count: 23
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=301, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
4|Constant(32, i64) - node represents a constant 
5|OffsetAddress 
6|CInterfaceWrite 
7|FrameState@7 - 7|FrameState@7 { sourceLine=302, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetChunkHeader(HeapChunkProvider.java:301) [bci: 2], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=HeapChunkProvider.java,  }
 
8|Constant(null, a -) - node represents a constant 
9|Constant(24, i64) - node represents a constant 
10|OffsetAddress 
11|JavaWrite 
12|FrameState@14 - 12|FrameState@14 { sourceLine=303, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetChunkHeader(HeapChunkProvider.java:302) [bci: 9], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=14, sourceFile=HeapChunkProvider.java,  }
 
13|Constant(0, i64) - node represents a constant 
14|Constant(8, i64) - node represents a constant 
15|OffsetAddress 
16|CInterfaceWrite 
17|FrameState@26 - 17|FrameState@26 { sourceLine=304, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetChunkHeader(HeapChunkProvider.java:303) [bci: 21], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=26, sourceFile=HeapChunkProvider.java,  }
 
18|Constant(16, i64) - node represents a constant 
19|OffsetAddress 
20|CInterfaceWrite 
21|FrameState@38 - 21|FrameState@38 { sourceLine=305, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetChunkHeader(HeapChunk$Header, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetChunkHeader(HeapChunkProvider.java:304) [bci: 33], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=38, sourceFile=HeapChunkProvider.java,  }
 
22|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 9
Callee: getCardTableStart (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=100, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getCardTableStart(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=100, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getCardTableStart(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getCardTableStart(AlignedHeapChunk.java:100) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Constant(40, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 12
Callee: getCardTableLimit (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=105, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getCardTableLimit(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=105, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getCardTableLimit(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getCardTableLimit(AlignedHeapChunk.java:105) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Constant(2088, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: cleanTableToPointer (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, Pointer, node count: 5
Callee: tableOffsetToIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: UnsignedWord, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=227, code=ResolvedJavaMethodBytecode<CardTable.tableOffsetToIndex(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|SignExtend 
5||/| 
6|Return 

build structured graph: Caller: cleanEntryAtIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, UnsignedWord, node count: 4
Callee: indexToTableOffset (class: com.oracle.svm.core.genscavenge.CardTable), par: UnsignedWord, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=232, code=ResolvedJavaMethodBytecode<CardTable.indexToTableOffset(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|SignExtend 
5|* 
6|Return 

build structured graph: Caller: cleanTableToIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, UnsignedWord, node count: 20
Callee: cleanEntryAtIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, UnsignedWord, node count: 13
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=133, code=ResolvedJavaMethodBytecode<CardTable.cleanEntryAtIndex(Pointer, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
4|MethodCallTarget 
5|Invoke#CardTable.indexToTableOffset 
6|FrameState@5 - 6|FrameState@5 { sourceLine=133, code=ResolvedJavaMethodBytecode<CardTable.cleanEntryAtIndex(Pointer, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanEntryAtIndex(CardTable.java:133) [bci: 2], stackSize=2, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=5, sourceFile=CardTable.java,  }
 
7|Constant(1, i32) - node represents a constant 
8|Constant(org.graalvm.compiler.nodes.NamedLocationIdentity, a -) - node represents a constant 
9|OffsetAddress 
10|JavaWrite 
11|FrameState@14 - 11|FrameState@14 { sourceLine=134, code=ResolvedJavaMethodBytecode<CardTable.cleanEntryAtIndex(Pointer, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanEntryAtIndex(CardTable.java:133) [bci: 9], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=14, sourceFile=CardTable.java,  }
 
12|Return 

build structured graph: Caller: cleanTableToPointer (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, Pointer, node count: 8
Callee: cleanTableToIndex (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, UnsignedWord, node count: 25
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=125, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToIndex(Pointer, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
4|Constant(0, i32) - node represents a constant 
5|ZeroExtend 
7|EndNode 
8|LoopBegin 
9|ValuePhi(5 24, i64) 
10|FrameState@5 - 10|FrameState@5 { sourceLine=125, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToIndex(Pointer, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=5, sourceFile=CardTable.java,  }
 
11|Constant(1, i32) - node represents a constant 
12||<| 
13|Conditional 
15|LoopExit 
16|ValueProxy 
17|FrameState@31 - 17|FrameState@31 { sourceLine=128, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToIndex(Pointer, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanTableToIndex(CardTable.java:128) [bci: 31], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=31, sourceFile=CardTable.java,  }
 
18|Begin 
19|If 
20|MethodCallTarget 
21|Invoke#CardTable.cleanEntryAtIndex 
22|FrameState@20 - 22|FrameState@20 { sourceLine=125, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToIndex(Pointer, UnsignedWord)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanTableToIndex(CardTable.java:126) [bci: 17], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=20, sourceFile=CardTable.java,  }
 
23|SignExtend 
24|+ 
25|LoopEnd 
26|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 15
Callee: cleanTableToPointer (class: com.oracle.svm.core.genscavenge.CardTable), par: Pointer, Pointer, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=118, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToPointer(Pointer, Pointer)>, stackSize=0, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=0, sourceFile=CardTable.java,  }
 
4|- 
5|MethodCallTarget 
6|Invoke#CardTable.tableOffsetToIndex 
7|FrameState@12 - 7|FrameState@12 { sourceLine=119, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToPointer(Pointer, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanTableToPointer(CardTable.java:119) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=12, sourceFile=CardTable.java,  }
 
8|MethodCallTarget 
9|Invoke#CardTable.cleanTableToIndex 
10|FrameState@18 - 10|FrameState@18 { sourceLine=120, code=ResolvedJavaMethodBytecode<CardTable.cleanTableToPointer(Pointer, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.CardTable.cleanTableToPointer(CardTable.java:120) [bci: 15], stackSize=1, duringCall=false, locksSize=0, localsSize=4, rethrowException=false, bci=18, sourceFile=CardTable.java,  }
 
11|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 18
Callee: getFirstObjectTableStart (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=110, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getFirstObjectTableStart(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=110, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getFirstObjectTableStart(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getFirstObjectTableStart(AlignedHeapChunk.java:110) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Constant(2088, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 21
Callee: getFirstObjectTableLimit (class: com.oracle.svm.core.genscavenge.AlignedHeapChunk), par: AlignedHeapChunk$AlignedHeader, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=115, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getFirstObjectTableLimit(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=AlignedHeapChunk.java,  }
 
3|MethodCallTarget 
4|Invoke#HeapChunk.asPointer 
5|FrameState@4 - 5|FrameState@4 { sourceLine=115, code=ResolvedJavaMethodBytecode<AlignedHeapChunk.getFirstObjectTableLimit(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.AlignedHeapChunk.getFirstObjectTableLimit(AlignedHeapChunk.java:115) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=AlignedHeapChunk.java,  }
 
6|Constant(4136, i64) - node represents a constant 
7|+ 
8|Return 

build structured graph: Caller: initializeTableToPointer (class: com.oracle.svm.core.genscavenge.FirstObjectTable), par: Pointer, Pointer, node count: 5
Callee: tableOffsetToIndex (class: com.oracle.svm.core.genscavenge.FirstObjectTable), par: UnsignedWord, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=584, code=ResolvedJavaMethodBytecode<FirstObjectTable.tableOffsetToIndex(UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=FirstObjectTable.java,  }
 
3|Constant(1, i32) - node represents a constant 
4|SignExtend 
5||/| 
6|Return 

build structured graph: Caller: initializeTableToPointer (class: com.oracle.svm.core.genscavenge.FirstObjectTable), par: Pointer, Pointer, node count: 8
Callee: initializeTableToIndex (class: com.oracle.svm.core.genscavenge.FirstObjectTable), par: Pointer, UnsignedWord, node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=469, code=ResolvedJavaMethodBytecode<FirstObjectTable.initializeTableToIndex(Pointer, UnsignedWord)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=FirstObjectTable.java,  }
 
4|Constant(1, i32) - node represents a constant 
5|Constant(0, i32) - node represents a constant 
6|Return 

build structured graph: Caller: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 24
Callee: initializeTableToPointer (class: com.oracle.svm.core.genscavenge.FirstObjectTable), par: Pointer, Pointer, node count: 12
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=208, code=ResolvedJavaMethodBytecode<FirstObjectTable.initializeTableToPointer(Pointer, Pointer)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=FirstObjectTable.java,  }
 
4|- 
5|MethodCallTarget 
6|Invoke#FirstObjectTable.tableOffsetToIndex 
7|FrameState@10 - 7|FrameState@10 { sourceLine=208, code=ResolvedJavaMethodBytecode<FirstObjectTable.initializeTableToPointer(Pointer, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.FirstObjectTable.initializeTableToPointer(FirstObjectTable.java:208) [bci: 7], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=10, sourceFile=FirstObjectTable.java,  }
 
8|MethodCallTarget 
9|Invoke#FirstObjectTable.initializeTableToIndex 
10|FrameState@16 - 10|FrameState@16 { sourceLine=209, code=ResolvedJavaMethodBytecode<FirstObjectTable.initializeTableToPointer(Pointer, Pointer)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.FirstObjectTable.initializeTableToPointer(FirstObjectTable.java:209) [bci: 13], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=16, sourceFile=FirstObjectTable.java,  }
 
11|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 155
Callee: resetAlignedHeapChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: AlignedHeapChunk$AlignedHeader, node count: 28
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=316, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
3|MethodCallTarget 
4|Invoke#AlignedHeapChunk.getAlignedHeapChunkStart 
5|FrameState@5 - 5|FrameState@5 { sourceLine=316, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:316) [bci: 2], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=5, sourceFile=HeapChunkProvider.java,  }
 
6|MethodCallTarget 
7|Invoke#HeapChunkProvider.resetChunkHeader 
8|FrameState@8 - 8|FrameState@8 { sourceLine=319, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:316) [bci: 5], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=8, sourceFile=HeapChunkProvider.java,  }
 
9|MethodCallTarget 
10|Invoke#AlignedHeapChunk.getCardTableStart 
11|FrameState@12 - 11|FrameState@12 { sourceLine=319, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:319) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=12, sourceFile=HeapChunkProvider.java,  }
 
12|MethodCallTarget 
13|Invoke#AlignedHeapChunk.getCardTableLimit 
14|FrameState@16 - 14|FrameState@16 { sourceLine=319, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:319) [bci: 13], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
15|MethodCallTarget 
16|Invoke#CardTable.cleanTableToPointer 
17|FrameState@19 - 17|FrameState@19 { sourceLine=319, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:319) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=19, sourceFile=HeapChunkProvider.java,  }
 
18|MethodCallTarget 
19|Invoke#AlignedHeapChunk.getFirstObjectTableStart 
20|FrameState@24 - 20|FrameState@24 { sourceLine=321, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:321) [bci: 21], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=24, sourceFile=HeapChunkProvider.java,  }
 
21|MethodCallTarget 
22|Invoke#AlignedHeapChunk.getFirstObjectTableLimit 
23|FrameState@28 - 23|FrameState@28 { sourceLine=321, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:321) [bci: 25], stackSize=2, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=28, sourceFile=HeapChunkProvider.java,  }
 
24|MethodCallTarget 
25|Invoke#FirstObjectTable.initializeTableToPointer 
26|FrameState@31 - 26|FrameState@31 { sourceLine=321, code=ResolvedJavaMethodBytecode<HeapChunkProvider.resetAlignedHeapChunk(AlignedHeapChunk$AlignedHeader)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.resetAlignedHeapChunk(HeapChunkProvider.java:321) [bci: 28], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=31, sourceFile=HeapChunkProvider.java,  }
 
27|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 165
Callee: getZapProducedHeapChunks (class: com.oracle.svm.core.genscavenge.HeapPolicy), par: , node count: 8
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=353, code=ResolvedJavaMethodBytecode<HeapPolicy.getZapProducedHeapChunks()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapPolicy.java,  }
 
2|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
3|Constant(java.lang.Boolean, a -) - node represents a constant 
4|LogicConstant 
5|Constant(0, i32) - node represents a constant 
6|Constant(com.oracle.svm.core.option.HostedOptionKey, a -) - node represents a constant 
7|Return 

build structured graph: Caller: zap (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: HeapChunk$Header, WordBase, node count: 10
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 175
Callee: zap (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: HeapChunk$Header, WordBase, node count: 142
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=333, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
4|Constant(32, i64) - node represents a constant 
5|OffsetAddress 
6|CInterfaceRead 
7|Constant(0, i64) - node represents a constant 
8|OffsetAddress 
9|CInterfaceRead 
10|MethodCallTarget 
11|Invoke#HeapChunkProvider.log 
12|FrameState@17 - 12|FrameState@17 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 14], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=17, sourceFile=HeapChunkProvider.java,  }
 
13|Constant(  zap chunk: , a -) - node represents a constant 
14|IsNull 
15|BytecodeException#NULL_POINTER 
16|Begin 
17|Begin 
18|If 
19|FrameState@19 - 19|FrameState@19 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 19], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=19, sourceFile=HeapChunkProvider.java,  }
 
22|Pi 
23|MethodCallTarget 
24|Invoke#Log.string 
25|FrameState@22 - 25|FrameState@22 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 19], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=22, sourceFile=HeapChunkProvider.java,  }
 
26|IsNull 
27|BytecodeException#NULL_POINTER 
28|Begin 
29|Begin 
30|If 
31|FrameState@23 - 31|FrameState@23 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 23], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=23, sourceFile=HeapChunkProvider.java,  }
 
33|EndNode 
34|Merge 
35|EndNode 
36|ValuePhi(15 27 43 55 68 80 93 105 117, a -) 
37|Pi 
38|MethodCallTarget 
39|Invoke#Log.hex 
40|FrameState@26 - 40|FrameState@26 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 23], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=26, sourceFile=HeapChunkProvider.java,  }
 
41|Constant(  start: , a -) - node represents a constant 
42|IsNull 
43|BytecodeException#NULL_POINTER 
44|Begin 
45|Begin 
46|If 
47|FrameState@28 - 47|FrameState@28 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 28], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=28, sourceFile=HeapChunkProvider.java,  }
 
49|EndNode 
50|Pi 
51|MethodCallTarget 
52|Invoke#Log.string 
53|FrameState@31 - 53|FrameState@31 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 28], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=31, sourceFile=HeapChunkProvider.java,  }
 
54|IsNull 
55|BytecodeException#NULL_POINTER 
56|Begin 
57|Begin 
58|If 
59|FrameState@32 - 59|FrameState@32 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=32, sourceFile=HeapChunkProvider.java,  }
 
61|EndNode 
62|Pi 
63|MethodCallTarget 
64|Invoke#Log.hex 
65|FrameState@35 - 65|FrameState@35 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 32], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=35, sourceFile=HeapChunkProvider.java,  }
 
66|Constant(  limit: , a -) - node represents a constant 
67|IsNull 
68|BytecodeException#NULL_POINTER 
69|Begin 
70|Begin 
71|If 
72|FrameState@37 - 72|FrameState@37 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 37], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=37, sourceFile=HeapChunkProvider.java,  }
 
74|EndNode 
75|Pi 
76|MethodCallTarget 
77|Invoke#Log.string 
78|FrameState@40 - 78|FrameState@40 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 37], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=40, sourceFile=HeapChunkProvider.java,  }
 
79|IsNull 
80|BytecodeException#NULL_POINTER 
81|Begin 
82|Begin 
83|If 
84|FrameState@41 - 84|FrameState@41 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 41], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=41, sourceFile=HeapChunkProvider.java,  }
 
86|EndNode 
87|Pi 
88|MethodCallTarget 
89|Invoke#Log.hex 
90|FrameState@44 - 90|FrameState@44 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 41], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=44, sourceFile=HeapChunkProvider.java,  }
 
91|Constant(  value: , a -) - node represents a constant 
92|IsNull 
93|BytecodeException#NULL_POINTER 
94|Begin 
95|Begin 
96|If 
97|FrameState@46 - 97|FrameState@46 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 46], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=46, sourceFile=HeapChunkProvider.java,  }
 
99|EndNode 
100|Pi 
101|MethodCallTarget 
102|Invoke#Log.string 
103|FrameState@49 - 103|FrameState@49 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 46], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=49, sourceFile=HeapChunkProvider.java,  }
 
104|IsNull 
105|BytecodeException#NULL_POINTER 
106|Begin 
107|Begin 
108|If 
109|FrameState@50 - 109|FrameState@50 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 50], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=50, sourceFile=HeapChunkProvider.java,  }
 
111|EndNode 
112|Pi 
113|MethodCallTarget 
114|Invoke#Log.hex 
115|FrameState@53 - 115|FrameState@53 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 50], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=53, sourceFile=HeapChunkProvider.java,  }
 
116|IsNull 
117|BytecodeException#NULL_POINTER 
118|Begin 
119|Begin 
120|If 
121|FrameState@53 - 121|FrameState@53 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 53], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=true, bci=53, sourceFile=HeapChunkProvider.java,  }
 
123|EndNode 
124|Pi 
125|MethodCallTarget 
126|Invoke#Log.newline 
127|FrameState@56 - 127|FrameState@56 { sourceLine=335, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:335) [bci: 53], stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=56, sourceFile=HeapChunkProvider.java,  }
 
129|EndNode 
130|LoopBegin 
131|ValuePhi(6 149, i64) 
132|FrameState@60 - 132|FrameState@60 { sourceLine=336, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=60, sourceFile=HeapChunkProvider.java,  }
 
133|Constant(1, i32) - node represents a constant 
134|Constant(0, i32) - node represents a constant 
135||<| 
136|Conditional 
138|LoopExit 
139|ValueProxy 
140|FrameState@95 - 140|FrameState@95 { sourceLine=339, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:339) [bci: 95], stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=95, sourceFile=HeapChunkProvider.java,  }
 
141|Begin 
142|If 
143|SignExtend 
144|OffsetAddress 
145|JavaWrite 
146|FrameState@80 - 146|FrameState@80 { sourceLine=336, code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.zap(HeapChunkProvider.java:337) [bci: 75], stackSize=0, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=80, sourceFile=HeapChunkProvider.java,  }
 
147|Constant(8, i32) - node represents a constant 
148|SignExtend 
149|+ 
150|LoopEnd 
151|Return 
152|FrameState@-4[AFTER_EXCEPTION_BCI] - 152|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<HeapChunkProvider.zap(HeapChunk$Header, WordBase)>, stackSize=1, duringCall=false, locksSize=0, localsSize=5, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
153|Unwind 

build structured graph: Caller: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 186
Callee: log (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 4
0|StartNode 
1|FrameState@0 - 1|FrameState@0 { sourceLine=95, code=ResolvedJavaMethodBytecode<HeapChunkProvider.log()>, stackSize=0, duringCall=false, locksSize=0, localsSize=0, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
2|Constant(com.oracle.svm.core.log.Log$NoopLog, a -) - node represents a constant 
3|Return 

build structured graph: Caller: prepareNewAllocationChunk (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: ThreadLocalAllocation$Descriptor, node count: 18
Callee: produceAlignedChunk (class: com.oracle.svm.core.genscavenge.HeapChunkProvider), par: , node count: 226
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=108, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=HeapChunkProvider.java,  }
 
3|Constant(1048576, i64) - node represents a constant 
4|MethodCallTarget 
5|Invoke#HeapChunkProvider.log 
6|FrameState@7 - 6|FrameState@7 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=7, sourceFile=HeapChunkProvider.java,  }
 
7|Constant([HeapChunkProvider.produceAlignedChunk  chunk size: , a -) - node represents a constant 
8|IsNull 
9|BytecodeException#NULL_POINTER 
10|Begin 
11|Begin 
12|If 
13|FrameState@9 - 13|FrameState@9 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=9, sourceFile=HeapChunkProvider.java,  }
 
16|Pi 
17|MethodCallTarget 
18|Invoke#Log.string 
19|FrameState@12 - 19|FrameState@12 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=12, sourceFile=HeapChunkProvider.java,  }
 
20|IsNull 
21|BytecodeException#NULL_POINTER 
22|Begin 
23|Begin 
24|If 
25|FrameState@13 - 25|FrameState@13 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 13], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=13, sourceFile=HeapChunkProvider.java,  }
 
27|EndNode 
28|Merge 
29|EndNode 
30|ValuePhi(9 21 36 55 67 79 110 118 130 142 192 204 217 229, a -) 
31|Pi 
32|MethodCallTarget 
33|Invoke#Log.unsigned 
34|FrameState@16 - 34|FrameState@16 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 13], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=16, sourceFile=HeapChunkProvider.java,  }
 
35|IsNull 
36|BytecodeException#NULL_POINTER 
37|Begin 
38|Begin 
39|If 
40|FrameState@16 - 40|FrameState@16 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=16, sourceFile=HeapChunkProvider.java,  }
 
42|EndNode 
43|Pi 
44|MethodCallTarget 
45|Invoke#Log.newline 
46|FrameState@19 - 46|FrameState@19 { sourceLine=109, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:109) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=19, sourceFile=HeapChunkProvider.java,  }
 
47|MethodCallTarget 
48|Invoke#HeapChunkProvider.popUnusedAlignedChunk 
49|FrameState@24 - 49|FrameState@24 { sourceLine=111, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:111) [bci: 21], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=24, sourceFile=HeapChunkProvider.java,  }
 
50|MethodCallTarget 
51|Invoke#HeapChunkProvider.log 
52|FrameState@28 - 52|FrameState@28 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 25], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=28, sourceFile=HeapChunkProvider.java,  }
 
53|Constant(  unused chunk: , a -) - node represents a constant 
54|IsNull 
55|BytecodeException#NULL_POINTER 
56|Begin 
57|Begin 
58|If 
59|FrameState@30 - 59|FrameState@30 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 30], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=30, sourceFile=HeapChunkProvider.java,  }
 
61|EndNode 
62|Pi 
63|MethodCallTarget 
64|Invoke#Log.string 
65|FrameState@33 - 65|FrameState@33 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 30], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=33, sourceFile=HeapChunkProvider.java,  }
 
66|IsNull 
67|BytecodeException#NULL_POINTER 
68|Begin 
69|Begin 
70|If 
71|FrameState@34 - 71|FrameState@34 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 34], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=34, sourceFile=HeapChunkProvider.java,  }
 
73|EndNode 
74|Pi 
75|MethodCallTarget 
76|Invoke#Log.hex 
77|FrameState@37 - 77|FrameState@37 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 34], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=37, sourceFile=HeapChunkProvider.java,  }
 
78|IsNull 
79|BytecodeException#NULL_POINTER 
80|Begin 
81|Begin 
82|If 
83|FrameState@37 - 83|FrameState@37 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 37], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=37, sourceFile=HeapChunkProvider.java,  }
 
85|EndNode 
86|Pi 
87|MethodCallTarget 
88|Invoke#Log.newline 
89|FrameState@40 - 89|FrameState@40 { sourceLine=112, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:112) [bci: 37], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=40, sourceFile=HeapChunkProvider.java,  }
 
90|Constant(1, i32) - node represents a constant 
91|Constant(0, i32) - node represents a constant 
92|Constant(0, i64) - node represents a constant 
93|== 
94|Conditional 
95|Begin 
96|Begin 
97|If 
98|MethodCallTarget 
99|Invoke#HeapChunkProvider.noteFirstAllocationTime 
100|FrameState@54 - 100|FrameState@54 { sourceLine=117, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:116) [bci: 51], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=54, sourceFile=HeapChunkProvider.java,  }
 
101|Constant(com.oracle.svm.core.os.OSCommittedMemoryProvider, a -) - node represents a constant 
102|MethodCallTarget 
103|Invoke#OSCommittedMemoryProvider.allocate 
104|FrameState@67 - 104|FrameState@67 { sourceLine=117, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:117) [bci: 62], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=67, sourceFile=HeapChunkProvider.java,  }
 
105|== 
106|Conditional 
107|Begin 
108|Begin 
109|If 
110|Constant(java.lang.OutOfMemoryError, a -) - node represents a constant 
112|EndNode 
113|MethodCallTarget 
114|Invoke#HeapChunkProvider.log 
115|FrameState@87 - 115|FrameState@87 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 84], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=87, sourceFile=HeapChunkProvider.java,  }
 
116|Constant(  new chunk: , a -) - node represents a constant 
117|IsNull 
118|BytecodeException#NULL_POINTER 
119|Begin 
120|Begin 
121|If 
122|FrameState@89 - 122|FrameState@89 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=89, sourceFile=HeapChunkProvider.java,  }
 
124|EndNode 
125|Pi 
126|MethodCallTarget 
127|Invoke#Log.string 
128|FrameState@92 - 128|FrameState@92 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 89], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=92, sourceFile=HeapChunkProvider.java,  }
 
129|IsNull 
130|BytecodeException#NULL_POINTER 
131|Begin 
132|Begin 
133|If 
134|FrameState@93 - 134|FrameState@93 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 93], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=93, sourceFile=HeapChunkProvider.java,  }
 
136|EndNode 
137|Pi 
138|MethodCallTarget 
139|Invoke#Log.hex 
140|FrameState@96 - 140|FrameState@96 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 93], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=96, sourceFile=HeapChunkProvider.java,  }
 
141|IsNull 
142|BytecodeException#NULL_POINTER 
143|Begin 
144|Begin 
145|If 
146|FrameState@96 - 146|FrameState@96 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 96], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=96, sourceFile=HeapChunkProvider.java,  }
 
148|EndNode 
149|Pi 
150|MethodCallTarget 
151|Invoke#Log.newline 
152|FrameState@99 - 152|FrameState@99 { sourceLine=121, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:121) [bci: 96], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=99, sourceFile=HeapChunkProvider.java,  }
 
153|MethodCallTarget 
154|Invoke#HeapChunkProvider.initializeChunk 
155|FrameState@105 - 155|FrameState@105 { sourceLine=124, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:123) [bci: 102], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=105, sourceFile=HeapChunkProvider.java,  }
 
156|MethodCallTarget 
157|Invoke#HeapChunkProvider.resetAlignedHeapChunk 
158|FrameState@109 - 158|FrameState@109 { sourceLine=126, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:124) [bci: 106], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=109, sourceFile=HeapChunkProvider.java,  }
 
159|EndNode 
160|Merge 
161|EndNode 
162|ValuePhi(48 103, i64) 
163|FrameState@109 - 163|FrameState@109 { sourceLine=126, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=109, sourceFile=HeapChunkProvider.java,  }
 
166|MethodCallTarget 
167|Invoke#HeapPolicy.getZapProducedHeapChunks 
168|FrameState@182 - 168|FrameState@182 { sourceLine=129, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:129) [bci: 179], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=182, sourceFile=HeapChunkProvider.java,  }
 
169|== 
170|Begin 
171|Begin 
172|If 
173|MethodCallTarget 
174|Invoke#HeapPolicy.getProducedHeapChunkZapWord 
175|FrameState@189 - 175|FrameState@189 { sourceLine=130, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:130) [bci: 186], stackSize=2, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=189, sourceFile=HeapChunkProvider.java,  }
 
176|MethodCallTarget 
177|Invoke#HeapChunkProvider.zap 
178|FrameState@192 - 178|FrameState@192 { sourceLine=133, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:130) [bci: 189], stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=192, sourceFile=HeapChunkProvider.java,  }
 
179|EndNode 
180|Merge 
181|EndNode 
182|FrameState@192 - 182|FrameState@192 { sourceLine=133, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=192, sourceFile=HeapChunkProvider.java,  }
 
183|Constant(com.oracle.svm.core.jdk.UninterruptibleUtils$AtomicUnsigned, a -) - node represents a constant 
184|MethodCallTarget 
185|Invoke#UninterruptibleUtils$AtomicUnsigned.addAndGet 
186|FrameState@199 - 186|FrameState@199 { sourceLine=133, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:133) [bci: 196], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=199, sourceFile=HeapChunkProvider.java,  }
 
187|MethodCallTarget 
188|Invoke#HeapChunkProvider.log 
189|FrameState@203 - 189|FrameState@203 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 200], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=203, sourceFile=HeapChunkProvider.java,  }
 
190|Constant(  result chunk: , a -) - node represents a constant 
191|IsNull 
192|BytecodeException#NULL_POINTER 
193|Begin 
194|Begin 
195|If 
196|FrameState@205 - 196|FrameState@205 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 205], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=205, sourceFile=HeapChunkProvider.java,  }
 
198|EndNode 
199|Pi 
200|MethodCallTarget 
201|Invoke#Log.string 
202|FrameState@208 - 202|FrameState@208 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 205], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=208, sourceFile=HeapChunkProvider.java,  }
 
203|IsNull 
204|BytecodeException#NULL_POINTER 
205|Begin 
206|Begin 
207|If 
208|FrameState@209 - 208|FrameState@209 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 209], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=209, sourceFile=HeapChunkProvider.java,  }
 
210|EndNode 
211|Pi 
212|MethodCallTarget 
213|Invoke#Log.hex 
214|FrameState@212 - 214|FrameState@212 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 209], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=212, sourceFile=HeapChunkProvider.java,  }
 
215|Constant(  ], a -) - node represents a constant 
216|IsNull 
217|BytecodeException#NULL_POINTER 
218|Begin 
219|Begin 
220|If 
221|FrameState@214 - 221|FrameState@214 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 214], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=214, sourceFile=HeapChunkProvider.java,  }
 
223|EndNode 
224|Pi 
225|MethodCallTarget 
226|Invoke#Log.string 
227|FrameState@217 - 227|FrameState@217 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 214], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=217, sourceFile=HeapChunkProvider.java,  }
 
228|IsNull 
229|BytecodeException#NULL_POINTER 
230|Begin 
231|Begin 
232|If 
233|FrameState@217 - 233|FrameState@217 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 217], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=217, sourceFile=HeapChunkProvider.java,  }
 
235|EndNode 
236|Pi 
237|MethodCallTarget 
238|Invoke#Log.newline 
239|FrameState@220 - 239|FrameState@220 { sourceLine=135, code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.HeapChunkProvider.produceAlignedChunk(HeapChunkProvider.java:135) [bci: 217], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=220, sourceFile=HeapChunkProvider.java,  }
 
240|Return 
241|FrameState@-4[AFTER_EXCEPTION_BCI] - 241|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<HeapChunkProvider.produceAlignedChunk()>, stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
242|Unwind 

build structured graph: Caller: allocateNewInstance (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: Class, ThreadLocalAllocation$Descriptor, boolean, node count: 215
Callee: prepareNewAllocationChunk (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: ThreadLocalAllocation$Descriptor, node count: 27
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=524, code=ResolvedJavaMethodBytecode<ThreadLocalAllocation.prepareNewAllocationChunk(ThreadLocalAllocation$Descriptor)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=ThreadLocalAllocation.java,  }
 
3|MethodCallTarget 
4|Invoke#ThreadLocalAllocation.retireAllocationChunk 
5|FrameState@4 - 5|FrameState@4 { sourceLine=530, code=ResolvedJavaMethodBytecode<ThreadLocalAllocation.prepareNewAllocationChunk(ThreadLocalAllocation$Descriptor)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.ThreadLocalAllocation.prepareNewAllocationChunk(ThreadLocalAllocation.java:524) [bci: 1], stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=4, sourceFile=ThreadLocalAllocation.java,  }
 
6|MethodCallTarget 
7|Invoke#ThreadLocalAllocation.popFromThreadLocalFreeList 
8|FrameState@7 - 8|FrameState@7 { sourceLine=530, code=ResolvedJavaMethodBytecode<ThreadLocalAllocation.prepareNewAllocationChunk(ThreadLocalAllocation$Descriptor)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.ThreadLocalAllocation.prepareNewAllocationChunk(ThreadLocalAllocation.java:530) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=ThreadLocalAllocation.java,  }
 
9|Constant(1, i32) - node represents a constant 
10|Constant(0, i32) - node represents a constant 
11|Constant(0, i64) - node represents a constant 
12|== 
13|Conditional 
14|Begin 
15|Begin 
16|If 
17|Constant(com.oracle.svm.core.genscavenge.HeapChunkProvider, a -) - node represents a constant 
18|MethodCallTarget 
19|Invoke#HeapChunkProvider.produceAlignedChunk 
20|FrameState@23 - 20|FrameState@23 { sourceLine=532, code=ResolvedJavaMethodBytecode<ThreadLocalAllocation.prepareNewAllocationChunk(ThreadLocalAllocation$Descriptor)>, nodeSourcePosition=at com.oracle.svm.core.genscavenge.ThreadLocalAllocation.prepareNewAllocationChunk(ThreadLocalAllocation.java:532) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=23, sourceFile=ThreadLocalAllocation.java,  }
 
21|EndNode 
22|Merge 
23|EndNode 
24|ValuePhi(7 19, i64) 
25|FrameState@24 - 25|FrameState@24 { sourceLine=539, code=ResolvedJavaMethodBytecode<ThreadLocalAllocation.prepareNewAllocationChunk(ThreadLocalAllocation$Descriptor)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=24, sourceFile=ThreadLocalAllocation.java,  }
 
26|Return 

build structured graph: Caller: allocateNewInstance (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: Class, ThreadLocalAllocation$Descriptor, boolean, node count: 243
Callee: getInstanceSize (class: com.oracle.svm.core.hub.LayoutEncoding), par: int, node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=143, code=ResolvedJavaMethodBytecode<LayoutEncoding.getInstanceSize(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=LayoutEncoding.java,  }
 
3|ZeroExtend 
4|Return 

build structured graph: Caller: allocateNewInstance (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: Class, ThreadLocalAllocation$Descriptor, boolean, node count: 260
Callee: string (class: com.oracle.svm.core.log.Log$NoopLog), par: String, node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=393, code=ResolvedJavaMethodBytecode<Log$NoopLog.string(String)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=Log.java,  }
 
4|Return 

build structured graph: Caller: getSizeFromObject (class: com.oracle.svm.core.hub.LayoutEncoding), par: Object, node count: 29
Callee: getInstanceSize (class: com.oracle.svm.core.hub.LayoutEncoding), par: int, node count: 5
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=143, code=ResolvedJavaMethodBytecode<LayoutEncoding.getInstanceSize(int)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=LayoutEncoding.java,  }
 
3|ZeroExtend 
4|Return 

build structured graph: Caller: getObjectEnd (class: com.oracle.svm.core.hub.LayoutEncoding), par: Object, node count: 4
Callee: getSizeFromObject (class: com.oracle.svm.core.hub.LayoutEncoding), par: Object, node count: 32
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=188, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=LayoutEncoding.java,  }
 
3|IsNull 
4|BytecodeException#NULL_POINTER 
5|FrameState@1 - 5|FrameState@1 { sourceLine=188, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, nodeSourcePosition=at com.oracle.svm.core.snippets.KnownIntrinsics.readHub(Object) [bci: -1]
at com.oracle.svm.core.hub.LayoutEncoding.getSizeFromObject(LayoutEncoding.java:188) [bci: 1], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=true, bci=1, sourceFile=LayoutEncoding.java,  }
 
8|Begin 
9|If 
10|Begin 
11|Pi 
12|LoadHub 
13|MethodCallTarget 
14|Invoke#Class.getLayoutEncoding 
15|FrameState@7 - 15|FrameState@7 { sourceLine=188, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, nodeSourcePosition=at com.oracle.svm.core.hub.LayoutEncoding.getSizeFromObject(LayoutEncoding.java:188) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=7, sourceFile=LayoutEncoding.java,  }
 
16|MethodCallTarget 
17|Invoke#LayoutEncoding.isArray 
18|FrameState@12 - 18|FrameState@12 { sourceLine=189, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, nodeSourcePosition=at com.oracle.svm.core.hub.LayoutEncoding.getSizeFromObject(LayoutEncoding.java:189) [bci: 9], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=12, sourceFile=LayoutEncoding.java,  }
 
19|Constant(0, i32) - node represents a constant 
20|== 
21|Begin 
22|Begin 
23|If 
24|ArrayLength 
25|MethodCallTarget 
26|Invoke#LayoutEncoding.getArraySize 
27|FrameState@23 - 27|FrameState@23 { sourceLine=190, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, nodeSourcePosition=at com.oracle.svm.core.hub.LayoutEncoding.getSizeFromObject(LayoutEncoding.java:190) [bci: 20], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=23, sourceFile=LayoutEncoding.java,  }
 
28|Return 
29|MethodCallTarget 
30|Invoke#LayoutEncoding.getInstanceSize 
31|FrameState@28 - 31|FrameState@28 { sourceLine=192, code=ResolvedJavaMethodBytecode<LayoutEncoding.getSizeFromObject(Object)>, nodeSourcePosition=at com.oracle.svm.core.hub.LayoutEncoding.getSizeFromObject(LayoutEncoding.java:192) [bci: 25], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=28, sourceFile=LayoutEncoding.java,  }
 
32|Return 
33|Unwind 

build structured graph: Caller: allocateNewInstance (class: com.oracle.svm.core.genscavenge.ThreadLocalAllocation), par: Class, ThreadLocalAllocation$Descriptor, boolean, node count: 309
Callee: getObjectEnd (class: com.oracle.svm.core.hub.LayoutEncoding), par: Object, node count: 9
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=201, code=ResolvedJavaMethodBytecode<LayoutEncoding.getObjectEnd(Object)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=LayoutEncoding.java,  }
 
3|WordCast 
4|MethodCallTarget 
5|Invoke#LayoutEncoding.getSizeFromObject 
6|FrameState@9 - 6|FrameState@9 { sourceLine=202, code=ResolvedJavaMethodBytecode<LayoutEncoding.getObjectEnd(Object)>, nodeSourcePosition=at com.oracle.svm.core.hub.LayoutEncoding.getObjectEnd(LayoutEncoding.java:202) [bci: 6], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=9, sourceFile=LayoutEncoding.java,  }
 
7|+ 
8|Return 
Snippet 1: <init>, arrayHubErrorStub
Snippet 1: fromClass, arrayHubErrorStub
Snippet 1: <init>, arrayHubErrorStub
Snippet 1: getArrayHub, arrayHubErrorStub
Snippet 1: getArrayHub, arrayHubErrorStub
Snippet 1: isInstantiated, arrayHubErrorStub
Snippet 1: shouldNotReachHere, arrayHubErrorStub
Snippet 1: <init>, arrayHubErrorStub
Snippet 1: append, arrayHubErrorStub
Snippet 1: toClass, arrayHubErrorStub
Snippet 1: getTypeName, arrayHubErrorStub
Snippet 1: append, arrayHubErrorStub
Snippet 1: append, arrayHubErrorStub
Snippet 1: append, arrayHubErrorStub
Snippet 1: toString, arrayHubErrorStub
Snippet 1: <init>, arrayHubErrorStub
Snippet 1: detachThread, detachThreadMT
Snippet 1: <init>, newMultiArrayStub
Snippet 1: newMultiArrayRecursion, newMultiArrayStub
Snippet 1: getComponentHub, newMultiArrayRecursion
Snippet 1: toClass, newMultiArrayRecursion
Snippet 1: getLayoutEncoding, newMultiArrayRecursion
Snippet 1: getArrayBaseOffset, newMultiArrayRecursion
Snippet 1: getLayoutEncoding, newMultiArrayRecursion
Snippet 1: getArrayElementOffset, newMultiArrayRecursion
Snippet 1: getComponentHub, newMultiArrayRecursion
Snippet 1: newMultiArrayRecursion, newMultiArrayRecursion
Snippet 1: getReferenceSize, newMultiArrayRecursion
Snippet 1: logException, reportException
Snippet 1: fatalError, reportException
Snippet 1: isEnabled, logException
Snippet 1: isActive, logException
Snippet 1: exception, logException
Snippet 1: <init>, logException
Snippet 1: <init>, logException
Snippet 1: toString, logException
Snippet 1: string, logException
Snippet 1: executeTearDownHooks, tearDownIsolate
Snippet 1: tearDown, tearDownIsolate
Snippet 1: tearDown, tearDownIsolate
Snippet 1: tearDownCurrent, tearDownIsolate
Snippet 1: logException, tearDownIsolate

build structured graph: Caller: <init> (class: java.lang.Exception), par: , node count: 3
Callee: <init> (class: java.lang.Throwable), par: , node count: 15
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=254, code=ResolvedJavaMethodBytecode<Throwable.<init>()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=Throwable.java,  }
 
3|StoreField#cause - node represents a write to a static or instance field. 
4|FrameState@9 - 4|FrameState@9 { sourceLine=211, code=ResolvedJavaMethodBytecode<Throwable.<init>()>, nodeSourcePosition=at java.lang.Throwable.<init>(Throwable.java:198) [bci: 6], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=9, sourceFile=Throwable.java,  }
 
5|Constant([Ljava.lang.StackTraceElement;, a -) - node represents a constant 
6|StoreField#stackTrace - node represents a write to a static or instance field. 
7|FrameState@16 - 7|FrameState@16 { sourceLine=232, code=ResolvedJavaMethodBytecode<Throwable.<init>()>, nodeSourcePosition=at java.lang.Throwable.<init>(Throwable.java:211) [bci: 13], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=16, sourceFile=Throwable.java,  }
 
8|Constant(java.util.Collections$EmptyList, a -) - node represents a constant 
9|StoreField#suppressedExceptions - node represents a write to a static or instance field. 
10|FrameState@23 - 10|FrameState@23 { sourceLine=255, code=ResolvedJavaMethodBytecode<Throwable.<init>()>, nodeSourcePosition=at java.lang.Throwable.<init>(Throwable.java:232) [bci: 20], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=23, sourceFile=Throwable.java,  }
 
11|MethodCallTarget 
12|Invoke#Throwable.fillInStackTrace 
13|FrameState@27 - 13|FrameState@27 { sourceLine=255, code=ResolvedJavaMethodBytecode<Throwable.<init>()>, nodeSourcePosition=at java.lang.Throwable.<init>(Throwable.java:255) [bci: 24], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=27, sourceFile=Throwable.java,  }
 
14|Return 

build structured graph: Caller: <init> (class: java.lang.RuntimeException), par: , node count: 3
Callee: <init> (class: java.lang.Exception), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=54, code=ResolvedJavaMethodBytecode<Exception.<init>()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=Exception.java,  }
 
3|MethodCallTarget 
4|Invoke#Throwable.<init> 
5|FrameState@4 - 5|FrameState@4 { sourceLine=55, code=ResolvedJavaMethodBytecode<Exception.<init>()>, nodeSourcePosition=at java.lang.Exception.<init>(Exception.java:54) [bci: 1], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=Exception.java,  }
 
6|Return 

build structured graph: Caller: <init> (class: java.lang.NullPointerException), par: , node count: 3
Callee: <init> (class: java.lang.RuntimeException), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=51, code=ResolvedJavaMethodBytecode<RuntimeException.<init>()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=RuntimeException.java,  }
 
3|MethodCallTarget 
4|Invoke#Exception.<init> 
5|FrameState@4 - 5|FrameState@4 { sourceLine=52, code=ResolvedJavaMethodBytecode<RuntimeException.<init>()>, nodeSourcePosition=at java.lang.RuntimeException.<init>(RuntimeException.java:51) [bci: 1], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=RuntimeException.java,  }
 
6|Return 

build structured graph: Caller: requireNonNull (class: java.util.Objects), par: Object, node count: 9
Callee: <init> (class: java.lang.NullPointerException), par: , node count: 7
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=60, code=ResolvedJavaMethodBytecode<NullPointerException.<init>()>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=NullPointerException.java,  }
 
3|MethodCallTarget 
4|Invoke#RuntimeException.<init> 
5|FrameState@4 - 5|FrameState@4 { sourceLine=61, code=ResolvedJavaMethodBytecode<NullPointerException.<init>()>, nodeSourcePosition=at java.lang.NullPointerException.<init>(NullPointerException.java:60) [bci: 1], stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=4, sourceFile=NullPointerException.java,  }
 
6|Return 

build structured graph: Caller: getAndSet (class: java.lang.invoke.VarHandleObjects$FieldInstanceReadWrite), par: VarHandleObjects$FieldInstanceReadWrite, Object, Object, node count: 30
Callee: requireNonNull (class: java.util.Objects), par: Object, node count: 14
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=220, code=ResolvedJavaMethodBytecode<Objects.requireNonNull(Object)>, stackSize=0, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=0, sourceFile=Objects.java,  }
 
3|Constant(null, a -) - node represents a constant 
4|IsNull 
5|Begin 
6|Begin 
7|If 
8|NewInstance 
9|MethodCallTarget 
10|Invoke#NullPointerException.<init> 
11|FrameState@11 - 11|FrameState@11 { sourceLine=221, code=ResolvedJavaMethodBytecode<Objects.requireNonNull(Object)>, nodeSourcePosition=at java.util.Objects.requireNonNull(Objects.java:221) [bci: 8], stackSize=1, duringCall=false, locksSize=0, localsSize=1, rethrowException=false, bci=11, sourceFile=Objects.java,  }
 
14|Return 
15|Unwind 

build structured graph: Caller: getAndSet (class: java.util.concurrent.atomic.AtomicReference), par: Object, node count: 6
Callee: getAndSet (class: java.lang.invoke.VarHandleObjects$FieldInstanceReadWrite), par: VarHandleObjects$FieldInstanceReadWrite, Object, Object, node count: 63
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|Parameter(2) - node represents a placeholder for an incoming argument to a function call. 
4|FrameState@0 - 4|FrameState@0 { sourceLine=187, code=ResolvedJavaMethodBytecode<VarHandleObjects$FieldInstanceReadWrite.getAndSet(VarHandleObjects$FieldInstanceReadWrite, Object, Object)>, stackSize=0, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=0, sourceFile=VarHandleObjects.java,  }
 
5|Constant(jdk.internal.misc.Unsafe, a -) - node represents a constant 
6|IsNull 
7|BytecodeException#NULL_POINTER 
8|Begin 
9|Begin 
10|If 
11|FrameState@4 - 11|FrameState@4 { sourceLine=187, code=ResolvedJavaMethodBytecode<VarHandleObjects$FieldInstanceReadWrite.getAndSet(VarHandleObjects$FieldInstanceReadWrite, Object, Object)>, nodeSourcePosition=at java.lang.invoke.VarHandleObjects$FieldInstanceReadWrite.getAndSet(VarHandleObjects.java:187) [bci: 4], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=4, sourceFile=VarHandleObjects.java,  }
 
14|Pi 
15|LoadField#receiverType - node represents a read of a static or instance field. 
16|IsNull 
17|BytecodeException#NULL_POINTER 
18|Begin 
19|Begin 
20|If 
21|FrameState@8 - 21|FrameState@8 { sourceLine=187, code=ResolvedJavaMethodBytecode<VarHandleObjects$FieldInstanceReadWrite.getAndSet(VarHandleObjects$FieldInstanceReadWrite, Object, Object)>, nodeSourcePosition=at java.lang.invoke.VarHandleObjects$FieldInstanceReadWrite.getAndSet(VarHandleObjects.java:187) [bci: 8], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=8, sourceFile=VarHandleObjects.java,  }
 
23|EndNode 
24|Merge 
25|EndNode 
26|ValuePhi(7 17 34 43 53, a -) 
27|Pi 
28|InstanceOfDynamic 
29|FixedGuard 
30|DynamicPi 
31|MethodCallTarget 
32|Invoke#Objects.requireNonNull 
33|FrameState@14 - 33|FrameState@14 { sourceLine=187, code=ResolvedJavaMethodBytecode<VarHandleObjects$FieldInstanceReadWrite.getAndSet(VarHandleObjects$FieldInstanceReadWrite, Object, Object)>, nodeSourcePosition=at java.lang.invoke.VarHandleObjects$FieldInstanceReadWrite.getAndSet(VarHandleObjects.java:187) [bci: 11], stackSize=2, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=14, sourceFile=VarHandleObjects.java,  }
 
34|BytecodeException#NULL_POINTER 
35|Begin 
36|Begin 
37|If 
38|FrameState@15 - 38|FrameState@15 { sourceLine=187, code=ResolvedJavaMethodBytecode<VarHandleObjects$FieldInstanceReadWrite.getAndSet(VarHandleObjects$FieldInstanceReadWrite, Object, Object)>, nodeSourcePosition=at java.lang.invoke.VarHandleObjects$FieldInstanceReadWrite.getAndSet(VarHandleObjects.java:187) [bci: 15], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=15, sourceFile=VarHandleObjects.java,  }
 
40|EndNode 
41|Pi 
42|LoadField#fieldOffset - node represents a read of a static or instance field. 
43|BytecodeException#NULL_POINTER 
44|Begin 
45|Begin 
46|If 
47|FrameState@19 - 47|FrameState@19 { sourceLine=187, code=ResolvedJavaMethodBytecode<VarHandleObjects$FieldInstanceReadWrite.getAndSet(VarHandleObjects$FieldInstanceReadWrite, Object, Object)>, nodeSourcePosition=at java.lang.invoke.VarHandleObjects$FieldInstanceReadWrite.getAndSet(VarHandleObjects.java:187) [bci: 19], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=19, sourceFile=VarHandleObjects.java,  }
 
49|EndNode 
50|Pi 
51|LoadField#fieldType - node represents a read of a static or instance field. 
52|IsNull 
53|BytecodeException#NULL_POINTER 
54|Begin 
55|Begin 
56|If 
57|FrameState@23 - 57|FrameState@23 { sourceLine=189, code=ResolvedJavaMethodBytecode<VarHandleObjects$FieldInstanceReadWrite.getAndSet(VarHandleObjects$FieldInstanceReadWrite, Object, Object)>, nodeSourcePosition=at java.lang.invoke.VarHandleObjects$FieldInstanceReadWrite.getAndSet(VarHandleObjects.java:189) [bci: 23], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=true, bci=23, sourceFile=VarHandleObjects.java,  }
 
59|EndNode 
60|Pi 
61|InstanceOfDynamic 
62|FixedGuard 
63|DynamicPi 
64|AtomicReadAndWrite 
65|FrameState@29 - 65|FrameState@29 { sourceLine=187, code=ResolvedJavaMethodBytecode<VarHandleObjects$FieldInstanceReadWrite.getAndSet(VarHandleObjects$FieldInstanceReadWrite, Object, Object)>, nodeSourcePosition=at jdk.internal.misc.Unsafe.getAndSetObject(Object, long, Object) [bci: -1]
at java.lang.invoke.VarHandleObjects$FieldInstanceReadWrite.getAndSet(VarHandleObjects.java:187) [bci: 26], stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=29, sourceFile=VarHandleObjects.java,  }
 
66|Return 
67|FrameState@-4[AFTER_EXCEPTION_BCI] - 67|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<VarHandleObjects$FieldInstanceReadWrite.getAndSet(VarHandleObjects$FieldInstanceReadWrite, Object, Object)>, stackSize=1, duringCall=false, locksSize=0, localsSize=3, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
68|Unwind 

build structured graph: Caller: executeHooks (class: com.oracle.svm.core.jdk.RuntimeSupport), par: AtomicReference, node count: 13
Callee: getAndSet (class: java.util.concurrent.atomic.AtomicReference), par: Object, node count: 10
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|Parameter(1) - node represents a placeholder for an incoming argument to a function call. 
3|FrameState@0 - 3|FrameState@0 { sourceLine=169, code=ResolvedJavaMethodBytecode<AtomicReference.getAndSet(Object)>, stackSize=0, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=0, sourceFile=AtomicReference.java,  }
 
4|Constant(java.lang.invoke.VarHandleObjects$FieldInstanceReadWrite, a -) - node represents a constant 
5|Constant(java.lang.invoke.VarHandle$AccessDescriptor, a -) - node represents a constant 
6|MethodCallTarget 
7|Invoke#VarHandleObjects$FieldInstanceReadWrite.getAndSet 
8|FrameState@8 - 8|FrameState@8 { sourceLine=169, code=ResolvedJavaMethodBytecode<AtomicReference.getAndSet(Object)>, nodeSourcePosition=at java.util.concurrent.atomic.AtomicReference.getAndSet(AtomicReference.java:169) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=2, rethrowException=false, bci=8, sourceFile=AtomicReference.java,  }
 
9|Return 

build structured graph: Caller: executeTearDownHooks (class: com.oracle.svm.core.jdk.RuntimeSupport), par: , node count: 4
Callee: executeHooks (class: com.oracle.svm.core.jdk.RuntimeSupport), par: AtomicReference, node count: 99
0|StartNode 
1|Parameter(0) - node represents a placeholder for an incoming argument to a function call. 
2|FrameState@0 - 2|FrameState@0 { sourceLine=122, code=ResolvedJavaMethodBytecode<RuntimeSupport.executeHooks(AtomicReference)>, stackSize=0, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=0, sourceFile=RuntimeSupport.java,  }
 
3|Constant(null, a -) - node represents a constant 
4|IsNull 
5|BytecodeException#NULL_POINTER 
6|Begin 
7|Begin 
8|If 
9|FrameState@2 - 9|FrameState@2 { sourceLine=122, code=ResolvedJavaMethodBytecode<RuntimeSupport.executeHooks(AtomicReference)>, nodeSourcePosition=at com.oracle.svm.core.jdk.RuntimeSupport.executeHooks(RuntimeSupport.java:122) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=true, bci=2, sourceFile=RuntimeSupport.java,  }
 
12|Pi 
13|MethodCallTarget 
14|Invoke#AtomicReference.getAndSet 
15|FrameState@5 - 15|FrameState@5 { sourceLine=122, code=ResolvedJavaMethodBytecode<RuntimeSupport.executeHooks(AtomicReference)>, nodeSourcePosition=at com.oracle.svm.core.jdk.RuntimeSupport.executeHooks(RuntimeSupport.java:122) [bci: 2], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=5, sourceFile=RuntimeSupport.java,  }
 
16|InstanceOf 
17|Constant(com.oracle.svm.core.hub.DynamicHub, a -) - node represents a constant 
18|BytecodeException#CLASS_CAST 
19|Begin 
20|Begin 
21|If 
22|FrameState@5 - 22|FrameState@5 { sourceLine=122, code=ResolvedJavaMethodBytecode<RuntimeSupport.executeHooks(AtomicReference)>, nodeSourcePosition=at com.oracle.svm.core.jdk.RuntimeSupport.executeHooks(RuntimeSupport.java:122) [bci: 5], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=true, bci=5, sourceFile=RuntimeSupport.java,  }
 
24|EndNode 
25|Merge 
26|EndNode 
27|ValuePhi(5 18 33 66 80 94, a -) 
28|Pi 
29|IsNull 
30|Begin 
31|Begin 
32|If 
33|BytecodeException#NULL_POINTER 
34|Begin 
35|Begin 
36|If 
37|FrameState@16 - 37|FrameState@16 { sourceLine=124, code=ResolvedJavaMethodBytecode<RuntimeSupport.executeHooks(AtomicReference)>, nodeSourcePosition=at com.oracle.svm.core.jdk.RuntimeSupport.executeHooks(RuntimeSupport.java:124) [bci: 16], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=true, bci=16, sourceFile=RuntimeSupport.java,  }
 
39|EndNode 
40|Pi 
41|ArrayLength 
42|Constant(0, i32) - node represents a constant 
44|EndNode 
45|LoopBegin 
46|ValuePhi(42 101, i32) 
47|FrameState@21 - 47|FrameState@21 { sourceLine=124, code=ResolvedJavaMethodBytecode<RuntimeSupport.executeHooks(AtomicReference)>, stackSize=0, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=21, sourceFile=RuntimeSupport.java,  }
 
48|< 
49|EndNode 
50|Merge 
51|EndNode 
52|LoopExit 
53|ValueProxy 
54|FrameState@46 - 54|FrameState@46 { sourceLine=128, code=ResolvedJavaMethodBytecode<RuntimeSupport.executeHooks(AtomicReference)>, nodeSourcePosition=at com.oracle.svm.core.jdk.RuntimeSupport.executeHooks(RuntimeSupport.java:128) [bci: 46], stackSize=0, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=46, sourceFile=RuntimeSupport.java,  }
 
55|Begin 
56|If 
57|BytecodeException#NULL_POINTER 
58|Begin 
59|Begin 
60|If 
61|FrameState@30 - 61|FrameState@30 { sourceLine=124, code=ResolvedJavaMethodBytecode<RuntimeSupport.executeHooks(AtomicReference)>, nodeSourcePosition=at com.oracle.svm.core.jdk.RuntimeSupport.executeHooks(RuntimeSupport.java:124) [bci: 30], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=true, bci=30, sourceFile=RuntimeSupport.java,  }
 
63|EndNode 
64|LoopExit 
65|ValueProxy 
66|ValueProxy 
67|FrameState@-4[AFTER_EXCEPTION_BCI] - 67|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RuntimeSupport.executeHooks(AtomicReference)>, nodeSourcePosition=at com.oracle.svm.core.jdk.RuntimeSupport.executeHooks(AtomicReference) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
68|Pi 
69|ArrayLength 
70||<| 
71|BytecodeException#OUT_OF_BOUNDS 
72|Begin 
73|Begin 
74|If 
75|FrameState@30 - 75|FrameState@30 { sourceLine=124, code=ResolvedJavaMethodBytecode<RuntimeSupport.executeHooks(AtomicReference)>, nodeSourcePosition=at com.oracle.svm.core.jdk.RuntimeSupport.executeHooks(RuntimeSupport.java:124) [bci: 30], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=true, bci=30, sourceFile=RuntimeSupport.java,  }
 
77|EndNode 
78|LoopExit 
79|ValueProxy 
80|ValueProxy 
81|FrameState@-4[AFTER_EXCEPTION_BCI] - 81|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RuntimeSupport.executeHooks(AtomicReference)>, nodeSourcePosition=at com.oracle.svm.core.jdk.RuntimeSupport.executeHooks(AtomicReference) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
82|LoadIndexed 
83|IsNull 
84|BytecodeException#NULL_POINTER 
85|Begin 
86|Begin 
87|If 
88|FrameState@35 - 88|FrameState@35 { sourceLine=125, code=ResolvedJavaMethodBytecode<RuntimeSupport.executeHooks(AtomicReference)>, nodeSourcePosition=at com.oracle.svm.core.jdk.RuntimeSupport.executeHooks(RuntimeSupport.java:125) [bci: 35], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=true, bci=35, sourceFile=RuntimeSupport.java,  }
 
90|EndNode 
91|LoopExit 
92|ValueProxy 
93|ValueProxy 
94|ValueProxy 
95|FrameState@-4[AFTER_EXCEPTION_BCI] - 95|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RuntimeSupport.executeHooks(AtomicReference)>, nodeSourcePosition=at com.oracle.svm.core.jdk.RuntimeSupport.executeHooks(AtomicReference) [bci: -4], stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
96|Pi 
97|MethodCallTarget 
98|Invoke#Runnable.run 
99|FrameState@40 - 99|FrameState@40 { sourceLine=124, code=ResolvedJavaMethodBytecode<RuntimeSupport.executeHooks(AtomicReference)>, nodeSourcePosition=at com.oracle.svm.core.jdk.RuntimeSupport.executeHooks(RuntimeSupport.java:125) [bci: 35], stackSize=0, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=40, sourceFile=RuntimeSupport.java,  }
 
100|Constant(1, i32) - node represents a constant 
101|+ 
102|LoopEnd 
103|FrameState@46 - 103|FrameState@46 { sourceLine=128, code=ResolvedJavaMethodBytecode<RuntimeSupport.executeHooks(AtomicReference)>, stackSize=0, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=46, sourceFile=RuntimeSupport.java,  }
 
104|Return 
105|FrameState@-4[AFTER_EXCEPTION_BCI] - 105|FrameState@-4[AFTER_EXCEPTION_BCI] { code=ResolvedJavaMethodBytecode<RuntimeSupport.executeHooks(AtomicReference)>, stackSize=1, duringCall=false, locksSize=0, localsSize=6, rethrowException=false, bci=AFTER_EXCEPTION_BCI,  }
 
106|Unwind 
